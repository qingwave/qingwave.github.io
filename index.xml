<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Qingwave</title>
        <link>https://qingwave.github.io/</link>
        <description>Coding, Reading and Daydreaming</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Fri, 10 Mar 2023 06:21:05 &#43;0000</lastBuildDate>
            <atom:link href="https://qingwave.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>长安花事</title>
    <link>https://qingwave.github.io/xian-flower-blooming/</link>
    <pubDate>Fri, 10 Mar 2023 06:21:05 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/xian-flower-blooming/</guid>
    <description><![CDATA[<p>惊蛰一过，人也跟着躁动起来，心里的嫩芽和这花儿啊虫儿啊一样冒了出来，想出去看看花、踏踏青、爬爬山，总之是要亲近这春，赏春景、吃春食、醉春风。</p>
<p>回来西安已快两年，时常想起北京的春，玉渊潭的樱花、元大都的海棠、景山的牡丹、S2上漫山遍野的山桃花，最喜欢的还是颐和园的玉兰，可以坐在树下待上好久，嗅着香味儿，看着大爷大妈们长枪短炮的拍花。每个地方的春都是不一样的，或许是参杂了当时的心境，春天一到，就想去出去体验体验这片土地的春意。</p>
<p>过完年，环城公园的迎春花最先绽放，先是星星点点，而后连成一片，青灰色的城墙下开始明朗起来。城墙外的大明宫，最近每年都会去放风筝，有时赶上腊梅，狠狠地在枝头吸上一口，沁人心脾；有时梅花正盛，白的、红的、黄的，总能在花下碰到穿汉服的小姑娘，人面红花，相应成趣；再晚些时候，只能在太液池看着鸭子游来游去。到了三月，天气突然热上几天，紫叶李趁着人们不注意一下子就开满了街角巷边，一阵风来，白色的小花瓣纷纷落下，像是起舞的碎花裙。</p>
<p>三月的中下旬，樱花徐徐开了起来，相比于青龙寺，更喜欢交大的樱花，想起之前在学校，早起去中楼上课穿过樱花东路，团团簇簇的樱花伸出手来，满眼都是繁花。交大的樱花据说是彭康校长组织种下的，大部分是关山樱，三两株绿色的是御衣黄。关山樱是重瓣花，看起来厚重饱满，刚开始是白色的，随着花期慢慢变成粉色，真有些千朵万朵压枝低。清明过后，几场雨下来，花褪残红，落在地上成了花径，又是一番风景。然后，兴庆宫的牡丹和郁金香开始形成规模。再然后，春天也跟着柳絮飘走了。</p>
<p>东坡说花不看开人易老，毕业以后，越发觉得时间过得飞过，一日一日，一年一年好像没有什么区别，或许平淡的日子里也有很多细小的花瓣吧，等待着去观赏去发现。人生又看得几清明，早已没了什么远大的目标，认真生活已是不易，开不成牡丹，开一朵阿拉伯婆婆纳也好。</p>
]]></description>
</item><item>
    <title>Golang实现一个事务型内存数据库</title>
    <link>https://qingwave.github.io/golang-in-memory-database/</link>
    <pubDate>Wed, 01 Mar 2023 08:01:22 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-in-memory-database/</guid>
    <description><![CDATA[<p>内存数据库经我们经常用到，例如Redis，那么如何从零实现一个内存数据库呢，本文旨在介绍如何使用Golang编写一个KV内存数据库<a href="https://github.com/qingwave/mossdb" target="_blank" rel="noopener noreffer">MossDB</a>。</p>
<h2 id="特性" class="headerLink">
    <a href="#%e7%89%b9%e6%80%a7" class="header-mark"></a>特性</h2><p>MossDB是一个纯Golang编写、可嵌入的、键值型内存数据库，包含以下特性</p>
<ul>
<li>可持久化，类似Redis AOF(Append only Log)</li>
<li>支持事务</li>
<li>支持近实时的TTL(Time to Live), 可以实现毫秒级的过期删除</li>
<li>前缀搜索</li>
<li>Watch接口，可以监听某个键值的内容变化，类似etcd的Watch</li>
<li>多后端存储，目前支持HashMap和RadixTree</li>
</ul>
<h2 id="命名由来" class="headerLink">
    <a href="#%e5%91%bd%e5%90%8d%e7%94%b1%e6%9d%a5" class="header-mark"></a>命名由来</h2><p><code>Moss</code>有苔、苔花的含义，MossDB的名字来源于清代袁牧的一句诗:</p>
<blockquote>
<p>苔花如米小，也学牡丹开</p>
</blockquote>
<p>MossDB虽小，但五脏俱全，也支持了很多重要功能。另外，巧合的是《流浪地球2》中的超级计算机550W名字就是Moss。</p>
<h2 id="架构" class="headerLink">
    <a href="#%e6%9e%b6%e6%9e%84" class="header-mark"></a>架构</h2><p>内存数据库虽然使用简单，实现起来却有很多细节，Golang目前也存在不少优秀的开源内存数据库，比如<a href="https://github.com/tidwall/buntdb" target="_blank" rel="noopener noreffer">buntdb</a>、<a href="https://github.com/hashicorp/go-memdb" target="_blank" rel="noopener noreffer">go-memdb</a>，在编写MossDB过程中也借鉴了一些它们的特性。</p>
<p>MossDB的架构如图：


</p>
<p>自上往下分为：</p>
<ol>
<li>接口层，提供API接受用户请求</li>
<li>核心层，实现事务、过期删除、Watch等功能</li>
<li>存储层，提供KV的后端存储以及增删改查</li>
<li>持久化层，使用AOL持久化即每次修改操作都会持久化到磁盘Log中</li>
</ol>
<h3 id="快速开始" class="headerLink">
    <a href="#%e5%bf%ab%e9%80%9f%e5%bc%80%e5%a7%8b" class="header-mark"></a>快速开始</h3><p>MossDB可嵌入到Go程序中，可以通过<code>go get</code>获取</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">go get github.com/qingwave/mossdb
</span></span></code></pre></div><p>MossDB提供了易用的API，可以方便地进行数据处理，下面的示例代码展示了如何使用MossDB：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/qingwave/mossdb&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// create db instance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">mossdb</span><span class="p">.</span><span class="nx">Config</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// set, get data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;key1&#34;</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;val1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;get key1: %s&#34;</span><span class="p">,</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;key1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// transaction
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">db</span><span class="p">.</span><span class="nf">Tx</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">mossdb</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">val1</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;key1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">tx</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;key2&#34;</span><span class="p">,</span> <span class="nx">val1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>更多示例见<a href="https://github.com/qingwave/mossdb" target="_blank" rel="noopener noreffer">源码</a></p>
<h2 id="具体实现" class="headerLink">
    <a href="#%e5%85%b7%e4%bd%93%e5%ae%9e%e7%8e%b0" class="header-mark"></a>具体实现</h2><p>从下往上分别介绍下MossDB如何设计与实现，以及相关的细节。</p>
<h3 id="aof持久化" class="headerLink">
    <a href="#aof%e6%8c%81%e4%b9%85%e5%8c%96" class="header-mark"></a>AOF持久化</h3><p>AOF源于Redis提供两种持久化技术，另外一种是RDB，AOF是指在每次写操作后，将该操作序列化后追加到文件中，重启时重放文件中的对应操作，从而达到持久化的目的。其实现简单，用在MossDB是一个不错的选择，但需要注意的是AOF缺点同样明显，如果文件较大，每次重启会花费较多时间。</p>
<p>Redis的AOF是一种后写式日志，先写内存直接返回给用户，再写磁盘文件持久化，可以保证其高性能，但如果中途宕机会丢失数据。MossDB中的AOF采用了WAL(预写式日志)实现，先写Log再写内存，用来保证数据不会丢失，从而可以进一步实现事务。</p>
<p>那么采用WAL会不会影响其性能？每次必须等到落盘后才进行其他操作，WAL的每次写入会先写到内核缓冲区，这个调用很快就返回了，内核再将数据落盘。我们也可以使用<code>fsync</code>调用强制内核执行直接将数据写入磁盘。在MossDB中普通写操作之会不会直接调用<code>fsync</code>，事务写中强制开启<code>fsync</code>，从而平衡数据一致性与性能。</p>
<p>WAL的实现引用了<a href="https://github.com/tidwall/wal" target="_blank" rel="noopener noreffer">tiwall/wal</a>，其中封装了对Log文件的操作，可以支持批量写入。由于WAL是二进制的，必须将数据进行编码，通过<code>varint</code>编码实现，将数据长度插入到数据本体之前，读取时可以读取定长的数据长度，然后按长度读取数据本体。MossDB中数据格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Record</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Op</span>        <span class="kt">uint16</span>
</span></span><span class="line"><span class="cl">	<span class="nx">KeySize</span>   <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ValSize</span>   <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Timestamp</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">TTL</span>       <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Key</span>       <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Val</span>       <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>对应编码后的二进制格式为:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">|------------------------------------------------------------|
</span></span><span class="line"><span class="cl">| Op | KeySize | ValSize | Timestamp | TTL | Key    | Val    |
</span></span><span class="line"><span class="cl">|------------------------------------------------------------|
</span></span><span class="line"><span class="cl">| 2  | 4       | 4       | 8         | 8   | []byte | []byte |
</span></span><span class="line"><span class="cl">|------------------------------------------------------------|
</span></span></code></pre></div><p>使用<code>binary.BigEndian.PutUint16</code>进行编码，解码时通过<code>binary.BigEndian.Uint16</code>，从而依次取得生成完整的数据。</p>
<h3 id="存储引擎" class="headerLink">
    <a href="#%e5%ad%98%e5%82%a8%e5%bc%95%e6%93%8e" class="header-mark"></a>存储引擎</h3><p>MossDB提供了存储接口，只要实现了此接口都可以作为其后端存储</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Store</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Set</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">val</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Prefix</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Dump</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Len</span><span class="p">()</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>内置提供了HashMap与RadixTree两种方式，HashMap实现简单通过简单封装<code>map</code>可以快速进行查询与插入，但范围搜索性能差。RadixTree即前缀树，查询插入的时间复杂度只与Key的长度相关，而且支持范围搜索，MossDB采用<a href="https://github.com/arriqaaq/art" target="_blank" rel="noopener noreffer">Adaptive Radix Tree</a>可以避免原生的前准树空间浪费。</p>
<p>由于RadixTree的特性，MossDB可以方便的进行前缀搜索，目前支持<code>List</code>与<code>Watch</code>操作。</p>
<h3 id="事务实现" class="headerLink">
    <a href="#%e4%ba%8b%e5%8a%a1%e5%ae%9e%e7%8e%b0" class="header-mark"></a>事务实现</h3><p>要实现事务必须要保证其ACID特性，MossDB的事务定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Tx</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span>      <span class="o">*</span><span class="nx">DB</span> <span class="c1">// DB实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">commits</span> <span class="p">[]</span><span class="o">*</span><span class="nx">Record</span> <span class="c1">// 对于写操作生成 Record, 用来做持久化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">undos</span>   <span class="p">[]</span><span class="o">*</span><span class="nx">Record</span> <span class="c1">// 对于写操作生成 Undo Record，用于回滚
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>MossDB中一次事务的流程主要包含以下几个步骤：</p>
<ol>
<li>首先加锁，保证其数据一致性</li>
<li>对于写操作，生成Commits和Undo Records，然后写入内存；读操作则直接执行</li>
<li>提交阶段，将Commits持久化到WAL中；若写入失败，则删除已写入数据；成功则设置数据的其他属性(TTL, Watch等)</li>
<li>若中间发生错误，执行回滚操作，将Undo Records的记录执行</li>
<li>事务完成，释放锁</li>
</ol>
<h3 id="watch" class="headerLink">
    <a href="#watch" class="header-mark"></a>Watch</h3><p>由于工作中经常使用Kubernetes，对于其Watch接口印象深刻，通过Watch来充当其事件总线，保证其声明式对象的管理。Kubernetes的Watch底层由etcd实现，MossDB也实现了类似的功能。</p>
<p>Watch的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Watcher</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mu</span>       <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span> <span class="c1">// 锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">watchers</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">SubWatcher</span> <span class="c1">// watchId与具体Watcher直接的映射
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">keys</span>     <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">containerx</span><span class="p">.</span><span class="nx">Set</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span> <span class="c1">// Watch单个key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ranges</span>   <span class="o">*</span><span class="nx">art</span><span class="p">.</span><span class="nx">Tree</span> <span class="c1">// 前缀Watch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">queue</span>    <span class="nx">workqueue</span><span class="p">.</span><span class="nx">WorkQueue</span> <span class="c1">// 工作队列，存放所有事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">stop</span>     <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span> <span class="c1">// 是否中止
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>通过<a href="https://github.com/qingwave/gocorex/blob/main/syncx/workqueue/workqueue.go" target="_blank" rel="noopener noreffer">工作队列</a>模式，任何写操作都会同步追加到队列中，如果存在单个key的监听者，则通过<code>watchers</code> map获取到对应列表，依次发送事件。对于前缀Watch，我们不可能记录此前缀的所有Key，这里借鉴了etcd，通过RadixTree保存<code>前缀Key</code>，当有新事件时，匹配Key所在的路径，如果有监听者，则进行事件通知。</p>
<p>调用Watch会返回一个Channel，用户只需要监听Channel即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">mossdb</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span> <span class="o">:=</span> <span class="s">&#34;watch-key&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="mi">1000</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// start watch key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;start watch key %s&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 模拟发送event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">Val</span><span class="p">(</span><span class="s">&#34;val1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">Val</span><span class="p">(</span><span class="s">&#34;val2&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">Val</span><span class="p">(</span><span class="s">&#34;val3&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;context done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;watch done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;receive event: %s, key: %s, new val: %s&#34;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">Op</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">Key</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">Val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Output
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 2023/02/23 09:48:50 start watch key watch-key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 receive event: MODIFY, key: watch-key, new val: val1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 receive event: MODIFY, key: watch-key, new val: val2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 receive event: DELETE, key: watch-key, new val:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 context done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h3 id="ttl" class="headerLink">
    <a href="#ttl" class="header-mark"></a>TTL</h3><p>过期删除再很多场景很有用，比如验证码过期、订单未支付关闭等。MossDB采用时间堆来实现精确的Key过期策略，具体原理可以参考之前的文章<a href="/golang-distributed-system-x-cron" rel="">Golang分布式应用之定时任务</a>，在查询操作时也会检查Key是否过期，如果过期则直接返回空数据。配合Watch操作可以精确管理数据的生命周期。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>至此，MossDB的实现细节已经分析完成，支持了事务、持久化、Watch与过期删除等特性，后续可能会支持HTTP API、存储快照等功能。</p>
<p>所有代码见<a href="https://github.com/qingwave/mossdb" target="_blank" rel="noopener noreffer">https://github.com/qingwave/mossdb</a>，欢迎批评指正以及Star。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Rust初探: 实现一个Ping</title>
    <link>https://qingwave.github.io/rust-ping/</link>
    <pubDate>Thu, 24 Nov 2022 16:50:14 &#43;0800</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/rust-ping/</guid>
    <description><![CDATA[<p>这两年Rust火的一塌糊涂，甚至都烧到了前端，再不学习怕是要落伍了。最近翻了翻文档，写了个简单的Ping应用练练手，被所有权折腾的够呛，相比起Golang上手难度大很多，现将开发中的一些问题总结如下，所有源码见<a href="https://github.com/qingwave/ring" target="_blank" rel="noopener noreffer">ring</a>。</p>
<h2 id="目标" class="headerLink">
    <a href="#%e7%9b%ae%e6%a0%87" class="header-mark"></a>目标</h2><p>实现一个Ping，功能包含：</p>
<ul>
<li>命令行解析</li>
<li>实现ICMP协议，<a href="https://docs.rs/pnet/latest/pnet/" target="_blank" rel="noopener noreffer">pnet</a>包中已经包含了ICMP包定义，可以使用<a href="https://docs.rs/socket2/latest/socket2/" target="_blank" rel="noopener noreffer">socket2</a>库发送</li>
<li>周期性发送Ping，通过多线程发送，再汇总结果</li>
<li>监听退出信号</li>
</ul>
<h3 id="命令行解析" class="headerLink">
    <a href="#%e5%91%bd%e4%bb%a4%e8%a1%8c%e8%a7%a3%e6%9e%90" class="header-mark"></a>命令行解析</h3><p>系统库<code>std::env::args</code>可以解析命令行参数，但对于一些复杂的参数使用起来比较繁琐，更推荐<a href="https://docs.rs/crate/clap/latest" target="_blank" rel="noopener noreffer">clap</a>。利用clap的注解，通过结构体定义命令行参数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="sd">/// ping but with rust, rust + ping -&gt; ring
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="cp">#[derive(Parser, Debug, Clone)]</span><span class="w"> </span><span class="c1">// Parser生成clap命令行解析方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#[command(author, version, about, long_about = None)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Args</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="sd">/// Count of ping times
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="w">    </span><span class="cp">#[arg(short, default_value_t = 4)]</span><span class="w"> </span><span class="c1">// short表示开启短命名，默认为第一个字母，可以指定；default_value_t设置默认值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">count</span>: <span class="kt">u16</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="sd">/// Ping packet size
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="w">    </span><span class="cp">#[arg(short = &#39;s&#39;, default_value_t = 64)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">packet_size</span>: <span class="kt">usize</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="sd">/// Ping ttl
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="w">    </span><span class="cp">#[arg(short = &#39;t&#39;, default_value_t = 64)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ttl</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="sd">/// Ping timeout seconds
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="w">    </span><span class="cp">#[arg(short = &#39;w&#39;, default_value_t = 1)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">timeout</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="sd">/// Ping interval duration milliseconds
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="w">    </span><span class="cp">#[arg(short = &#39;i&#39;, default_value_t = 1000)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">interval</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="sd">/// Ping destination, ip or domain
</span></span></span><span class="line"><span class="cl"><span class="sd"></span><span class="w">    </span><span class="cp">#[arg(value_parser=Address::parse)]</span><span class="w"> </span><span class="c1">// 自定义解析
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">destination</span>: <span class="nc">Address</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>clap可以方便的指定参数命名、默认值、解析方法等，运行结果如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">➜  ring git:<span class="o">(</span>main<span class="o">)</span> cargo run -- -h
</span></span><span class="line"><span class="cl">   Compiling ring v0.1.0 <span class="o">(</span>/home/i551329/work/ring<span class="o">)</span>
</span></span><span class="line"><span class="cl">    Finished dev <span class="o">[</span>unoptimized + debuginfo<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 1.72s
</span></span><span class="line"><span class="cl">     Running <span class="sb">`</span>target/debug/ring -h<span class="sb">`</span>
</span></span><span class="line"><span class="cl">ping but with rust, rust + ping -&gt; ring
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Usage: ring <span class="o">[</span>OPTIONS<span class="o">]</span> &lt;DESTINATION&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Arguments:
</span></span><span class="line"><span class="cl">  &lt;DESTINATION&gt;  Ping destination, ip or domain
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Options:
</span></span><span class="line"><span class="cl">  -c &lt;COUNT&gt;            Count of ping <span class="nb">times</span> <span class="o">[</span>default: 4<span class="o">]</span>
</span></span><span class="line"><span class="cl">  -s &lt;PACKET_SIZE&gt;      Ping packet size <span class="o">[</span>default: 64<span class="o">]</span>
</span></span><span class="line"><span class="cl">  -t &lt;TTL&gt;              Ping ttl <span class="o">[</span>default: 64<span class="o">]</span>
</span></span><span class="line"><span class="cl">  -w &lt;TIMEOUT&gt;          Ping timeout seconds <span class="o">[</span>default: 1<span class="o">]</span>
</span></span><span class="line"><span class="cl">  -i &lt;INTERVAL&gt;         Ping interval duration milliseconds <span class="o">[</span>default: 1000<span class="o">]</span>
</span></span><span class="line"><span class="cl">  -h, --help            Print <span class="nb">help</span> information
</span></span><span class="line"><span class="cl">  -V, --version         Print version information
</span></span></code></pre></div><h3 id="实现ping" class="headerLink">
    <a href="#%e5%ae%9e%e7%8e%b0ping" class="header-mark"></a>实现Ping</h3><p>pnet中提供了ICMP包的定义，socket2可以将定义好的ICMP包发送给目标IP，另一种实现是通过<code>pnet_transport::transport_channel</code>发送原始数据包，但需要过滤结果而且权限要求较高。</p>
<p>首先定义ICMP包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="fm">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="n">packet_size</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">icmp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MutableEchoRequestPacket</span>::<span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">buf</span><span class="p">[</span><span class="o">..</span><span class="p">]).</span><span class="n">ok_or</span><span class="p">(</span><span class="n">RingError</span>::<span class="n">InvalidBufferSize</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">icmp</span><span class="p">.</span><span class="n">set_icmp_type</span><span class="p">(</span><span class="n">IcmpTypes</span>::<span class="n">EchoRequest</span><span class="p">);</span><span class="w"> </span><span class="c1">// 设置为EchoRequest类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">icmp</span><span class="p">.</span><span class="n">set_icmp_code</span><span class="p">(</span><span class="n">IcmpCodes</span>::<span class="n">NoCode</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">icmp</span><span class="p">.</span><span class="n">set_sequence_number</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="n">sequence</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">seq_offset</span><span class="p">);</span><span class="w"> </span><span class="c1">// 序列号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">icmp</span><span class="p">.</span><span class="n">set_identifier</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="n">id</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">icmp</span><span class="p">.</span><span class="n">set_checksum</span><span class="p">(</span><span class="n">util</span>::<span class="n">checksum</span><span class="p">(</span><span class="n">icmp</span><span class="p">.</span><span class="n">packet</span><span class="p">(),</span><span class="w"> </span><span class="mi">1</span><span class="p">));</span><span class="w"> </span><span class="c1">// 校验函数
</span></span></span></code></pre></div><p>通过socket2发送请求</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">socket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Socket</span>::<span class="n">new</span><span class="p">(</span><span class="n">Domain</span>::<span class="no">IPV4</span><span class="p">,</span><span class="w"> </span><span class="n">Type</span>::<span class="no">DGRAM</span><span class="p">,</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">Protocol</span>::<span class="no">ICMPV4</span><span class="p">))</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">src</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SocketAddr</span>::<span class="n">new</span><span class="p">(</span><span class="n">net</span>::<span class="n">IpAddr</span>::<span class="n">V4</span><span class="p">(</span><span class="n">Ipv4Addr</span>::<span class="no">UNSPECIFIED</span><span class="p">),</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">socket</span><span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">src</span><span class="p">.</span><span class="n">into</span><span class="p">())</span><span class="o">?</span><span class="p">;</span><span class="w"> </span><span class="c1">// 绑定源地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">socket</span><span class="p">.</span><span class="n">set_ttl</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">ttl</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">socket</span><span class="p">.</span><span class="n">set_read_timeout</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_secs</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">timeout</span><span class="p">)))</span><span class="o">?</span><span class="p">;</span><span class="w"> </span><span class="c1">// 超时配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">socket</span><span class="p">.</span><span class="n">set_write_timeout</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_secs</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">timeout</span><span class="p">)))</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 发送
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">socket</span><span class="p">.</span><span class="n">send_to</span><span class="p">(</span><span class="n">icmp</span><span class="p">.</span><span class="n">packet_mut</span><span class="p">(),</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">dest</span><span class="p">.</span><span class="n">into</span><span class="p">())</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>最后处理相应，转换成pnet中的EchoReplyPacket</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">mem_buf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">buf</span><span class="p">.</span><span class="n">as_mut_slice</span><span class="p">()</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="p">[</span><span class="kt">u8</span><span class="p">]</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="p">[</span><span class="n">std</span>::<span class="n">mem</span>::<span class="n">MaybeUninit</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">])</span><span class="w"> </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">size</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">socket</span><span class="p">.</span><span class="n">recv_from</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">mem_buf</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 转换成EchoReply
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span><span class="w"> </span><span class="n">reply</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">EchoReplyPacket</span>::<span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">).</span><span class="n">ok_or</span><span class="p">(</span><span class="n">RingError</span>::<span class="n">InvalidPacket</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>至此，一次Ping请求完成。</p>
<h3 id="周期性发送" class="headerLink">
    <a href="#%e5%91%a8%e6%9c%9f%e6%80%a7%e5%8f%91%e9%80%81" class="header-mark"></a>周期性发送</h3><p>Ping需要周期性的发送请求，比如秒秒请求一次，如果直接通过循环实现，一次请求卡住将影响主流程，必须通过多线程来保证固定周期的发送。</p>
<p>发送请求</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">send</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="n">AtomicU64</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="w"> </span><span class="c1">// 统计发送次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span><span class="w"> </span><span class="n">_send</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">send</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">this</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">sx</span><span class="p">,</span><span class="w"> </span><span class="n">rx</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bounded</span><span class="p">(</span><span class="n">this</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="n">count</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">);</span><span class="w"> </span><span class="c1">// channel接受线程handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="n">this</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="n">count</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">_this</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">this</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">sx</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">_this</span><span class="p">.</span><span class="n">ping</span><span class="p">(</span><span class="n">i</span><span class="p">))).</span><span class="n">unwrap</span><span class="p">();</span><span class="w"> </span><span class="c1">// 线程中运行ping，并将handler发送到channel中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">_send</span><span class="p">.</span><span class="n">fetch_add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">Ordering</span>::<span class="n">SeqCst</span><span class="p">);</span><span class="w"> </span><span class="c1">// 发送一次，send加1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">this</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="n">count</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">thread</span>::<span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_millis</span><span class="p">(</span><span class="n">this</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="n">interval</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nb">drop</span><span class="p">(</span><span class="n">sx</span><span class="p">);</span><span class="w"> </span><span class="c1">// 发送完成关闭channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">});</span><span class="w">
</span></span></span></code></pre></div><ul>
<li><code>thread::spawn</code>可以快速创建线程，但需要注意所有权的转移，如果在线程内部调用方法获取变量，需要通过<code>Arc</code>原子引用计数</li>
<li><code>send</code>变量用来统计发送数，原子类型，并且用Arc包裹；<code>this</code>是当前类的Arc克隆，会转移到线程中</li>
<li>第一个线程内周期性调用<code>ping()</code>，并且其在单独线程中运行</li>
<li>通过<code>bounded</code>来定义channel(类似Golang中的chan)，用来处理结果，发送完成关闭</li>
</ul>
<p>处理结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">success</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="n">AtomicU64</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="w"> </span><span class="c1">// 定义请求成功的请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span><span class="w"> </span><span class="n">_success</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">success</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">summary_s</span><span class="p">,</span><span class="w"> </span><span class="n">summary_r</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bounded</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w"> </span><span class="c1">// channel来判断是否处理完成
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">handle</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">rx</span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">res</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">handle</span><span class="p">.</span><span class="n">join</span><span class="p">().</span><span class="n">ok</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">res</span><span class="p">.</span><span class="n">is_ok</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">_success</span><span class="p">.</span><span class="n">fetch_add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">Ordering</span>::<span class="n">SeqCst</span><span class="p">);</span><span class="w"> </span><span class="c1">// 如果handler结果正常，success加1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">summary_s</span><span class="p">.</span><span class="n">send</span><span class="p">(()).</span><span class="n">unwrap</span><span class="p">();</span><span class="w"> </span><span class="c1">// 处理完成
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">});</span><span class="w">
</span></span></span></code></pre></div><p>第二个线程用来统计结果，channel通道取出ping线程的handler，如果返回正常则加1</p>
<p>处理信号</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">stop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">signal_notify</span><span class="p">()</span><span class="o">?</span><span class="p">;</span><span class="w"> </span><span class="c1">// 监听退出信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="fm">select!</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">recv</span><span class="p">(</span><span class="n">stop</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">sig</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sig</span><span class="p">.</span><span class="n">ok</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 收到退出信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Receive signal </span><span class="si">{:?}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">recv</span><span class="p">(</span><span class="n">summary_r</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">summary</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 任务完成
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">summary</span><span class="p">.</span><span class="n">err</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Error on summary: </span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>通过select来处理信号(类似Golang中的select)，到收到退出信号或者任务完成时继续往下执行。</p>
<h3 id="信号处理" class="headerLink">
    <a href="#%e4%bf%a1%e5%8f%b7%e5%a4%84%e7%90%86" class="header-mark"></a>信号处理</h3><p>Golang中可以很方便的处理信号，但在Rust中官方库没有提供类似功能，可以通过<code>signal_hook</code>与<code>crossbeam_channel</code>实现监听退出信号</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">signal_notify</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">std</span>::<span class="n">io</span>::<span class="nb">Result</span><span class="o">&lt;</span><span class="n">Receiver</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="n">r</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bounded</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w"> </span><span class="c1">// 定义channel，用来异步接受退出信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">signals</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">signal_hook</span>::<span class="n">iterator</span>::<span class="n">Signals</span>::<span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="p">[</span><span class="no">SIGINT</span><span class="p">,</span><span class="w"> </span><span class="no">SIGTERM</span><span class="p">])</span><span class="o">?</span><span class="p">;</span><span class="w"> </span><span class="c1">// 创建信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">signal</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">signals</span><span class="p">.</span><span class="n">forever</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 如果结果到信号发送到channel中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="n">s</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">signal</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="w"> </span><span class="c1">// 返回接受channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="其他" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96" class="header-mark"></a>其他</h3><p>很多吐槽人Golang的错误处理，Rust也不遑多让，不过提供了<code>?</code>语法糖，也可以配合<code>anyhow</code>与<code>thiserror</code>来简化错误处理。</p>
<h2 id="验证" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81" class="header-mark"></a>验证</h2><p>Ping域名/IP</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ring git:<span class="o">(</span>main<span class="o">)</span>  cargo run -- www.baidu.com 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PING www.baidu.com<span class="o">(</span>103.235.46.40<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.40: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>255.85ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.40: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>254.17ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.40: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">3</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>255.41ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.40: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">4</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>256.50ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- www.baidu.com ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">4</span> packets transmitted, <span class="m">4</span> received, 0% packet loss, <span class="nb">time</span> 3257.921ms
</span></span></code></pre></div><p>测试退出信息，运行中通过Ctrl+C中止</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cargo run 8.8.8.8 -c <span class="m">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PING 8.8.8.8<span class="o">(</span>8.8.8.8<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 8.8.8.8: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>4.32ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 8.8.8.8: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>3.02ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 8.8.8.8: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">3</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>3.24ms
</span></span><span class="line"><span class="cl">^CReceive signal <span class="m">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- 8.8.8.8 ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">3</span> packets transmitted, <span class="m">3</span> received, 0% packet loss, <span class="nb">time</span> 2365.104ms
</span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>Rust为了安全高效，通过引入所有权来解决GC问题，也带来了许多不便，编程时必须要考虑到变量的声明周期、借用等问题，所有语言都是在方便、性能、安全之间做权衡，要么程序员不方便，要么编译器多做点功。换一个角度来说Bug总是不可避免的，在编译阶段出现总好过运行阶段。</p>
<p>所有源码见: <a href="https://github.com/qingwave/ring" target="_blank" rel="noopener noreffer">https://github.com/qingwave/ring</a></p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>如何实现零宕机的配置热加载</title>
    <link>https://qingwave.github.io/config-reload/</link>
    <pubDate>Fri, 30 Sep 2022 10:37:17 &#43;0800</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/config-reload/</guid>
    <description><![CDATA[<p>对于高可用的服务，为了保证服务可用性，更新配置时必然不能直接停止服务，可以使用配置热加载来避免服务暂停，不需要重启服务。</p>
<p>配置的热加载可以分为两个场景，手动更新与自动更新。</p>
<h2 id="手动更新" class="headerLink">
    <a href="#%e6%89%8b%e5%8a%a8%e6%9b%b4%e6%96%b0" class="header-mark"></a>手动更新</h2><p>对于一些临时调试，服务数量不多的情况下，可以进行手动更新配置。需要实现两点，如何触发更新，以及接受到更新后如何操作。</p>
<p>触发更新的手段很多，常见的有</p>
<ul>
<li>通过命令行，例如<code>nginx -s reload</code></li>
<li>通过信号，通常是SIGHUP，比如sshd、Prometheus等，其实Nginx的热加载内部也是调用SIGHUP信号</li>
<li>HTTP接口，例如Prometheus也支持HTTP的方式通过<code>curl -X POST :9090/-/reload</code>可以重新加载配置</li>
<li>RPC接口，类似HTTP</li>
</ul>
<p>接受到配置更新通知后，需要程序内部来重新加载配置，类似初始化过程，但要注意运行时可以要加锁来保证线程安全。</p>
<h2 id="自动更新" class="headerLink">
    <a href="#%e8%87%aa%e5%8a%a8%e6%9b%b4%e6%96%b0" class="header-mark"></a>自动更新</h2><p>自动更新是建立手动更新的基础上，首先服务要提供手动更新的方法，其次可以通过服务本身或者外部进程来自动调用配置更新接口，外部程序可以使用SideCar的形式与服务绑定。</p>
<p>自动加载配置的关键是如何感知配置变化，要考虑到单机环境与分布式环境。</p>
<h3 id="单机环境" class="headerLink">
    <a href="#%e5%8d%95%e6%9c%ba%e7%8e%af%e5%a2%83" class="header-mark"></a>单机环境</h3><p>Linux提供了<a href="https://man7.org/linux/man-pages/man7/inotify.7.html" target="_blank" rel="noopener noreffer">inotify</a>接口，可以用来监听文件或者目录的增上改查事件。我们可以使用inotify来监听配置变化，如果有更新则调用更新接口来实现热加载。其他平台也提供了类似的接口。</p>
<p>在Golang中<a href="https://github.com/fsnotify/fsnotify" target="_blank" rel="noopener noreffer">fsnotify</a>提供了跨平台的文件监听接口，可以方便的监听文件，使用方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">    <span class="nx">watcher</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">fsnotify</span><span class="p">.</span><span class="nf">NewWatcher</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">watcher</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 监听目录或者文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">watcher</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;/tmp&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取监听事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">watcher</span><span class="p">.</span><span class="nx">Events</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;event:&#34;</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nx">event</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">fsnotify</span><span class="p">.</span><span class="nx">Write</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;modified file:&#34;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// 进行更新操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">watcher</span><span class="p">.</span><span class="nx">Errors</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;error:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}()</span>
</span></span></code></pre></div><h3 id="分布式环境" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e7%8e%af%e5%a2%83" class="header-mark"></a>分布式环境</h3><p>在分布式环境中实现配置热更新，需要能够感知配置（本地或者远端），对于本地配置需要平台配合将远端配置同步到本地（比如kubernetes会同步ConfigMap到Pod中），然后按照单机环境的方式来监听文件变化。</p>
<p>对于远端配置，需要依赖额外的分布式配置中心，比如Apollo、etcd、ZooKeeper等。以etcd为例，etcd提供了watch接口，可以监听对应配置的变化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 获取watch Channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">ch</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 处理事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">wr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;watch closed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wr</span><span class="p">.</span><span class="nx">Events</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">key</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">),</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">PUT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// 更新处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// 1. 对比配置是否变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// 2. 变化了更新内存中的配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">DELETE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// 删除处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></div><p>为了实现配置更新通知，通常有两种方式，Pull与Push。</p>
<ul>
<li>Pull就是客户端轮询，定期查询配置是否更新，这种方式实现简单，对服务器压力小，但时效性低</li>
<li>Push由服务端实现，通过维护一个长连接，实时推送数据，这种方式时效性高，但逻辑更复杂，连接过多会影响服务端性能。目前etcd v3版本是通过HTTP2来实现实时数据推送</li>
</ul>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文主要总结实现配置热更新的多种方式，手动更新可以通过Socket、信号等进程间通信手段来通知服务，自动更新可以通过inotify来感知配置变化，在分布式环境中就需要配合分布式配置中心来进行热更新。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang优雅之道</title>
    <link>https://qingwave.github.io/golang-programming-pattern/</link>
    <pubDate>Mon, 12 Sep 2022 14:57:10 &#43;0800</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-programming-pattern/</guid>
    <description><![CDATA[<p>借助一些设计模式、流式编程、函数编程的方法可以让我们的Golang代码更清晰优雅，本文中描述了在错误处理、可选配置、并发控制等方面的优化手段。</p>
<h2 id="链式错误处理" class="headerLink">
    <a href="#%e9%93%be%e5%bc%8f%e9%94%99%e8%af%af%e5%a4%84%e7%90%86" class="header-mark"></a>链式错误处理</h2><p>很多人不喜欢Go的错误处理，需要写大量<code>if err != nil</code>的代码，特别是在一些复杂步骤场景中，每一步都要判断结果是否出错。在这种情况中，可以通过类似链式调用将错误封装在其中。</p>
<p>比如在对象中附带一个error属性，在每一步调用中如果error不为空直接返回</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Handler</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">props</span> <span class="kd">interface</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">h</span> <span class="o">*</span><span class="nx">Handler</span><span class="p">)</span> <span class="nf">Err</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">h</span> <span class="o">*</span><span class="nx">Handler</span><span class="p">)</span> <span class="nf">Step1</span><span class="p">()</span> <span class="o">*</span><span class="nx">Handler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">h</span><span class="p">.</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">h</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// do something for step2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="nx">h</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">h</span> <span class="o">*</span><span class="nx">Handler</span><span class="p">)</span> <span class="nf">Step2</span><span class="p">()</span> <span class="o">*</span><span class="nx">Handler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">h</span><span class="p">.</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">h</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// do something fot step2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="nx">h</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ... StepN()
</span></span></span></code></pre></div><p>调用时直接通过链式调用即可，最后再判断错误</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">h</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Handler</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">h</span><span class="p">.</span><span class="nf">Step1</span><span class="p">().</span><span class="nf">Step2</span><span class="p">().</span><span class="nf">StepN</span><span class="p">().</span><span class="nf">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// handle error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>这种方式在一些数据库包中有大量使用，比如<code>etcd</code>、<code>gorm</code>。</p>
<h2 id="可选配置" class="headerLink">
    <a href="#%e5%8f%af%e9%80%89%e9%85%8d%e7%bd%ae" class="header-mark"></a>可选配置</h2><p>在创建对象时，如果可配置的属性很多，通常会引入一个配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Config</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Port</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Host</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Timeout</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewServer</span><span class="p">(</span><span class="nx">conf</span> <span class="o">*</span><span class="nx">Config</span><span class="p">)</span> <span class="o">*</span><span class="nx">Server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通常这些配置都有默认值，config也不是必须的，通过建造者模式可以轻松解决此类问题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">builder</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Builder</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">server</span> <span class="o">:=</span> <span class="nx">builder</span><span class="p">.</span><span class="nf">WithPort</span><span class="p">(</span><span class="s">&#34;8080&#34;</span><span class="p">).</span><span class="nf">WithHost</span><span class="p">(</span><span class="s">&#34;0.0.0.0&#34;</span><span class="p">).</span><span class="nf">WithTimeOut</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">).</span><span class="nf">Complete</span><span class="p">()</span>
</span></span></code></pre></div><p>但建造者需要写一个建造类，配置对应的属性设置方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Builder</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">server</span> <span class="nx">Server</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">WithPort</span><span class="p">(</span><span class="nx">port</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Builder</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">b</span><span class="p">.</span><span class="nx">server</span><span class="p">.</span><span class="nx">port</span> <span class="p">=</span> <span class="nx">port</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">WithHost</span><span class="p">(</span><span class="nx">host</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Builder</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">b</span><span class="p">.</span><span class="nx">server</span><span class="p">.</span><span class="nx">host</span> <span class="p">=</span> <span class="nx">host</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>除了建造者模式，还可以通过可选配置，对调用者更友好，将配置项封装成Option，需要的时候注入对应的Option即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Option</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">Server</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nf">WithPort</span><span class="p">(</span><span class="nx">port</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">Option</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">s</span><span class="p">.</span><span class="nx">port</span> <span class="p">=</span> <span class="nx">port</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nf">WithHost</span><span class="p">(</span><span class="nx">host</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">Option</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">s</span><span class="p">.</span><span class="nx">host</span> <span class="p">=</span> <span class="nx">host</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nf">NewServer</span><span class="p">(</span><span class="nx">opts</span> <span class="o">...</span><span class="nx">Option</span><span class="p">)</span> <span class="o">*</span><span class="nx">Server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">s</span> <span class="o">:=</span> <span class="nf">defaultServer</span><span class="p">()</span> <span class="c1">// 默认配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">opt</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="c1">// 添加可选配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>调用时，只需在NewServer配置对应的Option即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 默认配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">s</span> <span class="o">:=</span> <span class="nf">NewServer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 可选配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">s</span> <span class="o">:=</span> <span class="nf">NewServer</span><span class="p">(</span><span class="nf">WithPort</span><span class="p">(</span><span class="s">&#34;8080&#34;</span><span class="p">),</span> <span class="nf">WithHost</span><span class="p">(</span><span class="s">&#34;127.0.0.1&#34;</span><span class="p">))</span>
</span></span></code></pre></div><p>可选配置相比直接使用配置和建造者模式，更加清晰，也非常容易扩展和维护，在kuberentes、etcd库中都有非常多的应用。</p>
<h2 id="并发控制" class="headerLink">
    <a href="#%e5%b9%b6%e5%8f%91%e6%8e%a7%e5%88%b6" class="header-mark"></a>并发控制</h2><p>Golang基础库中已经提供不少并发控制工具，比如Channel、WaitGroup、各种锁等等。</p>
<h3 id="errgroup" class="headerLink">
    <a href="#errgroup" class="header-mark"></a>ErrGroup</h3><p>WaitGroup可以等待多个Goroutine执行结束，但很多时候并发执行多个任务，如果其中一个任务出错那么整体失败，需要直接返回，这种情况下我们可以使用<a href="https://pkg.go.dev/golang.org/x/sync/errgroup" target="_blank" rel="noopener noreffer">ErrGroup</a></p>
<p>ErrGroup借助封装了WaitGroup、Once以及Context，调用Wait时如果一个任务失败取消Context直接返回，核心逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ErrGroup</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span>    <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cancel</span> <span class="kd">func</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">errOnce</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span>     <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">ErrGroup</span><span class="p">)</span> <span class="nf">Wait</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">g</span><span class="p">.</span><span class="nx">cancel</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">g</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">ErrGroup</span><span class="p">)</span> <span class="nf">Go</span><span class="p">(</span><span class="nx">f</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">g</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">f</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">ctx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 执行失败则运行cancel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">g</span><span class="p">.</span><span class="nx">errOnce</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">g</span><span class="p">.</span><span class="nx">err</span> <span class="p">=</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">g</span><span class="p">.</span><span class="nx">cancel</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">g</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="控制并发数" class="headerLink">
    <a href="#%e6%8e%a7%e5%88%b6%e5%b9%b6%e5%8f%91%e6%95%b0" class="header-mark"></a>控制并发数</h3><p>借助有缓冲的Channel，可以实现控制Goroutine并发数，逻辑如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewCtrlGroup</span><span class="p">(</span><span class="nx">number</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">CtrlGroup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">CtrlGroup</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ch</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="nx">number</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CtrlGroup</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">CtrlGroup</span><span class="p">)</span> <span class="nf">Enter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">ch</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">CtrlGroup</span><span class="p">)</span> <span class="nf">Leave</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">g</span><span class="p">.</span><span class="nx">ch</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">CtrlGroup</span><span class="p">)</span> <span class="nf">Go</span><span class="p">(</span><span class="nx">f</span> <span class="kd">func</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nf">Enter</span><span class="p">()</span> <span class="c1">// 接收到新任务，发送到Channel，如果Channel满需要等待
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">g</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">g</span><span class="p">.</span><span class="nf">Leave</span><span class="p">()</span> <span class="c1">// 任务结束，取出一个元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">defer</span> <span class="nx">g</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nf">f</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">CtrlGroup</span><span class="p">)</span> <span class="nf">Wait</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="mapreduce" class="headerLink">
    <a href="#mapreduce" class="header-mark"></a>MapReduce</h3><p>除了WaitGroup、ErrGroup处理一些简单的并发任务，有时候我们需要执行类似MapReduce的操作，通过Map对数据源并行处理，然后通过Reduce合并结果。在Java、Python中提供了类似功能。</p>
<p>比如实现一个实现一组数据的平方和，利用MapReduce在Golang中实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">	<span class="nx">num</span> <span class="o">:=</span> <span class="mi">1000000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mapreduce</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">mapreduce</span><span class="p">.</span><span class="nf">WithWorkers</span><span class="p">(</span><span class="mi">16</span><span class="p">)).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">From</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">r</span> <span class="nx">mapreduce</span><span class="p">.</span><span class="nx">Writer</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span> <span class="c1">// 产生数据源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">num</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">r</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Map</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">item</span> <span class="nx">any</span><span class="p">)</span> <span class="p">(</span><span class="nx">any</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 处理数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">item</span><span class="p">.(</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;invaild type&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">resp</span> <span class="o">:=</span> <span class="nx">v</span> <span class="o">*</span> <span class="nx">v</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">resp</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Reduce</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">r</span> <span class="nx">mapreduce</span><span class="p">.</span><span class="nx">Reader</span><span class="p">)</span> <span class="p">(</span><span class="nx">any</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 合并结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">sum</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">item</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">break</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">item</span><span class="p">.(</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;invaild type&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="nx">sum</span> <span class="o">+=</span> <span class="nx">v</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">sum</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Do</span><span class="p">()</span>
</span></span></code></pre></div><p>主要逻辑是利用Channel（或者线程安全的队列）将源数据发送到Map的执行Worker中，处理完后再转发到Reduce Goroutine中，通过ErrGroup等待所有Worker执行完成。源码见<a href="https://github.com/qingwave/gocorex/tree/main/syncx/mapreduce/mapreduce.go" target="_blank" rel="noopener noreffer">mapreduce.go</a>。</p>
<p>类似的也可以实现Kubernetes中Controller模式，通过队列或者Channel将生产者与消费者解耦，并行处理提高运行速度。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文总结了Golang的一些有趣的编程模式，例如链式调用、可选配置、并发控制等，通过这些技巧或者手段，可以提高编码的质量，所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">gocorex</a>。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>程序员的浪漫: 婚礼邀请函小程序</title>
    <link>https://qingwave.github.io/wedding-invitation/</link>
    <pubDate>Tue, 06 Sep 2022 14:30:30 &#43;0800</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/wedding-invitation/</guid>
    <description><![CDATA[<p>婚礼将近，作为一个<del>有能耐</del>好折腾的程序员怎么能不趁机展示下，着手开发个婚礼邀请函微信小程序。</p>
<h2 id="总体设计" class="headerLink">
    <a href="#%e6%80%bb%e4%bd%93%e8%ae%be%e8%ae%a1" class="header-mark"></a>总体设计</h2><p>选用微信小程序，传播方便，相对公众号定制性也更强。原本打算Github找一个改改，无奈不是太繁杂、就是审美不过关，还是自己开头开始吧。</p>
<p>主要功能：</p>
<ul>
<li>长页展示，不花里胡哨</li>
<li>照片展示，需要各种排版，避免单调</li>
<li>婚礼信息展示，日历、地点等</li>
<li>背景音乐，没有音乐就好比吃面不就蒜，总是少点味道</li>
<li>支持转发、分享</li>
</ul>
<p>其它锦上添花的功能，比如点赞，评论，需要有数据库的支持，看自己需求了。</p>
<p>小程序地址：
</p>
<p>效果如下：</p>
<table>
  <tr>
     <td></td>
     <td></td>
  </tr>
  <tr>
     <td></td>
     <td></td>
  </tr>
</table>
<h2 id="开发过程" class="headerLink">
    <a href="#%e5%bc%80%e5%8f%91%e8%bf%87%e7%a8%8b" class="header-mark"></a>开发过程</h2><p>首先是大体过下<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener noreffer">开发文档</a>，熟悉前端的应该都比较好上手，一些用法和Vue比较相似，就是容易写混，经常把<code>wx:if</code>写成<code>v-if</code>之类的。</p>
<h3 id="背景音乐" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af%e9%9f%b3%e4%b9%90" class="header-mark"></a>背景音乐</h3><p>通过BackgroundAudioManager实现背景音乐，暂停、续播都比较方便。</p>
<p>获取实例后，设置对应的标题、音乐链接即可直接播放</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">bgm</span> <span class="o">=</span> <span class="nx">wx</span><span class="p">.</span><span class="nx">getBackgroundAudioManager</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">bgmName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">coverImgUrl</span> <span class="o">=</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">share</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">bgm</span><span class="p">;</span>
</span></span></code></pre></div><p>暂停与播放可以绑定到对应的音乐图标上了，点击切换，主要逻辑如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">onStop</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span> <span class="nx">playing</span><span class="o">:</span> <span class="kc">false</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">onEnded</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span> <span class="nx">playing</span><span class="o">:</span> <span class="kc">false</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">onPause</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span> <span class="nx">playing</span><span class="o">:</span> <span class="kc">false</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">onPlay</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span> <span class="nx">playing</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>将音乐图标与事件绑定，当播放时展示rotate动画，暂停时停止动画<code>animation-play-state: paused</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">image</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;player-img {{playing ? &#39;&#39;: &#39;player-stop&#39;}}&#34;</span> <span class="na">lazyLoad</span><span class="o">=</span><span class="s">&#34;false&#34;</span>  <span class="na">mode</span><span class="o">=</span><span class="s">&#34;aspectFit&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;{{static}}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">image</span><span class="p">&gt;</span>
</span></span></code></pre></div><h3 id="图片展示" class="headerLink">
    <a href="#%e5%9b%be%e7%89%87%e5%b1%95%e7%a4%ba" class="header-mark"></a>图片展示</h3><p>图片主要是要考虑到各种排版，避免审美疲劳，可以参考一些婚礼应用的排版设计，比如婚礼乎、婚礼纪之类的，这里大量参考了小程序我的婚礼邀请的设计。</p>
<p><strong>圆形图片</strong></p>
<p>展示新郎新娘名称时可以用到，通过设置<code>border-radius: 50%;</code>来实现</p>
<p><strong>排版</strong></p>
<p>横版照片可以直接填充，竖版照片填充过大，可以一行两张或三张，如果直接对齐太严肃，可以通过margin-top来设置落差，下面设置为三等分的图片设置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">triple-img</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">10</span><span class="n">rpx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">height</span><span class="p">:</span> <span class="mi">300</span><span class="n">rpx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">width</span><span class="p">:</span> <span class="mi">30</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">img-1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">-100</span><span class="n">rpx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">img-2</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">img-3</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">100</span><span class="n">rpx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>设置相框</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">border</span><span class="p">:</span> <span class="mi">6</span><span class="n">rpx</span> <span class="kc">solid</span> <span class="mh">#cbd5e1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>照片周围装饰线，可通过伪元素设置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">img</span><span class="p">::</span><span class="nd">before</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border</span><span class="p">:</span> <span class="mi">4</span><span class="n">rpx</span> <span class="kc">solid</span> <span class="mh">#cbd5e1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-bottom</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-right</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后就是组合这些排列，添加对应的文字标题</p>
<p><strong>图片预览</strong>
微信提供了图片预览的API，可以直接使用，将方法绑定到对应图片或图片组上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">viewImg</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">wx</span><span class="p">.</span><span class="nx">previewImage</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">urls</span><span class="o">:</span> <span class="nx">imgs</span><span class="p">,</span> <span class="c1">// 预览的图片列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">current</span><span class="o">:</span> <span class="nx">src</span><span class="p">,</span> <span class="c1">// 初始预览的图片url
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fail</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">complete</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>图片开发可以先使用本地图片，开发完成后可以将图片压缩后（我使用的是图压）上传到对象存储或者云开发的存储中。</p>
<h3 id="地图展示" class="headerLink">
    <a href="#%e5%9c%b0%e5%9b%be%e5%b1%95%e7%a4%ba" class="header-mark"></a>地图展示</h3><p>小程序提供了原生组件map，在<a href="https://lbs.qq.com/getPoint/" target="_blank" rel="noopener noreffer">腾讯地图</a>上选取所在酒店的经纬度，填充到markers中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">map</span> <span class="na">bindtap</span><span class="o">=</span><span class="s">&#34;openMap&#34;</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;width: 100%; height: 400rpx;&#34;</span> <span class="na">data-info</span><span class="o">=</span><span class="s">&#34;{{item}}&#34;</span> <span class="na">enablePoi</span><span class="o">=</span><span class="s">&#34;true&#34;</span> <span class="na">scale</span><span class="o">=</span><span class="s">&#34;16&#34;</span> <span class="na">enableRotate</span><span class="o">=</span><span class="s">&#34;true&#34;</span> <span class="na">latitude</span><span class="o">=</span><span class="s">&#34;{{item.latitude}}&#34;</span> <span class="na">longitude</span><span class="o">=</span><span class="s">&#34;{{item.longitude}}&#34;</span> <span class="na">markers</span><span class="o">=</span><span class="s">&#34;{{item.markers}}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">map</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>其中openMap用来打开地图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kd">let</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">info</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">wx</span><span class="p">.</span><span class="nx">openLocation</span><span class="p">({</span> <span class="c1">// 填充对应的信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">name</span><span class="o">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">address</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="nx">address</span><span class="o">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">address</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">latitude</span><span class="o">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">latitude</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">longitude</span><span class="o">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">longitude</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fail</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;failed to open location&#34;</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="锦上添花" class="headerLink">
    <a href="#%e9%94%a6%e4%b8%8a%e6%b7%bb%e8%8a%b1" class="header-mark"></a>锦上添花</h3><p>通过上面的步骤已经完成了邀请函，如果需要添加一些交互功能，就需要使用到服务器，或者直接使用云开发更简单点。</p>
<p><strong>点赞实现</strong></p>
<p>点赞很简单，数据库中设置一个likes字段，当用户点击时加1，如果点赞过再点击减1，可以通过云开发提供的原子操作实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">      <span class="kd">var</span> <span class="nx">likes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">likes</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">liked</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">num</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1">// 未点赞，加1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">likes</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">num</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="c1">// 已点赞，减1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">likes</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">_</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">command</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">liked</span><span class="o">:</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">liked</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">likes</span><span class="o">:</span> <span class="nx">likes</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;wedding&#39;</span><span class="p">).</span><span class="nx">doc</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">).</span><span class="nx">update</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">likes</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">inc</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="c1">// 原子操作，更新点赞值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fail</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;set failed&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>如果需要记录点赞的用户，首先需要用户登录，相对不太友好，点赞后可以记录用户OpenID到对应表。</p>
<p><strong>发送通知</strong></p>
<p>首先要申请消息模板，在小程序管理界面可申请，记录模板id和内容key值。</p>
<p>这里通过云函数实现发送婚礼邀请的通知，只是当用户点击时，实时出发。如果需要延时触发（比如婚礼一天前提醒），则需要服务器支持，通过延时任务或者定期轮询来实现。</p>
<p>云函数实现通知</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cloud</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;wx-server-sdk&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">cloud</span><span class="p">.</span><span class="nx">init</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 云函数入口函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">wxContext</span> <span class="o">=</span> <span class="nx">cloud</span><span class="p">.</span><span class="nx">getWXContext</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">cloud</span><span class="p">.</span><span class="nx">openapi</span><span class="p">.</span><span class="nx">subscribeMessage</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">touser</span><span class="o">:</span> <span class="nx">wxContext</span><span class="p">.</span><span class="nx">OPENID</span><span class="p">,</span> <span class="c1">// 获取用户id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">page</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">page</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="c1">// 添加对应的数据，值要与模板中的对应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">templateId</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">templateId</span> <span class="c1">// 模板id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">result</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在小程序中调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">cloudEnable</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="kd">let</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">info</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">wx</span><span class="p">.</span><span class="nx">requestSubscribeMessage</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">tmplIds</span><span class="o">:</span> <span class="p">[</span><span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">msgId</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">wx</span><span class="p">.</span><span class="nx">cloud</span><span class="p">.</span><span class="nx">callFunction</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;sendMsg&#34;</span><span class="p">,</span> <span class="c1">// 云函数名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nx">page</span><span class="o">:</span> <span class="nx">indexPage</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nx">templateId</span><span class="o">:</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">msgId</span><span class="p">,</span> <span class="c1">// 模板id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// 对应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="s2">&#34;time2&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">info</span><span class="p">.</span><span class="nx">year</span><span class="si">}</span><span class="sb">年</span><span class="si">${</span><span class="nx">info</span><span class="p">.</span><span class="nx">month</span><span class="si">}</span><span class="sb">月</span><span class="si">${</span><span class="nx">info</span><span class="p">.</span><span class="nx">day</span><span class="si">}</span><span class="sb">日 12:00`</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;thing5&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">msgTitle</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;thing6&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">info</span><span class="p">.</span><span class="nx">city</span><span class="si">}${</span><span class="nx">info</span><span class="p">.</span><span class="nx">address</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;thing7&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">room</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="一些坑" class="headerLink">
    <a href="#%e4%b8%80%e4%ba%9b%e5%9d%91" class="header-mark"></a>一些坑</h2><ul>
<li>小程序的双向绑定，必须通过this.setData来设置，否则页面不会更新</li>
<li>部分功能在IOS与安卓上表现不一致，需要真机测试下</li>
<li>云开发的权限问题，会造成小程序的操作失败</li>
<li>分享到朋友圈中的小程序，直接打开会进入到单页模式，一些功能会受限比如更新云数据库，需要配置云开发权限设置</li>
</ul>
<h2 id="后记" class="headerLink">
    <a href="#%e5%90%8e%e8%ae%b0" class="header-mark"></a>后记</h2><p>前前后后小一周时间，算是搞定了，效果也符合预期。不过终究怎么展现只是个形式，内容更重要。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang分布式应用之ZooKeeper</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-zk/</link>
    <pubDate>Mon, 08 Aug 2022 08:48:26 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-zk/</guid>
    <description><![CDATA[<p>ZooKeeper是Apache下一个开源项目，提供分布式配置、同步服务以及命名注册等，是一个高可靠的分布式协调系统。</p>
<p>其应用场景与etcd类似，可以使用在</p>
<ul>
<li>服务发现</li>
<li>分布式锁</li>
<li>选主</li>
<li>分布式队列</li>
<li>分布式系统协调</li>
<li>负载均衡</li>
</ul>
<p>如在Hadooop、Kafka中将ZooKeeper作为核心组件。本文结合Golang来编写对应的中间件，所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></p>
<h2 id="服务注册" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c" class="header-mark"></a>服务注册</h2><p>服务注册主要细节在<a href="/golang-distributed-system-x-etcd" rel="">etcd</a>中已提及，主要来解决分布式环境中服务注册注销与状态感知，包括：</p>
<ul>
<li>服务注册、注销</li>
<li>服务宕机或异常时，自动注销</li>
<li>感知服务端点变化</li>
</ul>
<p>借助zk实现服务发现:</p>
<ul>
<li>可以通过将端点写同一个目录(相同前缀，如/services/job/endpoint1, /services/job/endpoint2)，写入临时节点，如果服务宕机，Session过期对应端点会自动删除</li>
<li>通过Watch API可以监听端点变化</li>
</ul>
<p>核心代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 注册，1表示临时节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">ZkDiscovery</span><span class="p">)</span> <span class="nf">Register</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">conn</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Val</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">ACL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">ErrNodeExists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 注销，直接删除对应Key即可
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">ZkDiscovery</span><span class="p">)</span> <span class="nf">UnRegister</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">conn</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">ErrNoNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>服务监听通过zk Watch接口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">ZkDiscovery</span><span class="p">)</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">watchCancel</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取最新列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">refreshServices</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStartedDiscovering</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStartedDiscovering</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nf">ListServices</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">d</span><span class="p">.</span><span class="nf">watchCancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStoppedDiscovering</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStoppedDiscovering</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">loop</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加节点变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">children</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ch</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">conn</span><span class="p">.</span><span class="nf">ChildrenW</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">d</span><span class="p">.</span><span class="nf">setServices</span><span class="p">(</span><span class="nx">containerx</span><span class="p">.</span><span class="nf">NewSet</span><span class="p">(</span><span class="nx">children</span><span class="o">...</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// zk 是一个一次性触发器，收到事件后需要重新watch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">goto</span> <span class="nx">loop</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 当子节点变化时，获取最新服务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">switch</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">EventNodeCreated</span><span class="p">,</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">EventNodeChildrenChanged</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">d</span><span class="p">.</span><span class="nf">refreshServices</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">switch</span> <span class="nx">e</span><span class="p">.</span><span class="nx">State</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">StateExpired</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;node [%s] expired&#34;</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">StateDisconnected</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnServiceChanged</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnServiceChanged</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nf">ListServices</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过worker模拟不同的端点，测试代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">run</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;10.0.0.%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">val</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;10.0.0.%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">sd</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">zkdiscovery</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">zkdiscovery</span><span class="p">.</span><span class="nx">ZkDiscoveryConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Endpoints</span><span class="p">:</span>      <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;127.0.0.1&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Path</span><span class="p">:</span>           <span class="s">&#34;/zk/services&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">SessionTimeout</span><span class="p">:</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Key</span><span class="p">:</span>            <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Val</span><span class="p">:</span>            <span class="nx">val</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">zkdiscovery</span><span class="p">.</span><span class="nx">DiscoveryCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStartedDiscovering</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">services</span> <span class="p">[]</span><span class="nx">zkdiscovery</span><span class="p">.</span><span class="nx">Service</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s] onstarted, services: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">services</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStoppedDiscovering</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s] onstoped&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnServiceChanged</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">services</span> <span class="p">[]</span><span class="nx">zkdiscovery</span><span class="p">.</span><span class="nx">Service</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s] onchanged, services: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">services</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create service discovery: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">run</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">UnRegister</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to unregister service [%s]: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to register service [%s]: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s] failed to watch service: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">NewGroup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Go</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">worker</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// unregister
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">worker</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// wg.Wait()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过结果可以看到服务能够正常注册注销，而且可以监听到节点变化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/08/09 03:01:29 connected to 127.0.0.1:2181
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 connected to 127.0.0.1:2181
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 connected to 127.0.0.1:2181
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 authenticated: <span class="nv">id</span><span class="o">=</span>72787622169739423, <span class="nv">timeout</span><span class="o">=</span><span class="m">4000</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 re-submitting <span class="sb">`</span>0<span class="sb">`</span> credentials after reconnect
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 authenticated: <span class="nv">id</span><span class="o">=</span>72787622169739424, <span class="nv">timeout</span><span class="o">=</span><span class="m">4000</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 authenticated: <span class="nv">id</span><span class="o">=</span>72787622169739425, <span class="nv">timeout</span><span class="o">=</span><span class="m">4000</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 re-submitting <span class="sb">`</span>0<span class="sb">`</span> credentials after reconnect
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 re-submitting <span class="sb">`</span>0<span class="sb">`</span> credentials after reconnect
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 <span class="o">[</span>10.0.0.2<span class="o">]</span> onstarted, services: <span class="o">[{</span>10.0.0.1 <span class="o">}</span> <span class="o">{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 <span class="o">[</span>10.0.0.0<span class="o">]</span> onstarted, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.1 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 <span class="o">[</span>10.0.0.1<span class="o">]</span> onstarted, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.1 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 connected to 127.0.0.1:2181
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 authenticated: <span class="nv">id</span><span class="o">=</span>72787622169739426, <span class="nv">timeout</span><span class="o">=</span><span class="m">4000</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 re-submitting <span class="sb">`</span>0<span class="sb">`</span> credentials after reconnect
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 <span class="o">[</span>10.0.0.0<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.1 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 <span class="o">[</span>10.0.0.1<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.3 <span class="o">}</span> <span class="o">{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.1 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 <span class="o">[</span>10.0.0.2<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.1 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 <span class="o">[</span>10.0.0.3<span class="o">]</span> onstarted, services: <span class="o">[{</span>10.0.0.1 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}</span> <span class="o">{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 connected to 127.0.0.1:2181
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 authenticated: <span class="nv">id</span><span class="o">=</span>72787622169739427, <span class="nv">timeout</span><span class="o">=</span><span class="m">4000</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 re-submitting <span class="sb">`</span>0<span class="sb">`</span> credentials after reconnect
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 <span class="o">[</span>10.0.0.3<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 <span class="o">[</span>10.0.0.2<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 <span class="o">[</span>10.0.0.0<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.3 <span class="o">}</span> <span class="o">{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 <span class="o">[</span>10.0.0.1<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 recv loop terminated: EOF
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 send loop terminated: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/08/09 03:01:34 <span class="o">[</span>10.0.0.3<span class="o">]</span> onstoped
</span></span><span class="line"><span class="cl">2022/08/09 03:01:34 <span class="o">[</span>10.0.0.0<span class="o">]</span> onstoped
</span></span><span class="line"><span class="cl">2022/08/09 03:01:34 <span class="o">[</span>10.0.0.2<span class="o">]</span> onstoped
</span></span><span class="line"><span class="cl">2022/08/09 03:01:34 <span class="o">[</span>10.0.0.1<span class="o">]</span> onstoped
</span></span></code></pre></div><h2 id="分布式锁" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81" class="header-mark"></a>分布式锁</h2><p>在包<a href="https://github.com/go-zookeeper/zk" target="_blank" rel="noopener noreffer">github.com/go-zookeeper/zk</a>中已经实现了分布式锁，主要借助了ZooKeeper的临时节点的功能</p>
<ul>
<li>加锁时，创建临时节点（client与zk server会保持长链接，链接中断则创建的临时数据会被删除）</li>
<li>解锁时，直接删除节点即可</li>
</ul>
<p>主要来看加锁过程</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">Lock</span><span class="p">)</span> <span class="nf">LockWithData</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">l</span><span class="p">.</span><span class="nx">lockPath</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ErrDeadlock</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">prefix</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s/lock-&#34;</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">path</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 重试3次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 创建临时顺序节点，同名节点会加序列号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">path</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">CreateProtectedEphemeralSequential</span><span class="p">(</span><span class="nx">prefix</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nx">acl</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">ErrNoNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Create parent node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">parts</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pth</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="kd">var</span> <span class="nx">exists</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">				<span class="nx">pth</span> <span class="o">+=</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">p</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 父路径不存在，创建父节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">exists</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">Exists</span><span class="p">(</span><span class="nx">pth</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">exists</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">pth</span><span class="p">,</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">{},</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nx">acl</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">ErrNodeExists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 解析序列号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">seq</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">parseSeq</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取lock下所有子节点，根据序列号判断是否获得锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">children</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">Children</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span>        
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">lowestSeq</span> <span class="o">:=</span> <span class="nx">seq</span>
</span></span><span class="line"><span class="cl">		<span class="nx">prevSeq</span> <span class="o">:=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="nx">prevSeqPath</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">children</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">s</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">parseSeq</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">s</span> <span class="p">&lt;</span> <span class="nx">lowestSeq</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">lowestSeq</span> <span class="p">=</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取此节点前一个序列号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">s</span> <span class="p">&lt;</span> <span class="nx">seq</span> <span class="o">&amp;&amp;</span> <span class="nx">s</span> <span class="p">&gt;</span> <span class="nx">prevSeq</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">prevSeq</span> <span class="p">=</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl">				<span class="nx">prevSeqPath</span> <span class="p">=</span> <span class="nx">p</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果当前节点序列号最低，则获取到锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">seq</span> <span class="o">==</span> <span class="nx">lowestSeq</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Acquired the lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 否则等待节点删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ch</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">GetW</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">path</span> <span class="o">+</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">prevSeqPath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">ErrNoNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">ErrNoNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// try again
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">ev</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">l</span><span class="p">.</span><span class="nx">seq</span> <span class="p">=</span> <span class="nx">seq</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l</span><span class="p">.</span><span class="nx">lockPath</span> <span class="p">=</span> <span class="nx">path</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要逻辑如下：</p>
<ol>
<li>创建临时顺序节点</li>
<li>如果父节点不存在，则创建父节点</li>
<li>获取lock下所有子节点序列号</li>
<li>如果当前节点序列号最小，则获得锁</li>
<li>否则，等待前一个删除，直到获取锁</li>
</ol>
<p>对比etcd的实现，大体思路基本一致，主要差异点在于</p>
<ul>
<li>TTL实现：etcd通过Lease的实现TTL，获取锁后不断刷新Lease; zk通过Session来实现TTL，Session中止会自动清楚临时节点</li>
<li>顺序获取锁：etcd通过Revision来实现；zk则通过临时顺序节点</li>
</ul>
<h2 id="对比etcd" class="headerLink">
    <a href="#%e5%af%b9%e6%af%94etcd" class="header-mark"></a>对比etcd</h2><p>ZooKeeper与etcd的使用场景高度重合，可以项目替代，主要区别有以下几点</p>
<table>
<thead>
<tr>
<th>对比项</th>
<th>ZooKeeper</th>
<th>etcd</th>
</tr>
</thead>
<tbody>
<tr>
<td>一致性协议</td>
<td>zab</td>
<td>raft</td>
</tr>
<tr>
<td>健康检查</td>
<td>基于Session</td>
<td>心跳，Lease刷新</td>
</tr>
<tr>
<td>Watch</td>
<td>一次性触发器、只能添加子节点创建、删除，事件不包含数据</td>
<td>可以添加前缀、Range、子节点变化</td>
</tr>
<tr>
<td>多版本控制</td>
<td>不支持</td>
<td>支持，所有Key含有Revision</td>
</tr>
</tbody>
</table>
<p>etcd作为后期之秀，在功能上更丰富，新项目可以优先尝试使用etcd作为其分布式协调引擎。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文分析了ZooKeeper在分布式锁、服务发现等场景上的实现方式，并对比了与etcd的差异点。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a>，欢迎批评指正。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang分布式应用之etcd</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-etcd/</link>
    <pubDate>Sun, 07 Aug 2022 17:48:18 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-etcd/</guid>
    <description><![CDATA[<p>etcd是一个可靠的分布式KV存储数据库，由CoreOS开源。Kuberentes使用etcd作为其存储引擎，随着云原生的火热，etcd也逐渐广泛应用起来。</p>
<p>etcd除了作为普通的KV存储、配置存储，还可以用在以下分布式场景中：</p>
<ul>
<li>服务发现</li>
<li>分布式锁</li>
<li>选主</li>
<li>分布式队列</li>
<li>分布式系统协调</li>
<li>负载均衡</li>
</ul>
<p>本文结合Golang来编写对应的中间件，所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></p>
<h2 id="服务发现" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0" class="header-mark"></a>服务发现</h2><p>在分布式系统中，如何能找到所需要访问的服务即服务发现。服务较少时可以直接访问其IP，但随着业务规模的扩大，维护其地址越来越复杂，如果服务频繁的扩缩容，必须能够实时感应服务的断点变化。
通常有多种方式可以解决</p>
<ol>
<li>系统级别，如LVS、DNS、Kubernetes中的Service、Istio等</li>
<li>微服务注册中心，如Spring Cloud中的Enruka，Dubbo等</li>
<li>借助分布式协调系统etcd、ZK、Consul等</li>
</ol>
<p>服务发现提供的功能包括：</p>
<ul>
<li>服务注册、注销</li>
<li>服务宕机或异常时，自动注销</li>
<li>感知服务端点变化</li>
</ul>
<p>借助etcd实现服务发现</p>
<ul>
<li>可以通过将端点写同一个目录(相同前缀，如/services/job/endpoint1, /services/job/endpoint2)，并通过Lease设置一个过期时间，不断刷新Lease，如果服务宕机，Lease过期对应端点会自动删除</li>
<li>通过Watch API可以监听端点变化</li>
</ul>
<p>主要代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="nx">EtcdDiscoveryConfig</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建session，session会自动续约
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">WithTTL</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">TTLSeconds</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSuffix</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#34;/&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">EtcdDiscovery</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EtcdDiscoveryConfig</span><span class="p">:</span> <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">session</span><span class="p">:</span>             <span class="nx">session</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">myKey</span><span class="p">:</span>               <span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">services</span><span class="p">:</span>            <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">)</span> <span class="nf">Register</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lease</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nf">Lease</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注册服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">lease</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">)</span> <span class="nf">UnRegister</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注销服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 监听端点变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">)</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// context用来停止监听
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">watchCancel</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 首先获取所有端点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">services</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">kv</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Kvs</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">services</span><span class="p">[</span><span class="nb">string</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">)]</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d</span><span class="p">.</span><span class="nf">setServices</span><span class="p">(</span><span class="nx">services</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 回调点，用户可自定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStartedDiscovering</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStartedDiscovering</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nf">ListServices</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStoppedDiscovering</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStoppedDiscovering</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">d</span><span class="p">.</span><span class="nf">watchCancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 监听目录，通过WithPrefix可以添加子目录变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">wr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;watch closed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 将添加事件同步到本地端点列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wr</span><span class="p">.</span><span class="nx">Events</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">key</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">),</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">PUT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">d</span><span class="p">.</span><span class="nf">addService</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">DELETE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">d</span><span class="p">.</span><span class="nf">delService</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnServiceChanged</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">event</span> <span class="o">:=</span> <span class="nx">DiscoveryEvent</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">Event_EventType_name</span><span class="p">[</span><span class="nb">int32</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span><span class="p">)],</span> <span class="nx">Service</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nf">serviceFromKv</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">					<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnServiceChanged</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nf">ListServices</span><span class="p">(),</span> <span class="nx">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要实现逻辑如下：</p>
<ol>
<li>创建Session， Session中Lease会自动续约</li>
<li>服务注册时，在目录下创建对应的子目录，并附带Lease</li>
<li>通过Watch接口监听目录变化，同步到本地</li>
</ol>
<p>简单测试下，通过worker模拟不同的端点</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">clientv3</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Endpoints</span><span class="p">:</span>   <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;localhost:2379&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DialTimeout</span><span class="p">:</span> <span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create etcd lock: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">run</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;worker-%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">val</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;10.0.0.%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">sd</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">etcdiscovery</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">EtcdDiscoveryConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Client</span><span class="p">:</span>     <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Prefix</span><span class="p">:</span>     <span class="s">&#34;/services&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Key</span><span class="p">:</span>        <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Val</span><span class="p">:</span>        <span class="nx">val</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">TTLSeconds</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">DiscoveryCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStartedDiscovering</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">services</span> <span class="p">[]</span><span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">Service</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s], onstarted, services: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">services</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStoppedDiscovering</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s], onstoped&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnServiceChanged</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">services</span> <span class="p">[]</span><span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">Service</span><span class="p">,</span> <span class="nx">event</span> <span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">DiscoveryEvent</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s], onchanged, services: %v, event: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">services</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create service etcdiscovery: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">run</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">UnRegister</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to unregister service [%s]: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to register service [%s]: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to watch service: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">NewGroup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Go</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">worker</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// unregister
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">worker</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过结果可以看到，服务可以正常的注册注销，并能实时监听端点变化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/08/08 08:44:02 <span class="o">[</span>worker-1<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:02 <span class="o">[</span>worker-2<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:02 <span class="o">[</span>worker-0<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-2<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>PUT <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-1<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>PUT <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-0<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}</span> <span class="o">{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}]</span>, event: <span class="o">{</span>PUT <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-3<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-1<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-3<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}</span> <span class="o">{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-0<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-2<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span></code></pre></div><h2 id="分布式锁" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81" class="header-mark"></a>分布式锁</h2><p>在ECTD官方库<a href="https://pkg.go.dev/go.etcd.io/etcd/client/v3/concurrency" target="_blank" rel="noopener noreffer">go.etcd.io/etcd/client/v3/concurrency</a>中，已经支持分布式锁。</p>
<p>主要原理与之前通过<a href="/golang-distributed-system-x-redis" rel="">Redis</a>实现的分布式锁类似，如果目录创建成功则加锁成功，解锁直接删除即可。</p>
<p>etcd锁的使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 创建session并不断刷新
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">WithTTL</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">mutex</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewMutex</span><span class="p">(</span><span class="nx">session</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">defer</span> <span class="nx">mutext</span><span class="p">.</span><span class="nf">UnLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">do</span><span class="p">()</span><span class="o">...</span><span class="p">.</span>
</span></span></code></pre></div><p>加锁的核心逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Mutex</span><span class="p">)</span> <span class="nf">tryAcquire</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">v3</span><span class="p">.</span><span class="nx">TxnResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">s</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">s</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s%x&#34;</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">pfx</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cmp</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">Compare</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">CreateRevision</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">),</span> <span class="s">&#34;=&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// put self in lock waiters via myKey; oldest waiter holds lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">put</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">OpPut</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// reuse key in case this session already holds the lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">get</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">OpGet</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// fetch current holder to complete uncontended path with only one RPC
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">getOwner</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">OpGet</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">pfx</span><span class="p">,</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">WithFirstCreate</span><span class="p">()</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Txn</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nf">If</span><span class="p">(</span><span class="nx">cmp</span><span class="p">).</span><span class="nf">Then</span><span class="p">(</span><span class="nx">put</span><span class="p">,</span> <span class="nx">getOwner</span><span class="p">).</span><span class="nf">Else</span><span class="p">(</span><span class="nx">get</span><span class="p">,</span> <span class="nx">getOwner</span><span class="p">).</span><span class="nf">Commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Revision</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Succeeded</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Responses</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">GetResponseRange</span><span class="p">().</span><span class="nx">Kvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">CreateRevision</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">resp</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>tryAcquire通过事务来执行加锁逻辑:</p>
<ol>
<li>判断当前Key是否为空，即代码中Revision为0</li>
<li>如果为空，使用Put设置并附加Lease</li>
<li>如果不为空，获取当前锁的所有者，即最先加锁的对象，避免惊群效应</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Mutex</span><span class="p">)</span> <span class="nf">Lock</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">tryAcquire</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// if no key on prefix / the minimum rev is key, already hold the lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ownerKey</span> <span class="o">:=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Responses</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">GetResponseRange</span><span class="p">().</span><span class="nx">Kvs</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ownerKey</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">ownerKey</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">CreateRevision</span> <span class="o">==</span> <span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">.</span><span class="nx">hdr</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">s</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nf">waitDeletes</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">pfx</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// release lock key if wait failed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">werr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nf">Ctx</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">werr</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// make sure the session is not expired, and the owner key still exists.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gresp</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Lock方法会一直阻塞，直到获取锁返回执行出错:</p>
<ol>
<li>调用tryAcquire</li>
<li>如果已经加锁成功，或者已经加过锁（可重入），则直接返回</li>
<li>调用waitDeletes方法，等待所有小于当前Revsion的Key删除</li>
</ol>
<h2 id="分布式选主" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%80%89%e4%b8%bb" class="header-mark"></a>分布式选主</h2><p>对于有状态的服务，为了提供其服务水平SLA减少宕机时间，通过会有多个副本，当主节点宕机时，副本节点可以快速切换。</p>
<p>通过etcd可以实现选主服务，与分布式比较类似</p>
<ul>
<li>选主成功，不断上报心跳</li>
<li>通过Watch接口，当节点失效时，去竞争主(类似加锁过程)</li>
</ul>
<p>在ECTD官方库<a href="https://pkg.go.dev/go.etcd.io/etcd/client/v3/concurrency" target="_blank" rel="noopener noreffer">go.etcd.io/etcd/client/v3/concurrency</a>中，已经支持了分布式选主。</p>
<p>选主核心逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">Election</span><span class="p">)</span> <span class="nf">Campaign</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">val</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">session</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">k</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s%x&#34;</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">keyPrefix</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">txn</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Txn</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nf">If</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">Compare</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">CreateRevision</span><span class="p">(</span><span class="nx">k</span><span class="p">),</span> <span class="s">&#34;=&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">txn</span> <span class="p">=</span> <span class="nx">txn</span><span class="p">.</span><span class="nf">Then</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">OpPut</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">())))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">txn</span> <span class="p">=</span> <span class="nx">txn</span><span class="p">.</span><span class="nf">Else</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">OpGet</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">txn</span><span class="p">.</span><span class="nf">Commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">leaderKey</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leaderRev</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leaderSession</span> <span class="p">=</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Revision</span><span class="p">,</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Succeeded</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span> <span class="o">:=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Responses</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">GetResponseRange</span><span class="p">().</span><span class="nx">Kvs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="nx">e</span><span class="p">.</span><span class="nx">leaderRev</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">CreateRevision</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">string</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">val</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Proclaim</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">val</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">e</span><span class="p">.</span><span class="nf">Resign</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">waitDeletes</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">keyPrefix</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leaderRev</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// clean up in case of context cancel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="nx">e</span><span class="p">.</span><span class="nf">Resign</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nf">Ctx</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">e</span><span class="p">.</span><span class="nx">leaderSession</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">hdr</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以上逻辑与ECTD锁中的实现非常相似</p>
<ol>
<li>开启事务，首先判断当前服务Key是否存在</li>
<li>不存在，通过Put设置对应值</li>
<li>存在获得当前目录最小Revision的值，即当前主节点</li>
<li>通过waitDeletes，直到当前进程的Revision</li>
</ol>
<p>简单封装下，支持回调，参考了Kubernetes的选主实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="nx">LeaderElectionConfig</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">WithTTL</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">LeaseSeconds</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">election</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewElection</span><span class="p">(</span><span class="nx">session</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">EctdLeaderElection</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionConfig</span><span class="p">:</span> <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">session</span><span class="p">:</span>              <span class="nx">session</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">election</span><span class="p">:</span>             <span class="nx">election</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 运行选主
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStoppedLeading</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加选主变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">le</span><span class="p">.</span><span class="nf">observe</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 开始选主
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">election</span><span class="p">.</span><span class="nf">Campaign</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Identity</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 选主完成，运行OnStarted，运行结束则退出选主
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStartedLeading</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 监听Key变化，执行回调
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">)</span> <span class="nf">observe</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnNewLeader</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">election</span><span class="p">.</span><span class="nf">Observe</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Kvs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">leader</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Kvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">leader</span> <span class="o">!=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Identity</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">go</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnNewLeader</span><span class="p">(</span><span class="nx">leader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">)</span> <span class="nf">Close</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">le</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>测试选主服务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">clientv3</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Endpoints</span><span class="p">:</span>   <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;localhost:2379&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DialTimeout</span><span class="p">:</span> <span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create etcd lock: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">prefix</span> <span class="o">:=</span> <span class="s">&#34;/worker/election&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;worker-%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderElectionConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Client</span><span class="p">:</span>       <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">LeaseSeconds</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Prefix</span><span class="p">:</span>       <span class="nx">prefix</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Identity</span><span class="p">:</span>     <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStartedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnStarted[%s]: acquire new leader&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnStarted[%s]: worker done&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStoppedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnStopped[%s]: exit&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnNewLeader</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">identity</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnNewLeader[%s]: new leader %s&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">identity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create leader election: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">le</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/08/08 09:33:32 OnNewLeader<span class="o">[</span>worker-2<span class="o">]</span>: new leader worker-3
</span></span><span class="line"><span class="cl">2022/08/08 09:33:32 OnNewLeader<span class="o">[</span>worker-1<span class="o">]</span>: new leader worker-3
</span></span><span class="line"><span class="cl">2022/08/08 09:33:32 OnStarted<span class="o">[</span>worker-3<span class="o">]</span>: acquire new leader
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnStarted<span class="o">[</span>worker-3<span class="o">]</span>: worker <span class="k">done</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnStopped<span class="o">[</span>worker-3<span class="o">]</span>: <span class="nb">exit</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnStarted<span class="o">[</span>worker-2<span class="o">]</span>: acquire new leader
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnNewLeader<span class="o">[</span>worker-1<span class="o">]</span>: new leader worker-2
</span></span><span class="line"><span class="cl">2022/08/08 09:34:32 OnStarted<span class="o">[</span>worker-2<span class="o">]</span>: worker <span class="k">done</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:32 OnStopped<span class="o">[</span>worker-2<span class="o">]</span>: <span class="nb">exit</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:32 OnStarted<span class="o">[</span>worker-1<span class="o">]</span>: acquire new leader
</span></span><span class="line"><span class="cl">2022/08/08 09:35:02 OnStarted<span class="o">[</span>worker-1<span class="o">]</span>: worker <span class="k">done</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:35:02 OnStopped<span class="o">[</span>worker-1<span class="o">]</span>: <span class="nb">exit</span>
</span></span></code></pre></div><h2 id="发布订阅" class="headerLink">
    <a href="#%e5%8f%91%e5%b8%83%e8%ae%a2%e9%98%85" class="header-mark"></a>发布订阅</h2><p>借助etcd的前缀查找、Watch的功能，可以实现发布订阅功能，主要逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 发布时，直接通过Put将对象设置在对应Topic路径下，并可以设置Lease，自动删除过时消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ps</span> <span class="o">*</span><span class="nx">EtcdPubSub</span><span class="p">)</span> <span class="nf">Publish</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">topic</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">msg</span> <span class="nx">Msg</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">le</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nx">Lease</span><span class="p">.</span><span class="nf">Grant</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">ps</span><span class="p">.</span><span class="nx">TTLSeconds</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Prefix</span><span class="o">+</span><span class="nx">topic</span><span class="o">+</span><span class="s">&#34;/&#34;</span><span class="o">+</span><span class="nx">msg</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">ID</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 订阅时，通过Watch来监听Topic是否有Put事件，这里忽略Delete事件
</span></span></span><span class="line"><span class="cl"><span class="c1">// Revision为0时，从当前时间点开始监听
</span></span></span><span class="line"><span class="cl"><span class="c1">// Revision为1时，监听Topic创建后的所有事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ps</span> <span class="o">*</span><span class="nx">EtcdPubSub</span><span class="p">)</span> <span class="nf">SubscribeFromRev</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">topic</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">rev</span> <span class="kt">int64</span><span class="p">)</span> <span class="p">(</span><span class="o">&lt;-</span><span class="kd">chan</span> <span class="nx">Msg</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wch</span> <span class="o">:=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Prefix</span><span class="o">+</span><span class="nx">topic</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">(),</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithFilterDelete</span><span class="p">(),</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithRev</span><span class="p">(</span><span class="nx">rev</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">msg</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">wc</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">wch</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wc</span><span class="p">.</span><span class="nx">Events</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span> <span class="o">!=</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">PUT</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">break</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">name</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimPrefix</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">),</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Prefix</span><span class="o">+</span><span class="nx">topic</span><span class="o">+</span><span class="s">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">msg</span> <span class="o">&lt;-</span> <span class="nx">Msg</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">Val</span><span class="p">:</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">msg</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>发布时，直接通过PUT操作在Topic路径下设置消息；
订阅时，通过Watch来捕获消息，通过Revision来配置不同的监听行为</p>
<ul>
<li>Revision为0时，从当前时间点开始监听</li>
<li>Revision为1时，监听Topic创建后的所有事件</li>
</ul>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文主要结合Golang总结了etcd中服务发现、分布式锁、选主等实现方式，另外etcd还可以应用在发布订阅、负载均衡等方面。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a>，欢迎批评指正。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang分布式应用之定时任务</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-cron/</link>
    <pubDate>Thu, 28 Jul 2022 16:07:56 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-cron/</guid>
    <description><![CDATA[<p>在系统开发中，有一类任务不是立即执行，而是在未来某个时间点或者按照一定间隔去执行，比如日志定期压缩、报表制作、过期数据清理等，这就是定时任务。</p>
<p>在单机中，定时任务通常需要实现一个类似crontab的系统，一般有两种方式：</p>
<ol>
<li>最小堆，按照任务执行时间建堆，每次取最近的任务执行</li>
<li>时间轮，将任务放到时间轮列表中，每次转动取对应的任务列表执行</li>
</ol>
<h2 id="最小堆" class="headerLink">
    <a href="#%e6%9c%80%e5%b0%8f%e5%a0%86" class="header-mark"></a>最小堆</h2><p>最小堆是一种特殊的完全二叉树，任意非叶子节点的值不大于其子节点，如图</p>
<p>

</p>
<p>通过最小堆，根据任务最近执行时间键堆，每次取堆顶元素即最近需要执行的任务，设置timer定时器，到期后触发任务执行。由于堆的特性每次调整的时间复杂度为O(lgN)，相较于普通队列性能更快。</p>
<p>在<code>container/heap</code>中已经实现操作堆的相关函数，我们只需要实现定期任务核心逻辑即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 运行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cron</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置cron已启动，atomic.Bool来保证并发安全
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nx">started</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 主循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果停止则退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">started</span><span class="p">.</span><span class="nf">Load</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">runTask</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 核心逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cron</span><span class="p">)</span> <span class="nf">runTask</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">now</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">duration</span> <span class="o">:=</span> <span class="nx">infTime</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取堆顶元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">task</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nf">Peek</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 如果已删除则弹出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 计算于当前时间查找，设置定时器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">duration</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">Sub</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">duration</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">timer</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTimer</span><span class="p">(</span><span class="nx">duration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">timer</span><span class="p">.</span><span class="nf">Stop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 当有新元素插入直接返回，防止新元素执行时间小于当前堆顶元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">c</span><span class="p">.</span><span class="nx">new</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">timer</span><span class="p">.</span><span class="nx">C</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 弹出任务，执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Exec</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 计算下次执行时间，如果为0说明任务已结束，否则重新入堆
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">task</span><span class="p">.</span><span class="nx">next</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Next</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">IsZero</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nf">Push</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要逻辑可总结为:</p>
<ol>
<li>将任务按照下次执行时间建最小堆</li>
<li>每次取堆顶任务，设置定时器</li>
<li>如果中间有新加入任务，转入步骤2</li>
<li>定时器到期后执行任务</li>
<li>再次取下个任务，转入步骤2，依次执行</li>
</ol>
<h2 id="时间轮" class="headerLink">
    <a href="#%e6%97%b6%e9%97%b4%e8%bd%ae" class="header-mark"></a>时间轮</h2><p>另一种实现Cron的方式是时间轮，时间轮通过一个环形队列，每个插槽放入需要到期执行的任务，按照固定间隔转动时间轮，取插槽中任务列表执行，如图所示:</p>
<p>

</p>
<p>时间轮可看作一个表盘，如图中时间间隔为1秒，总共60个格子，如果任务在3秒后执行则放为插槽3，每秒转动次取插槽上所有任务执行。</p>
<p>如果执行时间超过最大插槽，比如有个任务需要63秒后执行（超过了最大格子刻度），一般可以通过多层时间轮，或者设置一个额外变量圈数，只执行圈数为0的任务。</p>
<p>时间轮插入的时间复杂度为O(1)，获取任务列表复杂度为O(1)，执行列表最差为O(n)。对比最小堆，时间轮插入删除元素更快。</p>
<p>核心代码如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">TimeWheel</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">interval</span>    <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 触发间隔
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">slots</span>       <span class="kt">int</span> <span class="c1">// 总插槽数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">currentSlot</span> <span class="kt">int</span> <span class="c1">// 当前插槽数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tasks</span>       <span class="p">[]</span><span class="o">*</span><span class="nx">list</span><span class="p">.</span><span class="nx">List</span> <span class="c1">// 环形列表，每个元素为对应插槽的任务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">set</span>         <span class="nx">containerx</span><span class="p">.</span><span class="nx">Set</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span> <span class="c1">// 记录所有任务key值，用来检查任务是否被删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">tricker</span> <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Ticker</span> <span class="c1">// 定时触发器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span> <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">tw</span> <span class="o">*</span><span class="nx">TimeWheel</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tw</span><span class="p">.</span><span class="nx">tricker</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTicker</span><span class="p">(</span><span class="nx">tw</span><span class="p">.</span><span class="nx">interval</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 通过定时器模拟时间轮转动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">now</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">tw</span><span class="p">.</span><span class="nx">tricker</span><span class="p">.</span><span class="nx">C</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 转动一次，执行任务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tw</span><span class="p">.</span><span class="nf">RunTask</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="p">=</span> <span class="p">(</span><span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">slots</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">tw</span> <span class="o">*</span><span class="nx">TimeWheel</span><span class="p">)</span> <span class="nf">RunTask</span><span class="p">(</span><span class="nx">now</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">slot</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 一次执行任务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">item</span> <span class="o">:=</span> <span class="nx">taskList</span><span class="p">.</span><span class="nf">Front</span><span class="p">();</span> <span class="nx">item</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">Value</span><span class="p">.(</span><span class="o">*</span><span class="nx">TimeWheelTask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 任务圈数大于0，不需要执行，将圈数减一
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">task</span><span class="p">.</span><span class="nx">circle</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">task</span><span class="p">.</span><span class="nx">circle</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">			<span class="nx">item</span> <span class="p">=</span> <span class="nx">item</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 运行任务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">go</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Exec</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 计算任务下次运行时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">next</span> <span class="o">:=</span> <span class="nx">item</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">taskList</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">item</span> <span class="p">=</span> <span class="nx">next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">next</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Next</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">IsZero</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tw</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="nx">task</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tw</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 添加任务，计算下一次任务执行的插槽与圈数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">tw</span> <span class="o">*</span><span class="nx">TimeWheel</span><span class="p">)</span> <span class="nf">add</span><span class="p">(</span><span class="nx">now</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">task</span> <span class="o">*</span><span class="nx">TimeWheelTask</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">task</span><span class="p">.</span><span class="nx">initialized</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">next</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Next</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">initialized</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">duration</span> <span class="o">:=</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">Sub</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">duration</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">slot</span> <span class="p">=</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">circle</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mult</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">duration</span> <span class="o">/</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">interval</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">slot</span> <span class="p">=</span> <span class="p">(</span><span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="o">+</span> <span class="nx">mult</span><span class="p">)</span> <span class="o">%</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">slots</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">circle</span> <span class="p">=</span> <span class="nx">mult</span> <span class="o">/</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">slots</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">tw</span><span class="p">.</span><span class="nx">tasks</span><span class="p">[</span><span class="nx">task</span><span class="p">.</span><span class="nx">slot</span><span class="p">].</span><span class="nf">PushBack</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tw</span><span class="p">.</span><span class="nx">set</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>时间轮的主要逻辑如下：</p>
<ol>
<li>将任务存在对应插槽的时间</li>
<li>通过定时间模拟时间轮转动</li>
<li>每次到期后遍历当前插槽的任务列表，若任务圈数为0则执行</li>
<li>如果任务未结束，计算下次执行的插槽与圈数</li>
<li>转入步骤2，依次执行</li>
</ol>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文主要总结了定时任务的两种实现方式，最小堆与时间轮，并分析其核心实现逻辑。</p>
<p>对于执行分布式定时任务，可以借助延时消息队列或者直接使用Kubernetes的CronJob。</p>
<p>自己开发的话可以借助Etcd：</p>
<ul>
<li>中心节点Coordinator将任务按照一定算法(Hash、轮询、或者更复杂的分配算法)将任务与工作节点Worker绑定</li>
<li>每个Worker添加到有绑定到自己的任务则取出放到本地的Cron中</li>
<li>如果Worker挂掉，执行将其上任务重新绑定即可</li>
</ul>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex/tree/main/cron" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex/tree/main/cron</a></p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang分布式应用之Redis</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-redis/</link>
    <pubDate>Fri, 22 Jul 2022 18:07:56 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-redis/</guid>
    <description><![CDATA[<p>Redis是一个高性能的内存数据库，常被应用于分布式系统中，除了作为分布式缓存或简单的内存数据库还有一些特殊的应用场景，本文结合Golang来编写对应的中间件。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></p>
<h2 id="分布式锁" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81" class="header-mark"></a>分布式锁</h2><p>单机系统中我们可以使用<code>sync.Mutex</code>来保护临界资源，在分布式系统中同样有这样的需求，当多个主机抢占同一个资源，需要加对应的“分布式锁”。</p>
<p>在Redis中我们可以通过<code>setnx</code>命令来实现</p>
<ol>
<li>如果key不存在可以设置对应的值，设置成功则加锁成功，key不存在返回失败</li>
<li>释放锁可以通过<code>del</code>实现。</li>
</ol>
<p>主要逻辑如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">RedisLock</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span>     <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span>        <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">expiration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 过期时间，防止宕机或者异常
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewLock</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">expiration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="o">*</span><span class="nx">RedisLock</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">RedisLock</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span>     <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">key</span><span class="p">:</span>        <span class="nx">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">expiration</span><span class="p">:</span> <span class="nx">expiration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 加锁将成功会将调用者id保存到redis中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">RedisLock</span><span class="p">)</span> <span class="nf">Lock</span><span class="p">(</span><span class="nx">id</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">SetNX</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">l</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nx">expiration</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">unLockScript</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">if (redis.call(&#34;get&#34;, KEYS[1]) == KEYS[2]) then
</span></span></span><span class="line"><span class="cl"><span class="s">	redis.call(&#34;del&#34;, KEYS[1])
</span></span></span><span class="line"><span class="cl"><span class="s">	return true
</span></span></span><span class="line"><span class="cl"><span class="s">end
</span></span></span><span class="line"><span class="cl"><span class="s">return false
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 解锁通过lua脚本来保证原子性，只能解锁当前调用者加的锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">RedisLock</span><span class="p">)</span> <span class="nf">UnLock</span><span class="p">(</span><span class="nx">id</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">unLockScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">l</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="nx">id</span><span class="p">}).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>需要加一个额外的超时时间来防止系统宕机或者异常请求造成的死锁，通过超时时间为最大预估运行时间的2倍。</p>
<p>解锁时通过lua脚本来保证原子性，调用者只会解自己加的锁。避免由于超时造成的混乱，例如：进程A在时间t1获取了锁，但由于执行缓慢，在时间t2锁超时失效，进程B在t3获取了锁，这是如果进程A执行完去解锁会取消进程B的锁。</p>
<p>运行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">client</span> <span class="o">:=</span> <span class="nx">redis</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addr</span><span class="p">:</span>     <span class="s">&#34;localhost:6379&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Password</span><span class="p">:</span> <span class="s">&#34;123456&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DB</span><span class="p">:</span>       <span class="mi">0</span><span class="p">,</span> <span class="c1">// use default DB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">lock</span> <span class="o">:=</span> <span class="nf">NewLock</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="s">&#34;counter&#34;</span><span class="p">,</span> <span class="mi">30</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">counter</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;worker%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;worker %d attempt to obtain lock, ok: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">lock</span><span class="p">.</span><span class="nf">UnLock</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">counter</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;worker %d, add counter %d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">counter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行结果，可以看到与<code>sync.Mutex</code>使用效果类似</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">5</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker 5, add counter <span class="m">1</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">4</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">1</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">2</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">1</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">2</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">4</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 4, add counter <span class="m">2</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">1</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 1, add counter <span class="m">3</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">2</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">2</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 2, add counter <span class="m">4</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 3, add counter <span class="m">5</span>
</span></span></code></pre></div><blockquote>
<p>特别注意的是，在分布式Redis集群中，如果发生异常时(主节点宕机)，可能会降低分布式锁的可用性，可以通过强一致性的组件etcd、ZooKeeper等实现。</p>
</blockquote>
<h2 id="分布式过滤器" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e8%bf%87%e6%bb%a4%e5%99%a8" class="header-mark"></a>分布式过滤器</h2><p>假设要开发一个爬虫服务，爬取百万级的网页，怎么判断某一个网页是否爬取过，除了借助数据库和HashMap，我们可以借助布隆过滤器来做。相比其他方式布隆过滤器占用极低的空间，而且插入查询时间非常快。</p>
<p>布隆过滤器用来判断某个元素是否在集合中，利用BitSet</p>
<ul>
<li>插入数据时将值进行多次Hash，将BitSet对应位置1</li>
<li>查询时同样进行多次Hash对比所有位上是否为1，如是则存在。</li>
</ul>
<blockquote>
<p>布隆过滤器有一定的误判率，不适合精确查询的场景。另外也不支持删除元素。通常适用于URL去重、垃圾邮件过滤、防止缓存击穿等场景中。</p>
</blockquote>
<p>在Redis中，我们可以使用自带的BitSet实现，同样也借助lua脚本的原子性来避免多次查询数据不一致。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 插入数据，调用setbit设置对应位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">setScript</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">for _, offset in ipairs(ARGV) do
</span></span></span><span class="line"><span class="cl"><span class="s">	redis.call(&#34;setbit&#34;, KEYS[1], offset, 1)
</span></span></span><span class="line"><span class="cl"><span class="s">end
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 查询数据，如果所有位都为1返回true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">getScript</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">for _, offset in ipairs(ARGV) do
</span></span></span><span class="line"><span class="cl"><span class="s">	if tonumber(redis.call(&#34;getbit&#34;, KEYS[1], offset)) == 0 then
</span></span></span><span class="line"><span class="cl"><span class="s">		return false
</span></span></span><span class="line"><span class="cl"><span class="s">	end
</span></span></span><span class="line"><span class="cl"><span class="s">end
</span></span></span><span class="line"><span class="cl"><span class="s">return true
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BloomFilter</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span>    <span class="kt">string</span> <span class="c1">// 存在redis中的key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">bits</span>   <span class="kt">uint</span> <span class="c1">// BitSet的大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">maps</span>   <span class="kt">uint</span> <span class="c1">// Hash的次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewBloomFilter</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">bits</span><span class="p">,</span> <span class="nx">maps</span> <span class="kt">uint</span><span class="p">)</span> <span class="o">*</span><span class="nx">BloomFilter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">.</span><span class="nf">Del</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">maps</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">maps</span> <span class="p">=</span> <span class="mi">14</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">BloomFilter</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">key</span><span class="p">:</span>    <span class="nx">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span> <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">bits</span><span class="p">:</span>   <span class="nx">bits</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">maps</span><span class="p">:</span>   <span class="nx">maps</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 进行多次Hash, 得到位置列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">BloomFilter</span><span class="p">)</span> <span class="nf">getLocations</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">[]</span><span class="kt">uint</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">locations</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">uint</span><span class="p">,</span> <span class="nx">f</span><span class="p">.</span><span class="nx">maps</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">int</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">maps</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">val</span> <span class="o">:=</span> <span class="nx">murmur3</span><span class="p">.</span><span class="nf">Sum64</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nb">byte</span><span class="p">(</span><span class="nx">i</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">locations</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">uint</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="o">%</span> <span class="nx">f</span><span class="p">.</span><span class="nx">bits</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">locations</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">BloomFilter</span><span class="p">)</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nf">getArgs</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">getLocations</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">setScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">key</span><span class="p">},</span> <span class="nx">args</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">BloomFilter</span><span class="p">)</span> <span class="nf">Exists</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nf">getArgs</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">getLocations</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">getScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">key</span><span class="p">},</span> <span class="nx">args</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">resp</span><span class="p">.(</span><span class="kt">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">exists</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getArgs</span><span class="p">(</span><span class="nx">locations</span> <span class="p">[]</span><span class="kt">uint</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">l</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">locations</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">args</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatUint</span><span class="p">(</span><span class="nb">uint64</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">args</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bf</span> <span class="o">:=</span> <span class="nf">NewBloomFilter</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span><span class="s">&#34;bf-test&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">^</span><span class="mi">16</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Exists</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;exist %t, err %v&#34;</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Add</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test1&#34;</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;add err: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Exists</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;exist %t, err %v&#34;</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Exists</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test2&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;exist %t, err %v&#34;</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// output
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 10:05:58 exist false, err &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 10:05:58 exist true, err &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 10:05:58 exist false, err &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h2 id="分布式限流器" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%99%90%e6%b5%81%e5%99%a8" class="header-mark"></a>分布式限流器</h2><p>在<code>golang.org/x/time/rate</code>包中提供了基于令牌桶的限流器，如果要实现分布式环境的限流可以基于Redis Lua脚本实现。</p>
<p>令牌桶的主要原理如下：</p>
<ul>
<li>假设一个令牌桶容量为burst，每秒按照qps的速率往里面放置令牌</li>
<li>初始时放满令牌，令牌溢出则直接丢弃，请求令牌时，如果桶中有足够令牌则允许，否则拒绝</li>
<li>当burst==qps时，严格按照qps限流；当burst&gt;qps时，可以允许一定的突增流量</li>
</ul>
<p>这里主要参考了官方<code>rate</code>包的实现，将核心逻辑改为Lua实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="c1">--- 相关Key</span>
</span></span><span class="line"><span class="cl"><span class="c1">--- limit rate key值，对应value为当前令牌数</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">limit_key</span> <span class="o">=</span> <span class="n">KEYS</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 输入参数</span>
</span></span><span class="line"><span class="cl"><span class="cm">--[[
</span></span></span><span class="line"><span class="cl"><span class="cm">qps: 每秒请求数;
</span></span></span><span class="line"><span class="cl"><span class="cm">burst: 令牌桶容量;
</span></span></span><span class="line"><span class="cl"><span class="cm">now: 当前Timestamp;
</span></span></span><span class="line"><span class="cl"><span class="cm">cost: 请求令牌数;
</span></span></span><span class="line"><span class="cl"><span class="cm">max_wait: 最大等待时间
</span></span></span><span class="line"><span class="cl"><span class="cm">--]]</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">qps</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">burst</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">now</span> <span class="o">=</span> <span class="n">ARGV</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">cost</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">max_wait</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 获取redis中的令牌数</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;hget&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="s2">&#34;token&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="ow">not</span> <span class="n">tokens</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">tokens</span> <span class="o">=</span> <span class="n">burst</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 上次修改时间</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">last_time</span> <span class="o">=</span> <span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;hget&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="s2">&#34;last_time&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="ow">not</span> <span class="n">last_time</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">last_time</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 最新等待时间</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">last_event</span> <span class="o">=</span> <span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;hget&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="s2">&#34;last_event&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="ow">not</span> <span class="n">last_event</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">last_event</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 通过当前时间与上次修改时间的差值，qps计算出当前时间得令牌数</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">math.max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">now</span><span class="o">-</span><span class="n">last_time</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">new_tokens</span> <span class="o">=</span> <span class="n">math.min</span><span class="p">(</span><span class="n">burst</span><span class="p">,</span> <span class="n">delta</span> <span class="o">*</span> <span class="n">qps</span> <span class="o">+</span> <span class="n">tokens</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">new_tokens</span> <span class="o">=</span> <span class="n">new_tokens</span> <span class="o">-</span> <span class="n">cost</span> <span class="c1">--- 最新令牌数，减少请求令牌</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 如果最新令牌数小于0，计算需要等待的时间</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">wait_period</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">new_tokens</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">qps</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">wait_period</span> <span class="o">=</span> <span class="n">wait_period</span> <span class="o">-</span> <span class="n">new_tokens</span> <span class="o">/</span> <span class="n">qps</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="n">wait_period</span> <span class="o">=</span> <span class="n">math.ceil</span><span class="p">(</span><span class="n">wait_period</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">time_act</span> <span class="o">=</span> <span class="n">now</span> <span class="o">+</span> <span class="n">wait_period</span> <span class="c1">--- 满足等待间隔的时间戳</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 允许请求有两种情况</span>
</span></span><span class="line"><span class="cl"><span class="c1">--- 当请求令牌数小于burst, 等待时间不超过最大等待时间，可以通过补充令牌满足请求</span>
</span></span><span class="line"><span class="cl"><span class="c1">--- qps为0时，只要最新令牌数不小于0即可</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">ok</span> <span class="o">=</span> <span class="p">(</span><span class="n">cost</span> <span class="o">&lt;=</span> <span class="n">burst</span> <span class="ow">and</span> <span class="n">wait_period</span> <span class="o">&lt;=</span> <span class="n">max_wait</span> <span class="ow">and</span> <span class="n">qps</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">qps</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">new_tokens</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 设置对应值</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">ok</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="n">new_tokens</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">,</span> <span class="n">last_time_key</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">,</span> <span class="n">last_event_key</span><span class="p">,</span> <span class="n">time_act</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 返回列表，{是否允许， 等待时间}</span>
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">wait_period</span><span class="p">}</span>
</span></span></code></pre></div><p>在Golang中的相关接口Allow、AllowN、Wait等都是通过调用reserveN实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 调用lua脚本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">lim</span> <span class="o">*</span><span class="nx">RedisLimiter</span><span class="p">)</span> <span class="nf">reserveN</span><span class="p">(</span><span class="nx">now</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">maxFutureReserveSecond</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Reservation</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">lim</span><span class="p">.</span><span class="nx">rdb</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">reserveNScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">lim</span><span class="p">.</span><span class="nx">limitKey</span><span class="p">},</span> <span class="nx">lim</span><span class="p">.</span><span class="nx">qps</span><span class="p">,</span> <span class="nx">lim</span><span class="p">.</span><span class="nx">burst</span><span class="p">,</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Unix</span><span class="p">(),</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">maxFutureReserveSecond</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Reservation</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ok</span><span class="p">:</span>        <span class="nx">allow</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lim</span><span class="p">:</span>       <span class="nx">lim</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokens</span><span class="p">:</span>    <span class="nx">n</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">timeToAct</span><span class="p">:</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">wait</span><span class="p">)</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rdb</span> <span class="o">:=</span> <span class="nx">redis</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addr</span><span class="p">:</span>     <span class="s">&#34;localhost:6379&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Password</span><span class="p">:</span> <span class="s">&#34;123456&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DB</span><span class="p">:</span>       <span class="mi">0</span><span class="p">,</span> <span class="c1">// use default DB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewRedisLimiter</span><span class="p">(</span><span class="nx">rdb</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#34;testrate&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nf">Reset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Wait</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;worker %d allowed: %v&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// output
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:31 worker 0 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:31 worker 1 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:32 worker 2 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:33 worker 3 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:34 worker 4 allowed: &lt;nil&gt;
</span></span></span></code></pre></div><p>前两个请求在burst内，直接可以获得，后面的请求按照qps的速率生成。</p>
<h2 id="其他" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96" class="header-mark"></a>其他</h2><p>除此之外，Redis还可以用作全局计数、去重(set)、发布订阅等场景。Redis官方也提供了一些通用模块，通过加载这些模块也可以实现过滤、限流等特性，参考<a href="https://redis.io/docs/modules/" target="_blank" rel="noopener noreffer">modules</a>。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a>，欢迎批评指正</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></li>
<li><a href="https://go-zero.dev/" target="_blank" rel="noopener noreffer">https://go-zero.dev/</a></li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>捕获Kubernetes中Pod驱逐事件</title>
    <link>https://qingwave.github.io/k8s-watch-eviction-event/</link>
    <pubDate>Fri, 08 Jul 2022 08:36:52 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/k8s-watch-eviction-event/</guid>
    <description><![CDATA[<p>最近在工作中需要捕获Kubernetes的Pod驱逐事件，再做额外的操作。第一个想法是能不能监听（watch）驱逐对象（Eviction Resource），很遗憾Eviction并没有watch接口，只是Pod下的一个子资源，和Scale、Status类似。等等，既然是子资源那能不能通过Webhook获取。</p>
<h2 id="实现" class="headerLink">
    <a href="#%e5%ae%9e%e7%8e%b0" class="header-mark"></a>实现</h2><p>峰回路转，在<a href="https://github.com/kubernetes/kubernetes/pull/76910" target="_blank" rel="noopener noreffer">kubernetes#pr76910</a>中已经实现对pod/eviction子资源的支持。</p>
<p>简单验证一下</p>
<h3 id="生成项目" class="headerLink">
    <a href="#%e7%94%9f%e6%88%90%e9%a1%b9%e7%9b%ae" class="header-mark"></a>生成项目</h3><p>通过kubebuilder快速生成项目</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubebuilder init --component-config --domain qinng.io --repo github.com/qingwave/k8s
</span></span><span class="line"><span class="cl">-eviction-operator
</span></span></code></pre></div><h3 id="编写webhook" class="headerLink">
    <a href="#%e7%bc%96%e5%86%99webhook" class="header-mark"></a>编写Webhook</h3><p>由于pod/eviction不是自定义资源，无法通过kubebuilder直接生成，可按照如下逻辑生成ValidatingAdmissionWebhook</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">webhook</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/go-logr/logr&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">admissionv1</span> <span class="s">&#34;k8s.io/api/admission/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">corev1</span> <span class="s">&#34;k8s.io/api/core/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">policyv1</span> <span class="s">&#34;k8s.io/api/policy/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/apis/meta/v1/unstructured&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/runtime&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/types&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrl</span> <span class="s">&#34;sigs.k8s.io/controller-runtime&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sigs.k8s.io/controller-runtime/pkg/client&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sigs.k8s.io/controller-runtime/pkg/webhook&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sigs.k8s.io/controller-runtime/pkg/webhook/admission&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">WebhookName</span>  <span class="p">=</span> <span class="s">&#34;Eviction&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">EvictionKind</span> <span class="p">=</span> <span class="s">&#34;Eviction&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// rbac注解与webhook注解
</span></span></span><span class="line"><span class="cl"><span class="c1">// +kubebuilder:rbac:groups=&#34;&#34;,resources=pods,verbs=get;list
</span></span></span><span class="line"><span class="cl"><span class="c1">// +kubebuilder:webhook:path=/validate-v1-pod-eviction,admissionReviewVersions=v1;v1beta1,sideEffects=NoneOnDryRun,matchPolicy=Equivalent,mutating=false,failurePolicy=fail,groups=&#34;&#34;,resources=pods/eviction,verbs=create,versions=v1,name=veviction.kb.io
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// EvictionValidator validates Pods Eviction event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">EvictionValidator</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span>  <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span>  <span class="nx">client</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span>     <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl">	<span class="nx">decoder</span> <span class="o">*</span><span class="nx">admission</span><span class="p">.</span><span class="nx">Decoder</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// EvictionValidator 解析Eviction, 格式化返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">EvictionValidator</span><span class="p">)</span> <span class="nf">Handle</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">req</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Response</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nf">WithValues</span><span class="p">(</span><span class="s">&#34;eviction&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s/%s&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;start handle eviction&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Operation</span> <span class="o">!=</span> <span class="nx">admissionv1</span><span class="p">.</span><span class="nx">Create</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;skip none create request, verb: %s&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Operation</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">req</span><span class="p">.</span><span class="nx">DryRun</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="nx">req</span><span class="p">.</span><span class="nx">DryRun</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;skip dry run request&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Kind</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">!=</span> <span class="nx">EvictionKind</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;expected request %s but got %s&#34;</span><span class="p">,</span> <span class="nx">EvictionKind</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Kind</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Errored</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unexpected kind %v&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Kind</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">eviction</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nf">getEviction</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;failed to decode eviction&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Errored</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;reveice new obj, obj: %+#v&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">eviction</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">eviction</span><span class="p">.</span><span class="nx">DeleteOptions</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">eviction</span><span class="p">.</span><span class="nx">DeleteOptions</span><span class="p">.</span><span class="nx">DryRun</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;skip eviction dry run request&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nf">handleEviction</span><span class="p">(</span><span class="nx">eviction</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Errored</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;handle eviction success&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// EvictionValidator implements admission.DecoderInjector.
</span></span></span><span class="line"><span class="cl"><span class="c1">// A decoder will be automatically injected.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// InjectDecoder injects the decoder.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">EvictionValidator</span><span class="p">)</span> <span class="nf">InjectDecoder</span><span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">admission</span><span class="p">.</span><span class="nx">Decoder</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">v</span><span class="p">.</span><span class="nx">decoder</span> <span class="p">=</span> <span class="nx">d</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 解析Eviction
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">EvictionValidator</span><span class="p">)</span> <span class="nf">getEviction</span><span class="p">(</span><span class="nx">req</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">obj</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">decoder</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">obj</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">eviction</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">scheme</span><span class="p">.</span><span class="nf">Convert</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">eviction</span><span class="p">,</span> <span class="kc">nil</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">eviction</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 处理驱逐事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">EvictionValidator</span><span class="p">)</span> <span class="nf">handleEviction</span><span class="p">(</span><span class="nx">eviction</span> <span class="o">*</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">podNamespacedName</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">NamespacedName</span><span class="p">{</span><span class="nx">Namespace</span><span class="p">:</span> <span class="nx">eviction</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span> <span class="nx">Name</span><span class="p">:</span> <span class="nx">eviction</span><span class="p">.</span><span class="nx">Name</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">podNamespacedName</span><span class="p">,</span> <span class="nx">pod</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">v</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;get eviction pod: %#v&#34;</span><span class="p">,</span> <span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 注册Webhook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewEvictionWebhook</span><span class="p">(</span><span class="nx">mgr</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Manager</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">EvictionValidator</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetClient</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">:</span>    <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetLogger</span><span class="p">().</span><span class="nf">WithName</span><span class="p">(</span><span class="nx">WebhookName</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">mgr</span><span class="p">.</span><span class="nf">GetWebhookServer</span><span class="p">().</span><span class="nf">Register</span><span class="p">(</span><span class="s">&#34;/validate-v1-pod-eviction&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">webhook</span><span class="p">.</span><span class="nx">Admission</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Handler</span><span class="p">:</span> <span class="nx">w</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>特别注意的是，Eviction包括v1、v1beat1两个版本，解析时需要可以全部转换为v1方便处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">webhook</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">policyv1</span> <span class="s">&#34;k8s.io/api/policy/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">policyv1beta1</span> <span class="s">&#34;k8s.io/api/policy/v1beta1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/conversion&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/runtime&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">RegisterConversion</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nf">AddConversionFunc</span><span class="p">((</span><span class="o">*</span><span class="nx">policyv1beta1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">)(</span><span class="kc">nil</span><span class="p">),</span> <span class="p">(</span><span class="o">*</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">)(</span><span class="kc">nil</span><span class="p">),</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">scope</span> <span class="nx">conversion</span><span class="p">.</span><span class="nx">Scope</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nf">ConvertV1beta1EvictionToV1Eviction</span><span class="p">(</span><span class="nx">a</span><span class="p">.(</span><span class="o">*</span><span class="nx">policyv1beta1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">),</span> <span class="nx">b</span><span class="p">.(</span><span class="o">*</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">),</span> <span class="nx">scope</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 注册转换函数v1beta1-&gt;v1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">ConvertV1beta1EvictionToV1Eviction</span><span class="p">(</span><span class="nx">in</span> <span class="o">*</span><span class="nx">policyv1beta1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">,</span> <span class="nx">out</span> <span class="o">*</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">,</span> <span class="nx">s</span> <span class="nx">conversion</span><span class="p">.</span><span class="nx">Scope</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span><span class="p">.</span><span class="nx">ObjectMeta</span> <span class="p">=</span> <span class="nx">in</span><span class="p">.</span><span class="nx">ObjectMeta</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span><span class="p">.</span><span class="nx">DeleteOptions</span> <span class="p">=</span> <span class="nx">in</span><span class="p">.</span><span class="nx">DeleteOptions</span><span class="p">.</span><span class="nf">DeepCopy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>至此，大体框架完成，需要部署建议使用cert-manager来注入证书，不需要自己手动再生成。</p>
<h3 id="测试" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95" class="header-mark"></a>测试</h3><p>通过<a href="https://github.com/ueokande/kubectl-evict" target="_blank" rel="noopener noreffer">kubectl-evict</a>驱逐pod，在operator日志中显示已捕获事件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1.6572752110781207e+09  DEBUG   controller-runtime.webhook.webhooks     received request        {&#34;webhook&#34;: &#34;/validate-v1-pod-eviction&#34;, &#34;UID&#34;: &#34;4f98f064-97c1-4ada-a9d8-0946afb11eba&#34;, &#34;kind&#34;: &#34;policy/v1beta1, Kind=Eviction&#34;, &#34;resource&#34;: {&#34;group&#34;:&#34;&#34;,&#34;version&#34;:&#34;v1&#34;,&#34;resource&#34;:&#34;pods&#34;}}
</span></span><span class="line"><span class="cl">1.6572752110781898e+09  INFO    Eviction        start handle eviction   {&#34;eviction&#34;: &#34;default/nginx-6799fc88d8-drkc4&#34;}
</span></span><span class="line"><span class="cl">1.6572752110787241e+09  INFO    Eviction        reveice new obj, obj: v1.Eviction{TypeMeta:v1.TypeMeta{Kind:&#34;&#34;, APIVersion:&#34;&#34;}, ObjectMeta:v1.ObjectMeta{Name:&#34;nginx-6799fc88d8-drkc4&#34;, GenerateName:&#34;&#34;, Namespace:&#34;default&#34;, SelfLink:&#34;&#34;, UID:&#34;&#34;, ResourceVersion:&#34;&#34;, Generation:0, CreationTimestamp:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), DeletionTimestamp:&lt;nil&gt;, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ZZZ_DeprecatedClusterName:&#34;&#34;, ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:&#34;kubectl-evict&#34;, Operation:&#34;Update&#34;, APIVersion:&#34;policy/v1beta1&#34;, Time:time.Date(2022, time.July, 8, 10, 13, 31, 0, time.Local), FieldsType:&#34;FieldsV1&#34;, FieldsV1:(*v1.FieldsV1)(0xc000479a10), Subresource:&#34;&#34;}}}, DeleteOptions:(*v1.DeleteOptions)(0xc00060dc20)}    {&#34;eviction&#34;: &#34;default/nginx-6799fc88d8-drkc4&#34;}
</span></span><span class="line"><span class="cl">1.6572752111794329e+09  INFO    Eviction        get eviction pod: &amp;v1.Pod{TypeMeta:v1.TypeMeta{Kind:&#34;Pod&#34;, APIVersion:&#34;v1&#34;}, ObjectMeta:v1.ObjectMeta{Name:&#34;nginx-6799fc88d8-drkc4&#34;...
</span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>通过Webhook可以实现对驱逐事件的捕捉，但也有一些地方需要注意</p>
<ul>
<li>如果处理逻辑比较复杂，尽量通过Webhook生成其他资源如CRD，Controller监听CRD再来处理其他的处理，防止Webhook处理超时，而且Controller遇到异常会再次重试</li>
<li>目前Webhook对于Eviction子资源，无法通过<code>objectSelector</code>选择特定的Pod，除非调用者在Eviction对象中包含了Pod的Labels</li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Open Policy Agent vs Casbin</title>
    <link>https://qingwave.github.io/openpolicyagent-vs-casbin/</link>
    <pubDate>Fri, 20 May 2022 06:03:49 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/openpolicyagent-vs-casbin/</guid>
    <description><![CDATA[<p>大型项目中基本都包含有复杂的访问控制策略，特别是在一些多租户场景中，例如Kubernetes中就支持RBAC，ABAC等多种授权类型。在Golang中目前比较热门的访问控制框架有<a href="https://www.openpolicyagent.org/" target="_blank" rel="noopener noreffer">Open Policy Agent</a>与<a href="https://casbin.org/" target="_blank" rel="noopener noreffer">Casbin</a>，本文主要分析其异同与选型策略。</p>
<h2 id="open-policy-agent" class="headerLink">
    <a href="#open-policy-agent" class="header-mark"></a>Open Policy Agent</h2><p>Open Policy Agent(简称OPA)是一个开源的策略引擎，托管于CNCF，通常用来做在微服务、API网关、Kubernetes、CI/CD等系统中做策略管理。</p>
<p>OPA将策略从代码中分离出来，按照官网的说法OPA实现了<em>策略即代码</em>，通过Rego声明式语言实现决策逻辑，当系统需要做出策略时，只需携带请求查询OPA即可，OPA会返回决策结果。


</p>
<h3 id="那么我们为什么需要opa" class="headerLink">
    <a href="#%e9%82%a3%e4%b9%88%e6%88%91%e4%bb%ac%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81opa" class="header-mark"></a>那么我们为什么需要OPA?</h3><p>大型软件中各个组件都需要进行一些策略控制，比如用户权限校验、创建资源校验、某个时间段允许访问，如果每个组件都需要实现一套策略控制，那么彼此之间会不统一，维护困难。一个自然的想法是能否将这些策略逻辑抽离出来，形成一个单独的服务，同时这个服务可能需要提供各种不同sdk来屏蔽语言差异。</p>
<p>OPA正是解决这个问题，将散落在系统各处的策略进行统一，所有服务直接请求OPA即可。通过引入OPA可以降低系统耦合性，减少维护复杂度。</p>
<h3 id="http-api中使用opa授权" class="headerLink">
    <a href="#http-api%e4%b8%ad%e4%bd%bf%e7%94%a8opa%e6%8e%88%e6%9d%83" class="header-mark"></a>Http API中使用OPA授权</h3><p>我们在Gin实现的Http服务中（原生http库也类似）引入OPA来实现Http API授权。示例代码见<a href="https://github.com/qingwave/opa-gin-authz" target="_blank" rel="noopener noreffer">https://github.com/qingwave/opa-gin-authz</a></p>
<p>首先需要实现策略，我们允许所有用户访问非api的接口，拒绝未认证用户访问api资源，通过Rego实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">authz</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">default</span> <span class="nx">allow</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">allow</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">input</span><span class="p">.</span><span class="nx">method</span> <span class="o">==</span> <span class="s">&#34;GET&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">not</span> <span class="nf">startswith</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="s">&#34;/api&#34;</span><span class="p">)</span> <span class="err">#如果请求方法为</span><span class="nx">GET</span><span class="err">并且</span><span class="nx">path</span><span class="err">不以</span><span class="o">/</span><span class="nx">api</span><span class="err">开头则允许</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">allow</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">input</span><span class="p">.</span><span class="nx">method</span> <span class="o">==</span> <span class="s">&#34;GET&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">input</span><span class="p">.</span><span class="nx">subject</span><span class="p">.</span><span class="nx">user</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="err">#用户名不为空</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在Gin中实现OPA插件，这里通过嵌入OPA到代码中来实现授权，也可以将OPA单独部署</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">WithOPA</span><span class="p">(</span><span class="nx">opa</span> <span class="o">*</span><span class="nx">rego</span><span class="p">.</span><span class="nx">PreparedEvalQuery</span><span class="p">,</span> <span class="nx">logger</span> <span class="o">*</span><span class="nx">zap</span><span class="p">.</span><span class="nx">Logger</span><span class="p">)</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">user</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;user&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">groups</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">QueryArray</span><span class="p">(</span><span class="s">&#34;groups&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">input</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span> <span class="c1">//构造OPA输入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="s">&#34;method&#34;</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">Method</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;path&#34;</span><span class="p">:</span>   <span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">RequestURI</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;subject&#34;</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">				<span class="s">&#34;user&#34;</span><span class="p">:</span>  <span class="nx">user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="s">&#34;group&#34;</span><span class="p">:</span> <span class="nx">groups</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;start opa middleware %s, %#v&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="nx">input</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">opa</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">rego</span><span class="p">.</span><span class="nf">EvalInput</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span> <span class="c1">// 验证用户请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nf">Abort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;opa result: %v, %#v&#34;</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">(),</span> <span class="nx">res</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">res</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusForbidden</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="s">&#34;msg&#34;</span><span class="p">:</span> <span class="s">&#34;forbidden&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">})</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nf">Abort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="casbin" class="headerLink">
    <a href="#casbin" class="header-mark"></a>Casbin</h2><p>Casbin是一个Golang实现的开源访问控制框架，支持RBAC、ACL等多种访问控制策略，也支持Golang、Java、JavaScript等多种语言。</p>
<p>在Casbin中, 访问控制模型被抽象为基于PERM(Policy, Effect, Request, Matcher) 的一个文件。通过定义PERM模型来描述资源与用户之间的关系，使用时将具体请求传入Casbin sdk即可返回决策结果。</p>
<h3 id="为什么需要casbin" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81casbin" class="header-mark"></a>为什么需要Casbin</h3><p>借助Casbin可以轻松实现比如RBAC的访问控制，不需要额外的代码。同时引入Casbin可以简化表结构，如果我们资源实现RBAC策略需要实现：用户表、角色表、操作表、用户角色表、角色操作表，通过RBAC实现，我们只需实现基础表即可，关系表由Casbin实现。</p>
<h3 id="casbin实现http-api访问控制" class="headerLink">
    <a href="#casbin%e5%ae%9e%e7%8e%b0http-api%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6" class="header-mark"></a>Casbin实现Http API访问控制</h3><p>首先，我们需要实现Casbin模式，包含请求与策略格式定义，Matchers即策略逻辑</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[request_definition]
</span></span><span class="line"><span class="cl">r = sub, obj, act
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[policy_definition]
</span></span><span class="line"><span class="cl">p = sub, obj, act
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[policy_effect]
</span></span><span class="line"><span class="cl">e = some(where (p.eft == allow)) #其中一个策略生效则返回True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[matchers]
</span></span><span class="line"><span class="cl">m = r.sub == p.sub &amp;&amp; keyMatch(r.obj, p.obj) &amp;&amp; r.act == p.act
</span></span></code></pre></div><p>预定义一些策略，也可以存储到数据库, alice可以访问所有/api开头的路径，bob只能访问/version路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">p, alice, /api/*, read
</span></span><span class="line"><span class="cl">p, bob, /version, write
</span></span></code></pre></div><p>通过各种需要的sdk可以轻松接入Casbin</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 加载模型与策略，也可以存储到数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">e</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">casbin</span><span class="p">.</span><span class="nf">NewEnforcer</span><span class="p">(</span><span class="s">&#34;path/to/model.conf&#34;</span><span class="p">,</span> <span class="s">&#34;path/to/policy.csv&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">sub</span> <span class="o">:=</span> <span class="s">&#34;alice&#34;</span> <span class="c1">// the user that wants to access a resource.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">obj</span> <span class="o">:=</span> <span class="s">&#34;data1&#34;</span> <span class="c1">// the resource that is going to be accessed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">act</span> <span class="o">:=</span> <span class="s">&#34;read&#34;</span> <span class="c1">// the operation that the user performs on the resource.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Enforce</span><span class="p">(</span><span class="nx">sub</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="nx">act</span><span class="p">)</span> <span class="c1">//判断用户是否有权限
</span></span></span></code></pre></div><h2 id="opa-vs-casbin" class="headerLink">
    <a href="#opa-vs-casbin" class="header-mark"></a>OPA vs Casbin</h2><p>那么，在项目中我们需要如何选择合适的策略引擎，如果项目授权方式比较简单，首先推荐通过代码实现，不需要引入第三方库。需要确实需要借助额外的框架可以考虑以下几点角度。</p>
<table>
    <tr>
        <td width="20%">对比项</td>
        <td width="40%"> OPA</td>
        <td width="40%">Casbin</td>
    </tr>
    <tr>
        <td width="20%">访问控制策略</td>
        <td width="40%">通过Rego可以实现多种策略</td>
        <td width="40%">原生支持ACL、ABAC、RBAC等多种策略</td>
    </tr>
    <tr>
        <td width="20%">自定义策略</td>
        <td width="40%"> 支持</td>
        <td width="40%">通过自定义函数和Model实现，灵活性一般</td>
    </tr>
    <tr>
        <td width="20%">调整策略复杂度</td>
        <td width="40%">更改/添加Rego逻辑即可</td>
        <td width="40%">如果已存在大量策略数据，需要考虑数据迁移</td>
    </tr>
    <tr>
        <td width="20%"> 存储数据</td>
        <td width="40%">不支持</td>
        <td width="40%">支持存储策略存储到文件或数据库</td>
    </tr>
    <tr>
        <td width="20%">运行方式</td>
        <td width="40%">内嵌、单独部署</td>
        <td width="40%">通常为内嵌</td>
    </tr>
    <tr>
        <td width="20%">sdk支持语言</td>
        <td width="40%">Go、WASM(nodejs)、Python-rego，其他通过Restful API</td>
        <td width="40%">支持Java、Go、Python等多种常用语言</td>
    </tr>
    <tr>
        <td width="20%">策略返回格式</td>
        <td width="40%">Json数据</td>
        <td width="40%">True/False</td>
    </tr>
    <tr>
        <td width="20%">性能</td>
        <td width="40%">评估时间随着策略数据量会增加，支持多节点部署</td>
        <td width="40%">对于HTTP服务评估时间在1ms内</td>
    </tr>
</table>
<p>简而言之，如果系统策略模型固定，可以引入Casbin简化授权系统设计。如果策略需要经常调整、扩展，或者微服务系统中多个组件都需要策略控制，使用OPA可以将策略实现抽离出来。</p>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ol>
<li><a href="https://www.openpolicyagent.org/docs/latest/" target="_blank" rel="noopener noreffer">https://www.openpolicyagent.org/docs/latest/</a></li>
<li><a href="https://casbin.org/docs/zh-CN/" target="_blank" rel="noopener noreffer">https://casbin.org/docs/zh-CN/</a></li>
</ol>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Kubernetes中的Golang设计模式</title>
    <link>https://qingwave.github.io/k8s-golang-design-pattern/</link>
    <pubDate>Thu, 14 Apr 2022 07:18:45 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/k8s-golang-design-pattern/</guid>
    <description><![CDATA[<p>随着Kubernetes成为容器编排领域的事实标准，Golang在云原生方面应用的也越来越多。今天我们跟随K8s的脚步，学习下在K8s中使用哪些经典的设计模式。</p>
<h2 id="创建型模式" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e5%9e%8b%e6%a8%a1%e5%bc%8f" class="header-mark"></a>创建型模式</h2><p>创建型模式顾名思义提供了对象的创建机制，封装了内部的复杂性，提高代码复用和灵活性。包括：</p>
<ul>
<li>单例模式</li>
<li>工厂模式</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
<h3 id="单例模式" class="headerLink">
    <a href="#%e5%8d%95%e4%be%8b%e6%a8%a1%e5%bc%8f" class="header-mark"></a>单例模式</h3><p>单例模式用来保证一个类只有一个实例，并提供调用它的一个全局访问点。单例模式是设计模式中最简单，使用最广的一个，通常用来创建一个共享的实例，比如数据库连接池、线程池等。</p>
<p>单例模式分为懒汉式（使用时创建，延迟调用）与饿汉式（初始化时创建），通常我们使用<code>once.Do</code>来实现懒汉式，保证其线程安全。</p>
<p>在<code>kubeadm</code>中使用了单例模式来创建用户与用户组
<a href="https://github.com/kubernetes/kubernetes/tree/master/cmd/kubeadm/app/util/staticpod/utils.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/tree/master/cmd/kubeadm/app/util/staticpod/utils.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">usersAndGroups</span>     <span class="o">*</span><span class="nx">users</span><span class="p">.</span><span class="nx">UsersAndGroups</span>
</span></span><span class="line"><span class="cl">	<span class="nx">usersAndGroupsOnce</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">GetUsersAndGroups</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">users</span><span class="p">.</span><span class="nx">UsersAndGroups</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nx">usersAndGroupsOnce</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">usersAndGroups</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">users</span><span class="p">.</span><span class="nf">AddUsersAndGroups</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">usersAndGroups</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="工厂模式" class="headerLink">
    <a href="#%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f" class="header-mark"></a>工厂模式</h3><p>工厂模式通过一个工厂方法来创建不同的产品，又分为简单工厂、工厂方法、抽象工厂，一般用来创建一类相似的产品，方便扩展。</p>
<p>简单工厂根据不同的输入创建不同的产品，在Golang中采用<code>Newxxx</code>的方式实现。</p>
<p>在<code>kubelet</code>中通过输入同创建不同的认证类型
<a href="https://github.com/kubernetes/kubernetes/tree/master/cmd/kubelet/app/auth.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/tree/master/cmd/kubelet/app/auth.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BuildAuthz</span><span class="p">(</span><span class="nx">client</span> <span class="nx">authorizationclient</span><span class="p">.</span><span class="nx">AuthorizationV1Interface</span><span class="p">,</span> <span class="nx">authz</span> <span class="nx">kubeletconfig</span><span class="p">.</span><span class="nx">KubeletAuthorization</span><span class="p">)</span> <span class="p">(</span><span class="nx">authorizer</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="nx">authz</span><span class="p">.</span><span class="nx">Mode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">kubeletconfig</span><span class="p">.</span><span class="nx">KubeletAuthorizationModeAlwaysAllow</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">authorizerfactory</span><span class="p">.</span><span class="nf">NewAlwaysAllowAuthorizer</span><span class="p">(),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">kubeletconfig</span><span class="p">.</span><span class="nx">KubeletAuthorizationModeWebhook</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">client</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;no client provided, cannot use webhook authorization&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">authorizerConfig</span> <span class="o">:=</span> <span class="nx">authorizerfactory</span><span class="p">.</span><span class="nx">DelegatingAuthorizerConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">SubjectAccessReviewClient</span><span class="p">:</span> <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">AllowCacheTTL</span><span class="p">:</span>             <span class="nx">authz</span><span class="p">.</span><span class="nx">Webhook</span><span class="p">.</span><span class="nx">CacheAuthorizedTTL</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">DenyCacheTTL</span><span class="p">:</span>              <span class="nx">authz</span><span class="p">.</span><span class="nx">Webhook</span><span class="p">.</span><span class="nx">CacheUnauthorizedTTL</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">WebhookRetryBackoff</span><span class="p">:</span>       <span class="nx">genericoptions</span><span class="p">.</span><span class="nf">DefaultAuthWebhookRetryBackoff</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">authorizerConfig</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="s">&#34;&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;no authorization mode specified&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unknown authorization mode %s&#34;</span><span class="p">,</span> <span class="nx">authz</span><span class="p">.</span><span class="nx">Mode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以及https://github.com/kubernetes/client-go/blob/master/tools/cache/store.go</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewStore</span><span class="p">(</span><span class="nx">keyFunc</span> <span class="nx">KeyFunc</span><span class="p">)</span> <span class="nx">Store</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cache</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cacheStorage</span><span class="p">:</span> <span class="nf">NewThreadSafeStore</span><span class="p">(</span><span class="nx">Indexers</span><span class="p">{},</span> <span class="nx">Indices</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">keyFunc</span><span class="p">:</span>      <span class="nx">keyFunc</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">cache</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// cacheStorage bears the burden of thread safety for the cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cacheStorage</span> <span class="nx">ThreadSafeStore</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// keyFunc is used to make the key for objects stored in and retrieved from items, and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// should be deterministic.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">keyFunc</span> <span class="nx">KeyFunc</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Store</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Add</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Update</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Delete</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">List</span><span class="p">()</span> <span class="p">[]</span><span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">ListKeys</span><span class="p">()</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Get</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">exists</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// GetByKey returns the accumulator associated with the given key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GetByKey</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">exists</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Replace</span><span class="p">([]</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Resync</span><span class="p">()</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>抽象工厂用来构建复杂的一组产品，在informer的实现中使用了抽象工厂
<a href="https://github.com/kubernetes/client-go/blob/master/informers/factory.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/client-go/blob/master/informers/factory.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// NewSharedInformerFactoryWithOptions constructs a new instance of a SharedInformerFactory with additional options.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewSharedInformerFactoryWithOptions</span><span class="p">(</span><span class="nx">client</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span> <span class="nx">defaultResync</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span> <span class="nx">options</span> <span class="o">...</span><span class="nx">SharedInformerOption</span><span class="p">)</span> <span class="nx">SharedInformerFactory</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">factory</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sharedInformerFactory</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span>           <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">namespace</span><span class="p">:</span>        <span class="nx">v1</span><span class="p">.</span><span class="nx">NamespaceAll</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">defaultResync</span><span class="p">:</span>    <span class="nx">defaultResync</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">informers</span><span class="p">:</span>        <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">Type</span><span class="p">]</span><span class="nx">cache</span><span class="p">.</span><span class="nx">SharedIndexInformer</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">startedInformers</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">Type</span><span class="p">]</span><span class="kt">bool</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">customResync</span><span class="p">:</span>     <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">Type</span><span class="p">]</span><span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Apply all options
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">options</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">factory</span> <span class="p">=</span> <span class="nf">opt</span><span class="p">(</span><span class="nx">factory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">factory</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// SharedInformerFactory provides shared informers for resources in all known
</span></span></span><span class="line"><span class="cl"><span class="c1">// API group versions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">SharedInformerFactory</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">internalinterfaces</span><span class="p">.</span><span class="nx">SharedInformerFactory</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ForResource</span><span class="p">(</span><span class="nx">resource</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionResource</span><span class="p">)</span> <span class="p">(</span><span class="nx">GenericInformer</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="kd">map</span><span class="p">[</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">Type</span><span class="p">]</span><span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Admissionregistration</span><span class="p">()</span> <span class="nx">admissionregistration</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Internal</span><span class="p">()</span> <span class="nx">apiserverinternal</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Apps</span><span class="p">()</span> <span class="nx">apps</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Autoscaling</span><span class="p">()</span> <span class="nx">autoscaling</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Batch</span><span class="p">()</span> <span class="nx">batch</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Certificates</span><span class="p">()</span> <span class="nx">certificates</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Coordination</span><span class="p">()</span> <span class="nx">coordination</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Core</span><span class="p">()</span> <span class="nx">core</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Discovery</span><span class="p">()</span> <span class="nx">discovery</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Events</span><span class="p">()</span> <span class="nx">events</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Extensions</span><span class="p">()</span> <span class="nx">extensions</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Flowcontrol</span><span class="p">()</span> <span class="nx">flowcontrol</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Networking</span><span class="p">()</span> <span class="nx">networking</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Node</span><span class="p">()</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Policy</span><span class="p">()</span> <span class="nx">policy</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Rbac</span><span class="p">()</span> <span class="nx">rbac</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Scheduling</span><span class="p">()</span> <span class="nx">scheduling</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Storage</span><span class="p">()</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">sharedInformerFactory</span><span class="p">)</span> <span class="nf">Apps</span><span class="p">()</span> <span class="nx">apps</span><span class="p">.</span><span class="nx">Interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">apps</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">f</span><span class="p">.</span><span class="nx">namespace</span><span class="p">,</span> <span class="nx">f</span><span class="p">.</span><span class="nx">tweakListOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="建造者模式" class="headerLink">
    <a href="#%e5%bb%ba%e9%80%a0%e8%80%85%e6%a8%a1%e5%bc%8f" class="header-mark"></a>建造者模式</h3><p>建造者模式通过逐步构建复杂的对象，降低创建对象的复杂度。通常多个步骤返回中间对象，最后通过<code>Build</code>完成检验与构建工作。</p>
<p>在<code>controller-runtime</code>中使用了建造者模式来创建controller
<a href="https://github.com/kubernetes-sigs/controller-runtime/tree/master/pkg/builder" target="_blank" rel="noopener noreffer">https://github.com/kubernetes-sigs/controller-runtime/tree/master/pkg/builder</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// Builder builds a Controller.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Builder</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">forInput</span>         <span class="nx">ForInput</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ownsInput</span>        <span class="p">[]</span><span class="nx">OwnsInput</span>
</span></span><span class="line"><span class="cl">	<span class="nx">watchesInput</span>     <span class="p">[]</span><span class="nx">WatchesInput</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mgr</span>              <span class="nx">manager</span><span class="p">.</span><span class="nx">Manager</span>
</span></span><span class="line"><span class="cl">	<span class="nx">globalPredicates</span> <span class="p">[]</span><span class="nx">predicate</span><span class="p">.</span><span class="nx">Predicate</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrl</span>             <span class="nx">controller</span><span class="p">.</span><span class="nx">Controller</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrlOptions</span>      <span class="nx">controller</span><span class="p">.</span><span class="nx">Options</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span>             <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">For</span><span class="p">(</span><span class="nx">object</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">ForOption</span><span class="p">)</span> <span class="o">*</span><span class="nx">Builder</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">err</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;For(...) should only be called once, could not assign multiple objects for reconciliation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">blder</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">input</span> <span class="o">:=</span> <span class="nx">ForInput</span><span class="p">{</span><span class="nx">object</span><span class="p">:</span> <span class="nx">object</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">opt</span><span class="p">.</span><span class="nf">ApplyToFor</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span> <span class="p">=</span> <span class="nx">input</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">blder</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Watches exposes the lower-level ControllerManagedBy Watches functions through the builder.  Consider using
</span></span></span><span class="line"><span class="cl"><span class="c1">// Owns or For instead of Watches directly.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Specified predicates are registered only for given source.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">Watches</span><span class="p">(</span><span class="nx">src</span> <span class="nx">source</span><span class="p">.</span><span class="nx">Source</span><span class="p">,</span> <span class="nx">eventhandler</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">WatchesOption</span><span class="p">)</span> <span class="o">*</span><span class="nx">Builder</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">input</span> <span class="o">:=</span> <span class="nx">WatchesInput</span><span class="p">{</span><span class="nx">src</span><span class="p">:</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">eventhandler</span><span class="p">:</span> <span class="nx">eventhandler</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">opt</span><span class="p">.</span><span class="nf">ApplyToWatches</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">blder</span><span class="p">.</span><span class="nx">watchesInput</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">watchesInput</span><span class="p">,</span> <span class="nx">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">blder</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// WithOptions overrides the controller options use in doController. Defaults to empty.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">WithOptions</span><span class="p">(</span><span class="nx">options</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">Options</span><span class="p">)</span> <span class="o">*</span><span class="nx">Builder</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">blder</span><span class="p">.</span><span class="nx">ctrlOptions</span> <span class="p">=</span> <span class="nx">options</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">blder</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// WithLogger overrides the controller options&#39;s logger used.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">WithLogger</span><span class="p">(</span><span class="nx">log</span> <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span><span class="p">)</span> <span class="o">*</span><span class="nx">Builder</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">blder</span><span class="p">.</span><span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Log</span> <span class="p">=</span> <span class="nx">log</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">blder</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Build builds the Application Controller and returns the Controller it created.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">Build</span><span class="p">(</span><span class="nx">r</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="p">(</span><span class="nx">controller</span><span class="p">.</span><span class="nx">Controller</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">r</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide a non-nil Reconciler&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide a non-nil Manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Checking the reconcile type exist or not
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide an object for reconciliation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the ControllerManagedBy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">doController</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the Watch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">doWatch</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="原型模式" class="headerLink">
    <a href="#%e5%8e%9f%e5%9e%8b%e6%a8%a1%e5%bc%8f" class="header-mark"></a>原型模式</h3><p>原型模式用来解决对象复制问题，通过<code>Clone</code>方法，返回对象的复制品。将实现细节与使用解耦。</p>
<p>在k8s中所有资源都需要使用<code>DeepCopy</code>接口即原型模式
<a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/api/core/v1/zz_generated.deepcopy.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/api/core/v1/zz_generated.deepcopy.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">in</span> <span class="o">*</span><span class="nx">Pod</span><span class="p">)</span> <span class="nf">DeepCopyInto</span><span class="p">(</span><span class="nx">out</span> <span class="o">*</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">out</span> <span class="p">=</span> <span class="o">*</span><span class="nx">in</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="p">=</span> <span class="nx">in</span><span class="p">.</span><span class="nx">TypeMeta</span>
</span></span><span class="line"><span class="cl">	<span class="nx">in</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">.</span><span class="nf">DeepCopyInto</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">out</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">in</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nf">DeepCopyInto</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">out</span><span class="p">.</span><span class="nx">Spec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">in</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nf">DeepCopyInto</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">out</span><span class="p">.</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pod.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">in</span> <span class="o">*</span><span class="nx">Pod</span><span class="p">)</span> <span class="nf">DeepCopy</span><span class="p">()</span> <span class="o">*</span><span class="nx">Pod</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">in</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">Pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">in</span><span class="p">.</span><span class="nf">DeepCopyInto</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">out</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="结构型模式" class="headerLink">
    <a href="#%e7%bb%93%e6%9e%84%e5%9e%8b%e6%a8%a1%e5%bc%8f" class="header-mark"></a>结构型模式</h2><p>结构型模式通过将对象组合成更大的结构，从而提供系统的灵活性。包括：</p>
<ul>
<li>适配器模式</li>
<li>桥接模式</li>
<li>组合模式</li>
<li>代理模式</li>
<li>外观模式</li>
<li>装饰模式</li>
<li>享元模式</li>
</ul>
<h3 id="适配器模式" class="headerLink">
    <a href="#%e9%80%82%e9%85%8d%e5%99%a8%e6%a8%a1%e5%bc%8f" class="header-mark"></a>适配器模式</h3><p>通过适配器模式能使不兼容的对象相互协作，通常做一些兼容性工作（老版本、外部服务）时会使用到。</p>
<p>k8s中有很多适配器的例子, 通过<code>Adapter</code>去包裹其他对象转换成统一的接口
<a href="https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/replication/conversion.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/replication/conversion.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// informerAdapter implements ReplicaSetInformer by wrapping ReplicationControllerInformer
</span></span></span><span class="line"><span class="cl"><span class="c1">// and converting objects.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">informerAdapter</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rcInformer</span> <span class="nx">coreinformers</span><span class="p">.</span><span class="nx">ReplicationControllerInformer</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">i</span> <span class="nx">informerAdapter</span><span class="p">)</span> <span class="nf">Informer</span><span class="p">()</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">SharedIndexInformer</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">conversionInformer</span><span class="p">{</span><span class="nx">i</span><span class="p">.</span><span class="nx">rcInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">()}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">i</span> <span class="nx">informerAdapter</span><span class="p">)</span> <span class="nf">Lister</span><span class="p">()</span> <span class="nx">appslisters</span><span class="p">.</span><span class="nx">ReplicaSetLister</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">conversionLister</span><span class="p">{</span><span class="nx">i</span><span class="p">.</span><span class="nx">rcInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">()}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><a href="https://github.com/kubernetes/client-go/blob/master/tools/events/event_broadcaster.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/client-go/blob/master/tools/events/event_broadcaster.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">eventBroadcasterAdapterImpl</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">coreClient</span>          <span class="nx">typedv1core</span><span class="p">.</span><span class="nx">EventsGetter</span>
</span></span><span class="line"><span class="cl">	<span class="nx">coreBroadcaster</span>     <span class="nx">record</span><span class="p">.</span><span class="nx">EventBroadcaster</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventsv1Client</span>      <span class="nx">typedeventsv1</span><span class="p">.</span><span class="nx">EventsV1Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventsv1Broadcaster</span> <span class="nx">EventBroadcaster</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewEventBroadcasterAdapter creates a wrapper around new and legacy broadcasters to simplify
</span></span></span><span class="line"><span class="cl"><span class="c1">// migration of individual components to the new Event API.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewEventBroadcasterAdapter</span><span class="p">(</span><span class="nx">client</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span><span class="p">)</span> <span class="nx">EventBroadcasterAdapter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventClient</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">eventBroadcasterAdapterImpl</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Discovery</span><span class="p">().</span><span class="nf">ServerResourcesForGroupVersion</span><span class="p">(</span><span class="nx">eventsv1</span><span class="p">.</span><span class="nx">SchemeGroupVersion</span><span class="p">.</span><span class="nf">String</span><span class="p">());</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">eventClient</span><span class="p">.</span><span class="nx">eventsv1Client</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">EventsV1</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">eventClient</span><span class="p">.</span><span class="nx">eventsv1Broadcaster</span> <span class="p">=</span> <span class="nf">NewBroadcaster</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">EventSinkImpl</span><span class="p">{</span><span class="nx">Interface</span><span class="p">:</span> <span class="nx">eventClient</span><span class="p">.</span><span class="nx">eventsv1Client</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Even though there can soon exist cases when coreBroadcaster won&#39;t really be needed,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// we create it unconditionally because its overhead is minor and will simplify using usage
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// patterns of this library in all components.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">eventClient</span><span class="p">.</span><span class="nx">coreClient</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventClient</span><span class="p">.</span><span class="nx">coreBroadcaster</span> <span class="p">=</span> <span class="nx">record</span><span class="p">.</span><span class="nf">NewBroadcaster</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">eventClient</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// StartRecordingToSink starts sending events received from the specified eventBroadcaster to the given sink.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">eventBroadcasterAdapterImpl</span><span class="p">)</span> <span class="nf">StartRecordingToSink</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">e</span><span class="p">.</span><span class="nx">eventsv1Broadcaster</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">eventsv1Client</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">e</span><span class="p">.</span><span class="nx">eventsv1Broadcaster</span><span class="p">.</span><span class="nf">StartRecordingToSink</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">e</span><span class="p">.</span><span class="nx">coreBroadcaster</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">coreClient</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">e</span><span class="p">.</span><span class="nx">coreBroadcaster</span><span class="p">.</span><span class="nf">StartRecordingToSink</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">typedv1core</span><span class="p">.</span><span class="nx">EventSinkImpl</span><span class="p">{</span><span class="nx">Interface</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">coreClient</span><span class="p">.</span><span class="nf">Events</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">eventBroadcasterAdapterImpl</span><span class="p">)</span> <span class="nf">NewRecorder</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">EventRecorder</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">e</span><span class="p">.</span><span class="nx">eventsv1Broadcaster</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">eventsv1Client</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">eventsv1Broadcaster</span><span class="p">.</span><span class="nf">NewRecorder</span><span class="p">(</span><span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">record</span><span class="p">.</span><span class="nf">NewEventRecorderAdapter</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nf">DeprecatedNewLegacyRecorder</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="桥接模式" class="headerLink">
    <a href="#%e6%a1%a5%e6%8e%a5%e6%a8%a1%e5%bc%8f" class="header-mark"></a>桥接模式</h3><p>桥接模式将实现与抽象解耦，可提供系统的系统的灵活性与可扩展性。</p>
<p>在k8s中大量使用，如<code>DiscoveryClient</code>的实现
<a href="https://github.com/kubernetes/client-go/blob/master/discovery/discovery_client.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/client-go/blob/master/discovery/discovery_client.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DiscoveryClient</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">restClient</span> <span class="nx">restclient</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">LegacyPrefix</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DiscoveryInterface</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">RESTClient</span><span class="p">()</span> <span class="nx">restclient</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ServerGroupsInterface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ServerResourcesInterface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ServerVersionInterface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">OpenAPISchemaInterface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">OpenAPIV3SchemaInterface</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewDiscoveryClient returns a new DiscoveryClient for the given RESTClient.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewDiscoveryClient</span><span class="p">(</span><span class="nx">c</span> <span class="nx">restclient</span><span class="p">.</span><span class="nx">Interface</span><span class="p">)</span> <span class="o">*</span><span class="nx">DiscoveryClient</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">DiscoveryClient</span><span class="p">{</span><span class="nx">restClient</span><span class="p">:</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">LegacyPrefix</span><span class="p">:</span> <span class="s">&#34;/api&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// RESTClient returns a RESTClient that is used to communicate
</span></span></span><span class="line"><span class="cl"><span class="c1">// with API server by this client implementation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">DiscoveryClient</span><span class="p">)</span> <span class="nf">RESTClient</span><span class="p">()</span> <span class="nx">restclient</span><span class="p">.</span><span class="nx">Interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">d</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">restClient</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="组合模式" class="headerLink">
    <a href="#%e7%bb%84%e5%90%88%e6%a8%a1%e5%bc%8f" class="header-mark"></a>组合模式</h3><p>组合模式通过组合小对象形成更大的结构，并且具有相同的接口。和Golang中的组合非常相似，使用也非常广泛。</p>
<p><a href="https://github.com/kubernetes-sigs/controller-runtime/tree/master/pkg/cache/cache.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes-sigs/controller-runtime/tree/master/pkg/cache/cache.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// Cache knows how to load Kubernetes objects, fetch informers to request
</span></span></span><span class="line"><span class="cl"><span class="c1">// to receive events for Kubernetes objects (at a low-level),
</span></span></span><span class="line"><span class="cl"><span class="c1">// and add indices to fields on the objects stored in the cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Cache</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Cache acts as a client to objects stored in the cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">client</span><span class="p">.</span><span class="nx">Reader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Cache loads informers and adds field indices.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Informers</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Informers</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetInformer</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">obj</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Object</span><span class="p">)</span> <span class="p">(</span><span class="nx">Informer</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">GetInformerForKind</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">gvk</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">)</span> <span class="p">(</span><span class="nx">Informer</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">.</span><span class="nx">FieldIndexer</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="代理模式" class="headerLink">
    <a href="#%e4%bb%a3%e7%90%86%e6%a8%a1%e5%bc%8f" class="header-mark"></a>代理模式</h3><p>代理模式通过代理来替代真实服务，通常代理类与真实类具有相同的接口，在代理类中可以做一些额外操作（访问控制、缓存等）</p>
<p>在k8s中通过代理来实现访问Node、Pod、Service。</p>
<h3 id="外观模式" class="headerLink">
    <a href="#%e5%a4%96%e8%a7%82%e6%a8%a1%e5%bc%8f" class="header-mark"></a>外观模式</h3><p>外观模式通过一个高度抽象的接口，使子系统更加容器使用，使用也很广泛</p>
<p>比如<code>controller-runtime</code>中创建时<code>controllerManager</code>时调用了很多子系统，使用时只需通过<code>GetClient()</code>便可得到<code>Client</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// New returns a new Manager for creating Controllers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Manager</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Set default values for options fields
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">options</span> <span class="p">=</span> <span class="nf">setOptionsDefaults</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cluster</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cluster</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">clusterOptions</span> <span class="o">*</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">Options</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">Scheme</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">MapperProvider</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">MapperProvider</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">Logger</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">SyncPeriod</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">SyncPeriod</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">Namespace</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Namespace</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">NewCache</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">NewCache</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">NewClient</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">NewClient</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">ClientDisableCacheFor</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">ClientDisableCacheFor</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">DryRunClient</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">DryRunClient</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">EventBroadcaster</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">EventBroadcaster</span> <span class="c1">//nolint:staticcheck
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">controllerManager</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cluster</span><span class="p">:</span>                       <span class="nx">cluster</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">cluster</span><span class="p">)</span> <span class="nf">GetClient</span><span class="p">()</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Client</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">client</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="装饰模式" class="headerLink">
    <a href="#%e8%a3%85%e9%a5%b0%e6%a8%a1%e5%bc%8f" class="header-mark"></a>装饰模式</h3><p>装饰模式通过原有对象多次包装从而添加新功能，典型的一些Http中间件实现（日志、认证）</p>
<p><code>admission</code>中装饰器的使用
<a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/admission/decorator.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/admission/decorator.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Decorator</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Decorate</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">Interface</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">Interface</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DecoratorFunc</span> <span class="kd">func</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">Interface</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">DecoratorFunc</span><span class="p">)</span> <span class="nf">Decorate</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">Interface</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">Interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">d</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Decorators</span> <span class="p">[]</span><span class="nx">Decorator</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Decorate applies the decorator in inside-out order, i.e. the first decorator in the slice is first applied to the given handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">Decorators</span><span class="p">)</span> <span class="nf">Decorate</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">Interface</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">Interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">result</span> <span class="o">:=</span> <span class="nx">handler</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">d</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">d</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span> <span class="p">=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">Decorate</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="享元模式" class="headerLink">
    <a href="#%e4%ba%ab%e5%85%83%e6%a8%a1%e5%bc%8f" class="header-mark"></a>享元模式</h3><p>享元模式通过共享多个对象共有的子对象，从而节省内存。如连接池、对象池的实现等，在Golang中通过<code>sync.Pool</code>可实现对象复用即享元模式。</p>
<p>在<code>apiserver/endpoints</code>中通过共享gzip对象，减少内存分配以及gc时间</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">gzipPool</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Pool</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">New</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gw</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">gzip</span><span class="p">.</span><span class="nf">NewWriterLevel</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="nx">defaultGzipContentEncodingLevel</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">gw</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">deferredResponseWriter</span><span class="p">)</span> <span class="nf">Write</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">hw</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">hw</span>
</span></span><span class="line"><span class="cl">	<span class="nx">header</span> <span class="o">:=</span> <span class="nx">hw</span><span class="p">.</span><span class="nf">Header</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">w</span><span class="p">.</span><span class="nx">contentEncoding</span> <span class="o">==</span> <span class="s">&#34;gzip&#34;</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">&gt;</span> <span class="nx">defaultGzipThresholdBytes</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">header</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;Content-Encoding&#34;</span><span class="p">,</span> <span class="s">&#34;gzip&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">header</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;Vary&#34;</span><span class="p">,</span> <span class="s">&#34;Accept-Encoding&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">gw</span> <span class="o">:=</span> <span class="nx">gzipPool</span><span class="p">.</span><span class="nf">Get</span><span class="p">().(</span><span class="o">*</span><span class="nx">gzip</span><span class="p">.</span><span class="nx">Writer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gw</span><span class="p">.</span><span class="nf">Reset</span><span class="p">(</span><span class="nx">hw</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">w</span><span class="p">.</span><span class="nx">w</span> <span class="p">=</span> <span class="nx">gw</span>
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">w</span><span class="p">.</span><span class="nx">w</span> <span class="p">=</span> <span class="nx">hw</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">header</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">mediaType</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">hw</span><span class="p">.</span><span class="nf">WriteHeader</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">w</span><span class="p">.</span><span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">deferredResponseWriter</span><span class="p">)</span> <span class="nf">Close</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">w</span><span class="p">.</span><span class="nx">hasWritten</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="nx">t</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">w</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">*</span><span class="nx">gzip</span><span class="p">.</span><span class="nx">Writer</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="p">=</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Reset</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gzipPool</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="行为型模式" class="headerLink">
    <a href="#%e8%a1%8c%e4%b8%ba%e5%9e%8b%e6%a8%a1%e5%bc%8f" class="header-mark"></a>行为型模式</h2><p>行为型模式负责对象间的通信和职责委派，常用的包括：</p>
<ul>
<li>观察者模式</li>
<li>中介者模式</li>
<li>命令模式</li>
<li>迭代器模式</li>
<li>策略模式</li>
<li>状态模式</li>
<li>备忘录模式</li>
<li>职责链模式</li>
<li>访问者模式</li>
<li>解释器模式</li>
</ul>
<h3 id="观察者模式" class="headerLink">
    <a href="#%e8%a7%82%e5%af%9f%e8%80%85%e6%a8%a1%e5%bc%8f" class="header-mark"></a>观察者模式</h3><p>观察者模式允许观察者订阅事件，当事件触发时会通知观察对象。</p>
<p>在<code>shardInformer</code>订阅事件时使用了观察者模式
<a href="https://github.com/kubernetes/client-go/blob/master/tools/cache/shared_informer.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/client-go/blob/master/tools/cache/shared_informer.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">sharedIndexInformer</span><span class="p">)</span> <span class="nf">AddEventHandlerWithResyncPeriod</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">ResourceEventHandler</span><span class="p">,</span> <span class="nx">resyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span><span class="p">.</span><span class="nx">processor</span><span class="p">.</span><span class="nf">addListener</span><span class="p">(</span><span class="nx">listener</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">item</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span><span class="p">.</span><span class="nx">indexer</span><span class="p">.</span><span class="nf">List</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">listener</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">addNotification</span><span class="p">{</span><span class="nx">newObj</span><span class="p">:</span> <span class="nx">item</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 事件触发时通知所有对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">sharedIndexInformer</span><span class="p">)</span> <span class="nf">OnAdd</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Invocation of this function is locked under s.blockDeltas, so it is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// save to distribute the notification
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span><span class="p">.</span><span class="nx">cacheMutationDetector</span><span class="p">.</span><span class="nf">AddObject</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">.</span><span class="nx">processor</span><span class="p">.</span><span class="nf">distribute</span><span class="p">(</span><span class="nx">addNotification</span><span class="p">{</span><span class="nx">newObj</span><span class="p">:</span> <span class="nx">obj</span><span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">sharedProcessor</span><span class="p">)</span> <span class="nf">distribute</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">sync</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">listenersLock</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nx">listenersLock</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">sync</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">listener</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">syncingListeners</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">listener</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">listener</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">listeners</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">listener</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="命令模式" class="headerLink">
    <a href="#%e5%91%bd%e4%bb%a4%e6%a8%a1%e5%bc%8f" class="header-mark"></a>命令模式</h3><p>命令模式通过将请求封装为对象，方便存储调用。</p>
<p>在k8s中所有组件启动都是通过<code>github.com/spf13/cobra</code>工具包
<a href="https://github.com/kubernetes/kubernetes/blob/master/cmd/kube-apiserver/apiserver.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/blob/master/cmd/kube-apiserver/apiserver.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">command</span> <span class="o">:=</span> <span class="nx">app</span><span class="p">.</span><span class="nf">NewAPIServerCommand</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">code</span> <span class="o">:=</span> <span class="nx">cli</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">command</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="nx">code</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="迭代器模式" class="headerLink">
    <a href="#%e8%bf%ad%e4%bb%a3%e5%99%a8%e6%a8%a1%e5%bc%8f" class="header-mark"></a>迭代器模式</h3><p>迭代器允许顺序遍历复杂的数据结构而不暴露其内部细节。通常通过<code>Next</code>方法来迭代下一个对象。</p>
<p>k8s在对象序列化时使用了迭代器。</p>
<h3 id="策略模式" class="headerLink">
    <a href="#%e7%ad%96%e7%95%a5%e6%a8%a1%e5%bc%8f" class="header-mark"></a>策略模式</h3><p>策略模式通过定义一系列算法，允许运行时可替换算法，从而实现算法分离。</p>
<p>策略模式与桥接模式非常像，只是桥接模式的抽象程度更高一点。
<a href="https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/admissionregistration/mutatingwebhookconfiguration/storage/storage.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/admissionregistration/mutatingwebhookconfiguration/storage/storage.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// NewREST returns a RESTStorage object that will work against mutatingWebhookConfiguration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewREST</span><span class="p">(</span><span class="nx">optsGetter</span> <span class="nx">generic</span><span class="p">.</span><span class="nx">RESTOptionsGetter</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">REST</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">store</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">genericregistry</span><span class="p">.</span><span class="nx">Store</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">NewFunc</span><span class="p">:</span>     <span class="kd">func</span><span class="p">()</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span> <span class="p">{</span> <span class="k">return</span> <span class="o">&amp;</span><span class="nx">admissionregistration</span><span class="p">.</span><span class="nx">MutatingWebhookConfiguration</span><span class="p">{}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">NewListFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span> <span class="p">{</span> <span class="k">return</span> <span class="o">&amp;</span><span class="nx">admissionregistration</span><span class="p">.</span><span class="nx">MutatingWebhookConfigurationList</span><span class="p">{}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ObjectNameFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">obj</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">obj</span><span class="p">.(</span><span class="o">*</span><span class="nx">admissionregistration</span><span class="p">.</span><span class="nx">MutatingWebhookConfiguration</span><span class="p">).</span><span class="nx">Name</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DefaultQualifiedResource</span><span class="p">:</span> <span class="nx">admissionregistration</span><span class="p">.</span><span class="nf">Resource</span><span class="p">(</span><span class="s">&#34;mutatingwebhookconfigurations&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">CreateStrategy</span><span class="p">:</span> <span class="nx">mutatingwebhookconfiguration</span><span class="p">.</span><span class="nx">Strategy</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UpdateStrategy</span><span class="p">:</span> <span class="nx">mutatingwebhookconfiguration</span><span class="p">.</span><span class="nx">Strategy</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DeleteStrategy</span><span class="p">:</span> <span class="nx">mutatingwebhookconfiguration</span><span class="p">.</span><span class="nx">Strategy</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">TableConvertor</span><span class="p">:</span> <span class="nx">printerstorage</span><span class="p">.</span><span class="nx">TableConvertor</span><span class="p">{</span><span class="nx">TableGenerator</span><span class="p">:</span> <span class="nx">printers</span><span class="p">.</span><span class="nf">NewTableGenerator</span><span class="p">().</span><span class="nf">With</span><span class="p">(</span><span class="nx">printersinternal</span><span class="p">.</span><span class="nx">AddHandlers</span><span class="p">)},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">options</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">generic</span><span class="p">.</span><span class="nx">StoreOptions</span><span class="p">{</span><span class="nx">RESTOptions</span><span class="p">:</span> <span class="nx">optsGetter</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">store</span><span class="p">.</span><span class="nf">CompleteWithOptions</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">REST</span><span class="p">{</span><span class="nx">store</span><span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="状态模式" class="headerLink">
    <a href="#%e7%8a%b6%e6%80%81%e6%a8%a1%e5%bc%8f" class="header-mark"></a>状态模式</h3><p>状态模式将状态与行为分离，例如状态机的实现</p>
<p>如在容器运行时的接口中，可以获取容器状态</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Runtime</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Status</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">RuntimeStatus</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// SyncPod syncs the running pod into the desired pod.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">SyncPod</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">podStatus</span> <span class="o">*</span><span class="nx">PodStatus</span><span class="p">,</span> <span class="nx">pullSecrets</span> <span class="p">[]</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Secret</span><span class="p">,</span> <span class="nx">backOff</span> <span class="o">*</span><span class="nx">flowcontrol</span><span class="p">.</span><span class="nx">Backoff</span><span class="p">)</span> <span class="nx">PodSyncResult</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="nf">KillPod</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">runningPod</span> <span class="nx">Pod</span><span class="p">,</span> <span class="nx">gracePeriodOverride</span> <span class="o">*</span><span class="kt">int64</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">DeleteContainer</span><span class="p">(</span><span class="nx">containerID</span> <span class="nx">ContainerID</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h3 id="备忘录模式" class="headerLink">
    <a href="#%e5%a4%87%e5%bf%98%e5%bd%95%e6%a8%a1%e5%bc%8f" class="header-mark"></a>备忘录模式</h3><p>备忘录模式可以保存程序内部状态到外部，又不希望暴露内部状态的情形。例如快照可保存对象状态，用于恢复。</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/core/service/ipallocator/allocator.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/core/service/ipallocator/allocator.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// NewFromSnapshot allocates a Range and initializes it from a snapshot.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewFromSnapshot</span><span class="p">(</span><span class="nx">snap</span> <span class="o">*</span><span class="nx">api</span><span class="p">.</span><span class="nx">RangeAllocation</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Range</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">ipnet</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netutils</span><span class="p">.</span><span class="nf">ParseCIDRSloppy</span><span class="p">(</span><span class="nx">snap</span><span class="p">.</span><span class="nx">Range</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewInMemory</span><span class="p">(</span><span class="nx">ipnet</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Restore</span><span class="p">(</span><span class="nx">ipnet</span><span class="p">,</span> <span class="nx">snap</span><span class="p">.</span><span class="nx">Data</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">r</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="职责链模式" class="headerLink">
    <a href="#%e8%81%8c%e8%b4%a3%e9%93%be%e6%a8%a1%e5%bc%8f" class="header-mark"></a>职责链模式</h3><p>通过职责链分离不同的功能，可以动态组合。与装饰模式很相似，实际使用中也不需要区分其差异。</p>
<p>在<code>apiserver</code>的<code>handler</code>实现中，通过职责链来增加认证、授权、限流等操作
<a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/server/config.go" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/server/config.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">DefaultBuildHandlerChain</span><span class="p">(</span><span class="nx">apiHandler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">,</span> <span class="nx">c</span> <span class="o">*</span><span class="nx">Config</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="o">:=</span> <span class="nx">filterlatency</span><span class="p">.</span><span class="nf">TrackCompleted</span><span class="p">(</span><span class="nx">apiHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithAuthorization</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Serializer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">filterlatency</span><span class="p">.</span><span class="nf">TrackStarted</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="s">&#34;authorization&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">FlowControl</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">requestWorkEstimator</span> <span class="o">:=</span> <span class="nx">flowcontrolrequest</span><span class="p">.</span><span class="nf">NewWorkEstimator</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">StorageObjectCountTracker</span><span class="p">.</span><span class="nx">Get</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">FlowControl</span><span class="p">.</span><span class="nx">GetInterestedWatchCount</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">handler</span> <span class="p">=</span> <span class="nx">filterlatency</span><span class="p">.</span><span class="nf">TrackCompleted</span><span class="p">(</span><span class="nx">handler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericfilters</span><span class="p">.</span><span class="nf">WithPriorityAndFairness</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">LongRunningFunc</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">FlowControl</span><span class="p">,</span> <span class="nx">requestWorkEstimator</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">handler</span> <span class="p">=</span> <span class="nx">filterlatency</span><span class="p">.</span><span class="nf">TrackStarted</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="s">&#34;priorityandfairness&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericfilters</span><span class="p">.</span><span class="nf">WithMaxInFlightLimit</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MaxRequestsInFlight</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MaxMutatingRequestsInFlight</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">LongRunningFunc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithLatencyTrackers</span><span class="p">(</span><span class="nx">handler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithRequestInfo</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">RequestInfoResolver</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithRequestReceivedTimestamp</span><span class="p">(</span><span class="nx">handler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithMuxAndDiscoveryComplete</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">lifecycleSignals</span><span class="p">.</span><span class="nx">MuxAndDiscoveryComplete</span><span class="p">.</span><span class="nf">Signaled</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericfilters</span><span class="p">.</span><span class="nf">WithPanicRecovery</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">RequestInfoResolver</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithAuditID</span><span class="p">(</span><span class="nx">handler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">handler</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="访问者模式" class="headerLink">
    <a href="#%e8%ae%bf%e9%97%ae%e8%80%85%e6%a8%a1%e5%bc%8f" class="header-mark"></a>访问者模式</h3><p>访问者模式可以给一系列对象透明的添加功能，并且把相关代码封装到一个类中, 对象只要预留访问者接口Accept则后期为对象添加功能的时就不需要改动对象。</p>
<p>例如动物园内有多个场馆，有些场馆（熊猫馆、海洋馆）需要单独收费，那么每个场馆（对象）可以通过Accept接待游客（Vistor）。访问者模式的关键是将对象的操作分离出来形成单独的类，对象可以选择对应的操作。</p>
<p>在<code>kubectl</code>中使用访问者模式，通过不同的访问者实现不同的参数，从而拼接成Rest请求。
<a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/kubectl/pkg/apps/kind_visitor.go#L39" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/kubectl/pkg/apps/kind_visitor.go#L39</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">KindVisitor</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">VisitDaemonSet</span><span class="p">(</span><span class="nx">kind</span> <span class="nx">GroupKindElement</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">VisitDeployment</span><span class="p">(</span><span class="nx">kind</span> <span class="nx">GroupKindElement</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">VisitJob</span><span class="p">(</span><span class="nx">kind</span> <span class="nx">GroupKindElement</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">VisitPod</span><span class="p">(</span><span class="nx">kind</span> <span class="nx">GroupKindElement</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">VisitReplicaSet</span><span class="p">(</span><span class="nx">kind</span> <span class="nx">GroupKindElement</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">VisitReplicationController</span><span class="p">(</span><span class="nx">kind</span> <span class="nx">GroupKindElement</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">VisitStatefulSet</span><span class="p">(</span><span class="nx">kind</span> <span class="nx">GroupKindElement</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">VisitCronJob</span><span class="p">(</span><span class="nx">kind</span> <span class="nx">GroupKindElement</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// GroupKindElement defines a Kubernetes API group elem
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">GroupKindElement</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupKind</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Accept calls the Visit method on visitor that corresponds to elem&#39;s Kind
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">elem</span> <span class="nx">GroupKindElement</span><span class="p">)</span> <span class="nf">Accept</span><span class="p">(</span><span class="nx">visitor</span> <span class="nx">KindVisitor</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">GroupMatch</span><span class="p">(</span><span class="s">&#34;apps&#34;</span><span class="p">,</span> <span class="s">&#34;extensions&#34;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">==</span> <span class="s">&#34;DaemonSet&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">visitor</span><span class="p">.</span><span class="nf">VisitDaemonSet</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">GroupMatch</span><span class="p">(</span><span class="s">&#34;apps&#34;</span><span class="p">,</span> <span class="s">&#34;extensions&#34;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">==</span> <span class="s">&#34;Deployment&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">visitor</span><span class="p">.</span><span class="nf">VisitDeployment</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">GroupMatch</span><span class="p">(</span><span class="s">&#34;batch&#34;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">==</span> <span class="s">&#34;Job&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">visitor</span><span class="p">.</span><span class="nf">VisitJob</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">GroupMatch</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;core&#34;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">==</span> <span class="s">&#34;Pod&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">visitor</span><span class="p">.</span><span class="nf">VisitPod</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">GroupMatch</span><span class="p">(</span><span class="s">&#34;apps&#34;</span><span class="p">,</span> <span class="s">&#34;extensions&#34;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">==</span> <span class="s">&#34;ReplicaSet&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">visitor</span><span class="p">.</span><span class="nf">VisitReplicaSet</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">GroupMatch</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;core&#34;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">==</span> <span class="s">&#34;ReplicationController&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">visitor</span><span class="p">.</span><span class="nf">VisitReplicationController</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">GroupMatch</span><span class="p">(</span><span class="s">&#34;apps&#34;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">==</span> <span class="s">&#34;StatefulSet&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">visitor</span><span class="p">.</span><span class="nf">VisitStatefulSet</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">GroupMatch</span><span class="p">(</span><span class="s">&#34;batch&#34;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">==</span> <span class="s">&#34;CronJob&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">visitor</span><span class="p">.</span><span class="nf">VisitCronJob</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;no visitor method exists for %v&#34;</span><span class="p">,</span> <span class="nx">elem</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>K8s中包含了不少经典设计模式的例子，部分没找到合适的例子便没有提及。实际使用过程中可能多种模式都有涉及，或者是一些变种，不简单的是严格的标准定义，学会灵活应用才能提高的代码质量。</p>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ul>
<li><a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes</a></li>
<li><a href="https://aly.arriqaaq.com/golang-design-patterns/" target="_blank" rel="noopener noreffer">https://aly.arriqaaq.com/golang-design-patterns/</a></li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>手写一个Kubernetes CNI网络插件</title>
    <link>https://qingwave.github.io/how-to-write-k8s-cni/</link>
    <pubDate>Fri, 01 Apr 2022 05:56:01 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/how-to-write-k8s-cni/</guid>
    <description><![CDATA[<p>CNI(Container Network Interface) 即容器的网络API接口，在Kubernetes中通过CNI来扩展网络功能，今天我们从零开始实现一个自己的CNI网络插件。</p>
<p>本文所有代码见:</p>
<blockquote>
<p><a href="https://github.com/qingwave/mycni" target="_blank" rel="noopener noreffer">https://github.com/qingwave/mycni</a></p>
</blockquote>
<h2 id="cni简介" class="headerLink">
    <a href="#cni%e7%ae%80%e4%bb%8b" class="header-mark"></a>CNI简介</h2><p>Kubernetes提供了很多扩展点，通过CNI网络插件可以支持不同的网络设施，大大提供了系统的灵活性，目前也已成为容器网络领域的标准。</p>
<p>Kubernetes与CNI的交互逻辑如下：


</p>
<p>Kubelet监听到Pod调度到当前节点后，通过rpc调用CRI(containerd, cri-o等)，CRI创建Sandbox容器，初始化Cgroup与Namespace，然后再调用CNI插件分配IP，最后完成容器创建与启动。</p>
<p>不同于CRI、CSI通过rpc通信，CNI是通过二进制接口调用的，通过环境变量和标准输入传递具体网络配置，下图为Flannel CNI插件的工作流程，通过链式调用CNI插件实现对Pod的IP分配、网络配置：


</p>
<h2 id="实现cni" class="headerLink">
    <a href="#%e5%ae%9e%e7%8e%b0cni" class="header-mark"></a>实现CNI</h2><p>实现一个完整的K8s CNI插件需要满足以下几点要求：</p>
<ol>
<li>Pod IP分配，即IPAM功能</li>
<li>节点与其上所有Pod网络互通，以实现健康检查</li>
<li>集群内所有Pod可通信，包括同节点与不同节点</li>
<li>其他功能的支持，比如hostPort、兼容kube-proxy的iptables规则等</li>
</ol>
<p>我们主要实现前三点需求，通过Linux Bridge、Veth Pair以及路由来实现K8s网络方案。</p>
<p>网络架构如下：


</p>
<p>包括两个组件：</p>
<ol>
<li>mycni: CNI插件，实现IPAM，为Pod分配IP配置路由，通过网桥实现同节点上不同Pod的通信</li>
<li>mycnid: 节点上守护进程，监听K8s Node，获取各个节点CIDR写入路由</li>
</ol>
<h3 id="mycni" class="headerLink">
    <a href="#mycni" class="header-mark"></a>Mycni</h3><p>CNI官方已经提供了<a href="https://github.com/containernetworking/cni/blob/main/pkg/skel/skel.go#L267" target="_blank" rel="noopener noreffer">工具包</a>，我们只需要实现<code>cmdAdd, cmdCheck, cmdDel</code>接口即可实现一个CNI插件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">PluginMainWithError</span><span class="p">(</span><span class="nx">cmdAdd</span><span class="p">,</span> <span class="nx">cmdCheck</span><span class="p">,</span> <span class="nx">cmdDel</span> <span class="kd">func</span><span class="p">(</span><span class="nx">_</span> <span class="o">*</span><span class="nx">CmdArgs</span><span class="p">)</span> <span class="kt">error</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">versionInfo</span> <span class="nx">version</span><span class="p">.</span><span class="nx">PluginInfo</span><span class="p">,</span> <span class="nx">about</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">dispatcher</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Getenv</span><span class="p">:</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getenv</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Stdin</span><span class="p">:</span>  <span class="nx">os</span><span class="p">.</span><span class="nx">Stdin</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Stdout</span><span class="p">:</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Stderr</span><span class="p">:</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}).</span><span class="nf">pluginMain</span><span class="p">(</span><span class="nx">cmdAdd</span><span class="p">,</span> <span class="nx">cmdCheck</span><span class="p">,</span> <span class="nx">cmdDel</span><span class="p">,</span> <span class="nx">versionInfo</span><span class="p">,</span> <span class="nx">about</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们主要关注网络创建过程，实现IP分配与网桥配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">cmdAdd</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">skel</span><span class="p">.</span><span class="nx">CmdArgs</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 加载配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conf</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">config</span><span class="p">.</span><span class="nf">LoadCNIConfig</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">StdinData</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 存储本机IP分配列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">store</span><span class="p">.</span><span class="nf">NewStore</span><span class="p">(</span><span class="nx">conf</span><span class="p">.</span><span class="nx">DataDir</span><span class="p">,</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">s</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ipam服务，分配ip
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ipam</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">NewIPAM</span><span class="p">(</span><span class="nx">conf</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gateway</span> <span class="o">:=</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">Gateway</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ip</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">AllocateIP</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">ContainerID</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">IfName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建网桥，虚拟设备，并绑定到网桥
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">br</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bridge</span><span class="p">.</span><span class="nf">CreateBridge</span><span class="p">(</span><span class="nx">conf</span><span class="p">.</span><span class="nx">Bridge</span><span class="p">,</span> <span class="nx">mtu</span><span class="p">,</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">IPNet</span><span class="p">(</span><span class="nx">gateway</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bridge</span><span class="p">.</span><span class="nf">SetupVeth</span><span class="p">(</span><span class="nx">netns</span><span class="p">,</span> <span class="nx">br</span><span class="p">,</span> <span class="nx">mtu</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">IfName</span><span class="p">,</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">IPNet</span><span class="p">(</span><span class="nx">ip</span><span class="p">),</span> <span class="nx">gateway</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 返回网络配置信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">current</span><span class="p">.</span><span class="nx">Result</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">CNIVersion</span><span class="p">:</span> <span class="nx">current</span><span class="p">.</span><span class="nx">ImplementedSpecVersion</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">IPs</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">current</span><span class="p">.</span><span class="nx">IPConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Address</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">ip</span><span class="p">,</span> <span class="nx">Mask</span><span class="p">:</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">Mask</span><span class="p">()},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Gateway</span><span class="p">:</span> <span class="nx">gateway</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">types</span><span class="p">.</span><span class="nf">PrintResult</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">CNIVersion</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="ipam" class="headerLink">
    <a href="#ipam" class="header-mark"></a>IPAM</h4><p>IPAM服务需要保证为Pod分配唯一的IP，K8s会为每个节点分配PodCIDR，只需要保证节点上所有Pod IP不冲突即可。</p>
<p>通过本地文件来存储已分配的IP，当新Pod创建时只需要检查已分配IP，通过CIDR取一个未使用的IP。通常做法是将IP信息存储在数据库中(etcd)，简单期间本文只使用文件存储。</p>
<p>首先需要保证并发请求时，IP分配不会冲突，可通过文件锁实现，存储实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">data</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">IPs</span>  <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">containerNetINfo</span> <span class="s">`json:&#34;ips&#34;`</span> <span class="c1">// 存储IP信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Last</span> <span class="kt">string</span>                      <span class="s">`json:&#34;last&#34;`</span><span class="c1">// 上一个分配IP
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Store</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">filemutex</span><span class="p">.</span><span class="nx">FileMutex</span> <span class="c1">// 文件锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">dir</span>      <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span>     <span class="o">*</span><span class="nx">data</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dataFile</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>分配IP代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">im</span> <span class="o">*</span><span class="nx">IPAM</span><span class="p">)</span> <span class="nf">AllocateIP</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">ifName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span> <span class="c1">// 上锁，防止冲突
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">defer</span> <span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">LoadData</span><span class="p">();</span> <span class="c1">// 加载存储中IP数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 根据容器id查询ip是否已分配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ip</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">GetIPByID</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ip</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ip</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 从上次已分配IP开始，依次检查，如果IP未使用则添加到文件中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">start</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">last</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">next</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">im</span><span class="p">.</span><span class="nf">NextIP</span><span class="p">(</span><span class="nx">start</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">IPOverflowError</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">last</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">im</span><span class="p">.</span><span class="nx">gateway</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">start</span> <span class="p">=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">gateway</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 分配IP
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">Contain</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">ifName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">next</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">start</span> <span class="p">=</span> <span class="nx">next</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">start</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">last</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;ip: %s&#34;</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;no available ip&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>IP分配过程如下：</p>
<ol>
<li>加文件锁，读取已分配IP</li>
<li>从上一个分配IP开始，遍历判断是否未分配</li>
<li>如果IP未使用，存储到文件中并返回</li>
</ol>
<h4 id="节点内通信" class="headerLink">
    <a href="#%e8%8a%82%e7%82%b9%e5%86%85%e9%80%9a%e4%bf%a1" class="header-mark"></a>节点内通信</h4><p>节点内通信通过网桥实现，创建一个虚拟设备对，分别绑定到Pod所在Namespace与网桥上，绑定IPAM分配的IP, 并设置默认路由。从而实现同一个节点上，Node-&gt;Pod与Pod之间的通信。</p>
<p>首先，如果网桥不存在则通过netlink库创建</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">CreateBridge</span><span class="p">(</span><span class="nx">bridge</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">mtu</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">gateway</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">)</span> <span class="p">(</span><span class="nx">netlink</span><span class="p">.</span><span class="nx">Link</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">l</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkByName</span><span class="p">(</span><span class="nx">bridge</span><span class="p">);</span> <span class="nx">l</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">l</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">br</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">netlink</span><span class="p">.</span><span class="nx">Bridge</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LinkAttrs</span><span class="p">:</span> <span class="nx">netlink</span><span class="p">.</span><span class="nx">LinkAttrs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>   <span class="nx">bridge</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">MTU</span><span class="p">:</span>    <span class="nx">mtu</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">TxQLen</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkAdd</span><span class="p">(</span><span class="nx">br</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">EEXIST</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">dev</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkByName</span><span class="p">(</span><span class="nx">bridge</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加地址，即Pod默认网关地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">AddrAdd</span><span class="p">(</span><span class="nx">dev</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">netlink</span><span class="p">.</span><span class="nx">Addr</span><span class="p">{</span><span class="nx">IPNet</span><span class="p">:</span> <span class="nx">gateway</span><span class="p">});</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 启动网桥
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkSetUp</span><span class="p">(</span><span class="nx">dev</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">dev</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>为容器创建虚拟网卡</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">SetupVeth</span><span class="p">(</span><span class="nx">netns</span> <span class="nx">ns</span><span class="p">.</span><span class="nx">NetNS</span><span class="p">,</span> <span class="nx">br</span> <span class="nx">netlink</span><span class="p">.</span><span class="nx">Link</span><span class="p">,</span> <span class="nx">mtu</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">ifName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">podIP</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">,</span> <span class="nx">gateway</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">hostIface</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">current</span><span class="p">.</span><span class="nx">Interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">netns</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">hostNS</span> <span class="nx">ns</span><span class="p">.</span><span class="nx">NetNS</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 在容器网络空间创建虚拟网卡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">hostVeth</span><span class="p">,</span> <span class="nx">containerVeth</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nf">SetupVeth</span><span class="p">(</span><span class="nx">ifName</span><span class="p">,</span> <span class="nx">mtu</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">hostNS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">hostIface</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="nx">hostVeth</span><span class="p">.</span><span class="nx">Name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// set ip for container veth
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">conLink</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkByName</span><span class="p">(</span><span class="nx">containerVeth</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 绑定Pod IP
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">AddrAdd</span><span class="p">(</span><span class="nx">conLink</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">netlink</span><span class="p">.</span><span class="nx">Addr</span><span class="p">{</span><span class="nx">IPNet</span><span class="p">:</span> <span class="nx">podIP</span><span class="p">});</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 启动网卡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkSetUp</span><span class="p">(</span><span class="nx">conLink</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 添加默认路径，网关即网桥的地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nf">AddDefaultRoute</span><span class="p">(</span><span class="nx">gateway</span><span class="p">,</span> <span class="nx">conLink</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// need to lookup hostVeth again as its index has changed during ns move
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">hostVeth</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkByName</span><span class="p">(</span><span class="nx">hostIface</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to lookup %q: %v&#34;</span><span class="p">,</span> <span class="nx">hostIface</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 将虚拟网卡另一端绑定到网桥上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkSetMaster</span><span class="p">(</span><span class="nx">hostVeth</span><span class="p">,</span> <span class="nx">br</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to connect %q to bridge %v: %v&#34;</span><span class="p">,</span> <span class="nx">hostVeth</span><span class="p">.</span><span class="nf">Attrs</span><span class="p">().</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">br</span><span class="p">.</span><span class="nf">Attrs</span><span class="p">().</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>至此，CNI插件的功能实现完成。</p>
<h3 id="mycnid" class="headerLink">
    <a href="#mycnid" class="header-mark"></a>Mycnid</h3><p><code>mycnid</code>为节点上的守护进程，实现不同节点的Pod通信，主要功能包括：</p>
<ol>
<li>监听K8s Nodes, 获取本节点的PodCIDR写入配置文件(默认位置在<code>/run/mycni/subnet.json</code>)</li>
<li>为其他节点添加路由(<code>ip route add podCIDR via nodeip</code>)</li>
<li>一些初始化配置，写入默认的Iptables规则，初始化网桥</li>
</ol>
<h4 id="节点间通信" class="headerLink">
    <a href="#%e8%8a%82%e7%82%b9%e9%97%b4%e9%80%9a%e4%bf%a1" class="header-mark"></a>节点间通信</h4><p>通过Controller监听Node资源，当前有节点Add/Delete时，调用Reconcile同步路由</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="nf">Reconcile</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">req</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="nx">reconcile</span><span class="p">.</span><span class="nx">Result</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">result</span> <span class="o">:=</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Result</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodes</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取所有节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">List</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取节点的CIDR，生成路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cidrs</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">netlink</span><span class="p">.</span><span class="nx">Route</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">node</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodes</span><span class="p">.</span><span class="nx">Items</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="nx">r</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">nodeName</span> <span class="p">{</span> <span class="c1">// 跳过当前节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 生成期望路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">_</span><span class="p">,</span> <span class="nx">cidr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">ParseCIDR</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">PodCIDR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodeip</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getNodeInternalIP</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">route</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nx">Route</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Dst</span><span class="p">:</span>        <span class="nx">cidr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Gw</span><span class="p">:</span>         <span class="nx">nodeip</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ILinkIndex</span><span class="p">:</span> <span class="nx">r</span><span class="p">.</span><span class="nx">hostLink</span><span class="p">.</span><span class="nf">Attrs</span><span class="p">().</span><span class="nx">Index</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cidrs</span><span class="p">[</span><span class="nx">cidr</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="nx">route</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 与本地的路由对比，不存在则创建
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">currentRoute</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">cidr</span><span class="p">.</span><span class="nf">String</span><span class="p">()];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nf">isRouteEqual</span><span class="p">(</span><span class="nx">route</span><span class="p">,</span> <span class="nx">currentRoute</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">ReplaceRoute</span><span class="p">(</span><span class="nx">currentRoute</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">addRoute</span><span class="p">(</span><span class="nx">route</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 删除多余的路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">cidr</span><span class="p">,</span> <span class="nx">route</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">r</span><span class="p">.</span><span class="nx">routes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">cidrs</span><span class="p">[</span><span class="nx">cidr</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">delRoute</span><span class="p">(</span><span class="nx">route</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 创建路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="nf">addRoute</span><span class="p">(</span><span class="nx">route</span> <span class="nx">netlink</span><span class="p">.</span><span class="nx">Route</span><span class="p">)</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">r</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">route</span><span class="p">.</span><span class="nx">Dst</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="nx">route</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;add route: %s&#34;</span><span class="p">,</span> <span class="nx">route</span><span class="p">.</span><span class="nf">String</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">RouteAdd</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">route</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;failed to add route&#34;</span><span class="p">,</span> <span class="s">&#34;route&#34;</span><span class="p">,</span> <span class="nx">route</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要步骤包括：</p>
<ol>
<li>当前Node变化时获取集群中所有Node网络信息（PodCIDR、IP等）</li>
<li>与节点上路由进行比对，若缺少则添加，若宿主机上存在多余的路由则删除</li>
</ol>
<blockquote>
<p>为什么不是直接对变化的Node修改对应的路由？</p>
<p>通过获取所有节点网络信息与宿主机进行路由比对，符合Kubernetes编程规范，声明式编程而不是过程式，这种方式不会丢事件。即使手动误删了路由，下次同步也会将其恢复。</p>
</blockquote>
<h4 id="其他配置" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96%e9%85%8d%e7%bd%ae" class="header-mark"></a>其他配置</h4><p>如果使用Docker的话，Docker会禁止非Docker网桥的流量转发，需要配置iptables</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">iptables -A FORWARD -i <span class="si">${</span><span class="nv">bridge</span><span class="si">}</span> -j ACCEPT
</span></span></code></pre></div><p>大部分集群允许Pod访问外部网络，需要配置SNAT：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo iptables -t nat -A POSTROUTING -s <span class="nv">$cidr</span> -j MASQUERADE
</span></span><span class="line"><span class="cl"><span class="c1"># 另外允许主机网卡转发</span>
</span></span><span class="line"><span class="cl">iptables -A FORWARD -i <span class="nv">$hostNetWork</span> -j ACCEPT
</span></span></code></pre></div><p>代码如下，通过<code>github.com/coreos/go-iptables/iptables</code>可以配置iptables：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">addIptables</span><span class="p">(</span><span class="nx">bridgeName</span><span class="p">,</span> <span class="nx">hostDeviceName</span><span class="p">,</span> <span class="nx">nodeCIDR</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ipt</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">iptables</span><span class="p">.</span><span class="nf">NewWithProtocol</span><span class="p">(</span><span class="nx">iptables</span><span class="p">.</span><span class="nx">ProtocolIPv4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ipt</span><span class="p">.</span><span class="nf">AppendUnique</span><span class="p">(</span><span class="s">&#34;filter&#34;</span><span class="p">,</span> <span class="s">&#34;FORWARD&#34;</span><span class="p">,</span> <span class="s">&#34;-i&#34;</span><span class="p">,</span> <span class="nx">bridgeName</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="s">&#34;ACCEPT&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ipt</span><span class="p">.</span><span class="nf">AppendUnique</span><span class="p">(</span><span class="s">&#34;filter&#34;</span><span class="p">,</span> <span class="s">&#34;FORWARD&#34;</span><span class="p">,</span> <span class="s">&#34;-i&#34;</span><span class="p">,</span> <span class="nx">hostDeviceName</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="s">&#34;ACCEPT&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ipt</span><span class="p">.</span><span class="nf">AppendUnique</span><span class="p">(</span><span class="s">&#34;nat&#34;</span><span class="p">,</span> <span class="s">&#34;POSTROUTING&#34;</span><span class="p">,</span> <span class="s">&#34;-s&#34;</span><span class="p">,</span> <span class="nx">nodeCIDR</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="s">&#34;MASQUERADE&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="演示" class="headerLink">
    <a href="#%e6%bc%94%e7%a4%ba" class="header-mark"></a>演示</h2><p>通过kind模拟创建多节点k8s集群<code>kind create cluster --config deploy/kind.yaml</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># cat deploy/kind.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Cluster</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kind.x-k8s.io/v1alpha4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networking</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 禁止默认的CNI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disableDefaultCNI</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 包括一个master节点，三个worker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">control-plane</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">worker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">worker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">worker</span><span class="w">
</span></span></span></code></pre></div><p>创建完成后，可以看到所有节点都是NotReady，这是因为我们没有装CNI</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mycni kubectl get no
</span></span><span class="line"><span class="cl">NAME                 STATUS     ROLES                  AGE   VERSION
</span></span><span class="line"><span class="cl">kind-control-plane   NotReady   control-plane,master   37s   v1.23.4
</span></span><span class="line"><span class="cl">kind-worker          NotReady   &lt;none&gt;                 18s   v1.23.4
</span></span><span class="line"><span class="cl">kind-worker2         NotReady   &lt;none&gt;                 18s   v1.23.4
</span></span><span class="line"><span class="cl">kind-worker3         NotReady   &lt;none&gt;                 18s   v1.23.4
</span></span></code></pre></div><p>接下编译我们的mycni镜像，通过<code>kind load docker-image</code>加载到集群中。</p>
<p>部署CNI插件，这里参考了Flannel的部署，主要是通过Daemonset在每个节点上部署一个Pod，初始化容器将mycni检查二进制文件拷贝到/opt/cni/bin，将配置文件拷贝到/etc/cni/net.d，再启动mycnid容器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubectl apply -f deploy/mycni.yaml
</span></span></code></pre></div><p>部署完成后，可以看到所有节点状态变为Ready。</p>
<p>最后测试Pod的网络配置情况，部署一个多副本Alpine Deployment</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create deployment cni-test --image<span class="o">=</span>alpine --replicas<span class="o">=</span><span class="m">6</span> -- top
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl get po -owide
</span></span><span class="line"><span class="cl">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE           NOMINATED NODE   READINESS GATES
</span></span><span class="line"><span class="cl">cni-test-5df744744c-5wthb   1/1     Running   <span class="m">0</span>          12s   10.244.2.3   kind-worker2   &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">cni-test-5df744744c-7cdll   1/1     Running   <span class="m">0</span>          12s   10.244.1.2   kind-worker    &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">cni-test-5df744744c-jssjk   1/1     Running   <span class="m">0</span>          12s   10.244.3.2   kind-worker3   &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">cni-test-5df744744c-jw6xv   1/1     Running   <span class="m">0</span>          12s   10.244.1.3   kind-worker    &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">cni-test-5df744744c-klbr4   1/1     Running   <span class="m">0</span>          12s   10.244.3.3   kind-worker3   &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">cni-test-5df744744c-w7q9t   1/1     Running   <span class="m">0</span>          12s   10.244.2.2   kind-worker2   &lt;none&gt;           &lt;none&gt;
</span></span></code></pre></div><p>所有Pod可以正常启动，首先测试Node与Pod的通信, 结果如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">root@kind-worker:/# ping 10.244.1.2
</span></span><span class="line"><span class="cl">PING 10.244.1.2 <span class="o">(</span>10.244.1.2<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.2: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.101 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.2: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.049 ms
</span></span><span class="line"><span class="cl">--- 10.244.1.2 ping statistics ---
</span></span></code></pre></div><p>同节点上的Pod通信：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~ kubectl <span class="nb">exec</span> cni-test-5df744744c-7cdll -- ping 10.244.1.3 -c <span class="m">4</span>
</span></span><span class="line"><span class="cl">PING 10.244.1.3 <span class="o">(</span>10.244.1.3<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.3: <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.118 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.3: <span class="nv">seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.077 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.3: <span class="nv">seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.082 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.3: <span class="nv">seq</span><span class="o">=</span><span class="m">3</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.085 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- 10.244.1.3 ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">4</span> packets transmitted, <span class="m">4</span> packets received, 0% packet loss
</span></span><span class="line"><span class="cl">round-trip min/avg/max <span class="o">=</span> 0.077/0.090/0.118 ms
</span></span></code></pre></div><p>不同节点的Pod通信</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> ~ kubectl <span class="nb">exec</span> cni-test-5df744744c-7cdll -- ping 10.244.2.2 -c <span class="m">4</span>
</span></span><span class="line"><span class="cl">PING 10.244.2.2 <span class="o">(</span>10.244.2.2<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.2.2: <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">62</span> <span class="nv">time</span><span class="o">=</span>0.298 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.2.2: <span class="nv">seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">62</span> <span class="nv">time</span><span class="o">=</span>0.234 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.2.2: <span class="nv">seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">62</span> <span class="nv">time</span><span class="o">=</span>0.180 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.2.2: <span class="nv">seq</span><span class="o">=</span><span class="m">3</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">62</span> <span class="nv">time</span><span class="o">=</span>0.234 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- 10.244.2.2 ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">4</span> packets transmitted, <span class="m">4</span> packets received, 0% packet loss
</span></span><span class="line"><span class="cl">round-trip min/avg/max <span class="o">=</span> 0.180/0.236/0.298 ms
</span></span></code></pre></div><p>Pod访问外网</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~ kubectl <span class="nb">exec</span> cni-test-5df744744c-7cdll -- ping www.baidu.com -c <span class="m">4</span>
</span></span><span class="line"><span class="cl">PING www.baidu.com <span class="o">(</span>103.235.46.39<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.39: <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">47</span> <span class="nv">time</span><span class="o">=</span>312.115 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.39: <span class="nv">seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">47</span> <span class="nv">time</span><span class="o">=</span>311.126 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.39: <span class="nv">seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">47</span> <span class="nv">time</span><span class="o">=</span>311.653 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.39: <span class="nv">seq</span><span class="o">=</span><span class="m">3</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">47</span> <span class="nv">time</span><span class="o">=</span>311.250 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- www.baidu.com ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">4</span> packets transmitted, <span class="m">4</span> packets received, 0% packet loss
</span></span><span class="line"><span class="cl">round-trip min/avg/max <span class="o">=</span> 311.126/311.536/312.115 ms
</span></span></code></pre></div><p>通过测试验证，我们实现的mycni满足k8s的CNI网络插件的要求，可以实现集群内所有Pod的通信，以及Node与Pod的通信，Pod也可以正常访问外网。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文首先介绍了CNI的架构，通过手动实现一个CNI网络插件，可以更加深入的了解CNI的工作原理以及Linux相关网络知识。</p>
<p>欢迎指正，所有代码见：</p>
<blockquote>
<p><a href="https://github.com/qingwave/mycni" target="_blank" rel="noopener noreffer">https://github.com/qingwave/mycni</a></p>
</blockquote>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ul>
<li><a href="https://www.cni.dev/docs/" target="_blank" rel="noopener noreffer">https://www.cni.dev/docs/</a></li>
<li><a href="https://ronaknathani.com/blog/2020/08/how-a-kubernetes-pod-gets-an-ip-address/" target="_blank" rel="noopener noreffer">https://ronaknathani.com/blog/2020/08/how-a-kubernetes-pod-gets-an-ip-address/</a></li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang Channel 妙用</title>
    <link>https://qingwave.github.io/golang-channel-awesome/</link>
    <pubDate>Wed, 23 Feb 2022 09:13:24 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-channel-awesome/</guid>
    <description><![CDATA[<p>Golang中通过我们使用Channel来传递信息、信号，经典的如生产者消费者、退出信号等, 那么除此之外Channel还有哪些不常见的用法。</p>
<h2 id="限制并发数" class="headerLink">
    <a href="#%e9%99%90%e5%88%b6%e5%b9%b6%e5%8f%91%e6%95%b0" class="header-mark"></a>限制并发数</h2><p>Golang原生提供了强大的并发原语，但如果无节制的使用大量Goroutine，并发过大会造成资源浪费，严重时会导致程序崩溃。使用带缓冲区的Channel可以解决此类问题。</p>
<p>在Golang的<a href="https://github.com/golang/tools/blob/master/godoc/vfs/gatefs/gatefs.go" target="_blank" rel="noopener noreffer">godoc/gatevfs</a>中实现了对最大虚拟文件的并发限制。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// New returns a new FileSystem that delegates to fs.
</span></span></span><span class="line"><span class="cl"><span class="c1">// If gateCh is non-nil and buffered, it&#39;s used as a gate
</span></span></span><span class="line"><span class="cl"><span class="c1">// to limit concurrency on calls to fs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">fs</span> <span class="nx">vfs</span><span class="p">.</span><span class="nx">FileSystem</span><span class="p">,</span> <span class="nx">gateCh</span> <span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span> <span class="nx">vfs</span><span class="p">.</span><span class="nx">FileSystem</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">cap</span><span class="p">(</span><span class="nx">gateCh</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fs</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">gatefs</span><span class="p">{</span><span class="nx">fs</span><span class="p">,</span> <span class="nf">gate</span><span class="p">(</span><span class="nx">gateCh</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">gate</span> <span class="kd">chan</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="nx">gate</span><span class="p">)</span> <span class="nf">enter</span><span class="p">()</span> <span class="p">{</span> <span class="nx">g</span> <span class="o">&lt;-</span> <span class="kc">true</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="nx">gate</span><span class="p">)</span> <span class="nf">leave</span><span class="p">()</span> <span class="p">{</span> <span class="o">&lt;-</span><span class="nx">g</span> <span class="p">}</span>
</span></span></code></pre></div><p>通过带缓存的Channel，每次打开文件时调用<code>enter</code>发生数据到Channel，当文件关闭时调用<code>leave</code>读取Channel数据，当前Channel满后再次读取变会阻塞，直到有资源被释放，从而达到限制并发数的目的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">fs</span> <span class="nx">gatefs</span><span class="p">)</span> <span class="nf">Open</span><span class="p">(</span><span class="nx">p</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">vfs</span><span class="p">.</span><span class="nx">ReadSeekCloser</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fs</span><span class="p">.</span><span class="nf">enter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">fs</span><span class="p">.</span><span class="nf">leave</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rsc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">fs</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">gatef</span><span class="p">{</span><span class="nx">rsc</span><span class="p">,</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">gate</span><span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>可以配合WaitGroup来实现最大并发数的控制，具体代码如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// control number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Gocontrol</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewGocontrol</span><span class="p">(</span><span class="nx">number</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">Gocontrol</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Gocontrol</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ch</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="nx">number</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">Gocontrol</span><span class="p">)</span> <span class="nf">Enter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">ch</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">Gocontrol</span><span class="p">)</span> <span class="nf">Leave</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">g</span><span class="p">.</span><span class="nx">ch</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">Gocontrol</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">f</span> <span class="kd">func</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nf">Enter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">g</span><span class="p">.</span><span class="nf">Leave</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">g</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nf">f</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">Gocontrol</span><span class="p">)</span> <span class="nf">Wait</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>测试运行，创建100个任务，调用<code>Gocontrol</code>限制最大并发为10，运行<code>runtime.NumGoroutine</code>来获取当前Goroutine数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">RunGocontrol</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;goroutine numbers: %v\n&#34;</span><span class="p">,</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">NumGoroutine</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">500</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">gctl</span> <span class="o">:=</span> <span class="nf">NewGocontrol</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gctl</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">gctl</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">dur</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">start</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;run time: %v&#34;</span><span class="p">,</span> <span class="nx">dur</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行结果显示，最大Goroutine数为12（包含1个主线程，1个监控线程，10个任务线程），符合预期</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">goroutine numbers: <span class="m">12</span>
</span></span><span class="line"><span class="cl">run time: 10.002604769s
</span></span></code></pre></div><h2 id="实现锁" class="headerLink">
    <a href="#%e5%ae%9e%e7%8e%b0%e9%94%81" class="header-mark"></a>实现锁</h2><p>除了调用sync包，使用Channel也可以实现锁，以互斥锁为例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ChLock</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewChLock</span><span class="p">()</span> <span class="nx">ChLock</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="nx">ChLock</span><span class="p">)</span> <span class="nf">Lock</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="nx">ChLock</span><span class="p">)</span> <span class="nf">Unlock</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">l</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>互斥锁通过容量为1的Channel实现互斥，同样借助多个Channel可以使用读写锁，通过关闭Channel可以实现类型Once的功能。</p>
<p>从源码层面分析，Channel其实是一个线程安全的环形队列，Channel定义在<a href="https://github.com/golang/go/blob/master/src/runtime/chan.go" target="_blank" rel="noopener noreffer">runtime/chan.go</a>中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">hchan</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">qcount</span>   <span class="kt">uint</span>           <span class="c1">// total data in the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">dataqsiz</span> <span class="kt">uint</span>           <span class="c1">// size of the circular queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">buf</span>      <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span> <span class="c1">// points to an array of dataqsiz elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">elemsize</span> <span class="kt">uint16</span>
</span></span><span class="line"><span class="cl">	<span class="nx">closed</span>   <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">elemtype</span> <span class="o">*</span><span class="nx">_type</span> <span class="c1">// element type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sendx</span>    <span class="kt">uint</span>   <span class="c1">// send index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">recvx</span>    <span class="kt">uint</span>   <span class="c1">// receive index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">recvq</span>    <span class="nx">waitq</span>  <span class="c1">// list of recv waiters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sendq</span>    <span class="nx">waitq</span>  <span class="c1">// list of send waiters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">lock</span> <span class="nx">mutex</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>其中包含了<code>lock</code>锁结构，这里的<code>mutex</code>不同于<code>sync.Mutex</code>，只在Runtime内部使用是一种低阶的同步原语，也没有提供Lock/Unlock方法，只能通过全局的lock/unlock/initlock等函数调用。</p>
<h2 id="最后" class="headerLink">
    <a href="#%e6%9c%80%e5%90%8e" class="header-mark"></a>最后</h2><p>本文介绍了一些Channel的妙用，限制并发数与实现锁等，通过示例及源码阐述其深层次的原因。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>]]></description>
</item><item>
    <title>Golang&#43;Vue轻松构建Web应用</title>
    <link>https://qingwave.github.io/golang-vue-starter/</link>
    <pubDate>Thu, 20 Jan 2022 02:33:38 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-vue-starter/</guid>
    <description><![CDATA[<p>最近疫情在家，空闲时间比较多，整理下之前写的Golang项目<a href="https://github.com/qingwave/weave" target="_blank" rel="noopener noreffer">Weave</a>，补充了一些功能，加了前端实现。作为一个Web应用模板，也算是功能比较齐全了，现将开发过程中遇到的一些问题、项目特性总结下。</p>
<h2 id="介绍" class="headerLink">
    <a href="#%e4%bb%8b%e7%bb%8d" class="header-mark"></a>介绍</h2><p>Weave是一个基于<code>Go+Vue</code>实现的Web应用模板，支持前后端，拥有完整的认证、存储、Restful API等功能。</p>
<p>后端基于Golang开发，主要特性如下：</p>
<ul>
<li>Restful API，通过<code>gin</code>实现，支持<code>swagger</code></li>
<li>MVC架构</li>
<li>支持Postgres存储，可以轻松替换为MySQL，使用<code>gorm</code>接入</li>
<li>Redis缓存</li>
<li>基于<code>JWT</code>认证</li>
<li>服务优雅终止</li>
<li>请求限速</li>
<li>Docker容器管理，<code>Websocket</code>支持</li>
<li>RBAC认证，由<code>Casbin</code>支持</li>
<li>其他支持<code>Prometheus</code>监控、格式化日志、<code>PProf</code>等</li>
</ul>
<p>前端基于<code>Vue</code>开发，使用<code>ElementPlus</code>组件库</p>
<ul>
<li>Vue3开发，使用组合式API</li>
<li>使用<code>vite</code>快速编译</li>
<li>支持<code>WebShell</code>，基于<code>xtermjs</code></li>
<li>图表功能，基于<code>echarts</code></li>
<li>支持<code>WindiCSS</code>，减少CSS编写</li>
</ul>
<p>主要界面如下：</p>
<ul>
<li>登录界面


</li>
<li>Dashboard界面


</li>
<li>应用界面


</li>
<li>WebShell界面


</li>
</ul>
<h2 id="项目结构" class="headerLink">
    <a href="#%e9%a1%b9%e7%9b%ae%e7%bb%93%e6%9e%84" class="header-mark"></a>项目结构</h2><p>项目组织如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">├── Dockerfile
</span></span><span class="line"><span class="cl">├── Makefile
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── bin
</span></span><span class="line"><span class="cl">├── config <span class="c1"># server配置</span>
</span></span><span class="line"><span class="cl">├── docs <span class="c1"># swagger 生成文件</span>
</span></span><span class="line"><span class="cl">├── document <span class="c1"># 文档</span>
</span></span><span class="line"><span class="cl">├── go.mod
</span></span><span class="line"><span class="cl">├── go.sum
</span></span><span class="line"><span class="cl">├── main.go <span class="c1"># server入口</span>
</span></span><span class="line"><span class="cl">├── pkg <span class="c1"># server业务代码</span>
</span></span><span class="line"><span class="cl">├── scripts <span class="c1"># 脚本</span>
</span></span><span class="line"><span class="cl">├── static <span class="c1"># 静态文件</span>
</span></span><span class="line"><span class="cl">└── web <span class="c1"># 前端目录</span>
</span></span></code></pre></div><h3 id="后端结构" class="headerLink">
    <a href="#%e5%90%8e%e7%ab%af%e7%bb%93%e6%9e%84" class="header-mark"></a>后端结构</h3><p>后端按照<code>MVC</code>架构实现，参考了社区一些最佳实践，具体如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">├── pkg
</span></span><span class="line"><span class="cl">│   ├── common <span class="c1"># 通用包</span>
</span></span><span class="line"><span class="cl">│   ├── config <span class="c1"># 配置相关</span>
</span></span><span class="line"><span class="cl">│   ├── container <span class="c1"># 容器库</span>
</span></span><span class="line"><span class="cl">│   ├── controller <span class="c1"># 控制器层，处理HTTP请求</span>
</span></span><span class="line"><span class="cl">│   ├── database <span class="c1"># 数据库初始化，封装</span>
</span></span><span class="line"><span class="cl">│   ├── metrics <span class="c1"># 监控相关</span>
</span></span><span class="line"><span class="cl">│   ├── middleware <span class="c1"># http中间件</span>
</span></span><span class="line"><span class="cl">│   ├── model <span class="c1"># 模型层</span>
</span></span><span class="line"><span class="cl">│   ├── repository <span class="c1"># 存储层，数据持久化</span>
</span></span><span class="line"><span class="cl">│   ├── server <span class="c1"># server入口，创建router</span>
</span></span><span class="line"><span class="cl">│   └── service <span class="c1"># 逻辑层，处理业务</span>
</span></span></code></pre></div><h3 id="前端结构" class="headerLink">
    <a href="#%e5%89%8d%e7%ab%af%e7%bb%93%e6%9e%84" class="header-mark"></a>前端结构</h3><p>前端实现<code>Vue3</code>实现，与一般Vue项目类似</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">web
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── index.html
</span></span><span class="line"><span class="cl">├── node_modules
</span></span><span class="line"><span class="cl">├── package-lock.json
</span></span><span class="line"><span class="cl">├── package.json
</span></span><span class="line"><span class="cl">├── public
</span></span><span class="line"><span class="cl">│   └── favicon.ico
</span></span><span class="line"><span class="cl">├── src <span class="c1"># 所有代码位于src</span>
</span></span><span class="line"><span class="cl">│   ├── App.vue <span class="c1"># Vue项目入口</span>
</span></span><span class="line"><span class="cl">│   ├── assets <span class="c1"># 静态文件</span>
</span></span><span class="line"><span class="cl">│   ├── axios <span class="c1"># http请求封装</span>
</span></span><span class="line"><span class="cl">│   ├── components <span class="c1"># Vue组件</span>
</span></span><span class="line"><span class="cl">│   ├── main.js
</span></span><span class="line"><span class="cl">│   ├── router <span class="c1"># 路由</span>
</span></span><span class="line"><span class="cl">│   ├── utils <span class="c1"># 工具包</span>
</span></span><span class="line"><span class="cl">│   └── views <span class="c1"># 所有页面</span>
</span></span><span class="line"><span class="cl">└── vite.config.js <span class="c1"># vite配置</span>
</span></span></code></pre></div><h2 id="一些细节" class="headerLink">
    <a href="#%e4%b8%80%e4%ba%9b%e7%bb%86%e8%8a%82" class="header-mark"></a>一些细节</h2><h3 id="为什么使用jwt" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bd%bf%e7%94%a8jwt" class="header-mark"></a>为什么使用JWT</h3><p>主要是为了方便服务横向扩展，如果基于<code>Cookie+Session</code>，<code>Session</code>只能保存在服务端，无法进行负载均衡。另外通过api访问，jwt可以放在HTTP Header的<code>Bearer Token</code>中。</p>
<p>当使用Websocket时，不支持HTTP Header，由于认证统一在中间件中进行，可以通过简单通过<code>cookie</code>存储，也可以单独为Websocket配置认证。</p>
<p>JWT不支持取消，可以通过在redis存入黑名单实现。</p>
<h3 id="缓存实现" class="headerLink">
    <a href="#%e7%bc%93%e5%ad%98%e5%ae%9e%e7%8e%b0" class="header-mark"></a>缓存实现</h3><p>加入了缓存便引入了数据一致性问题，经典的解决办法是先写数据库再写缓存（Cache-Aside模式），实现最终一致性，业务简单的项目可以使用这种方法。</p>
<p>那先写缓存行不行？如果同时有一个写请求一读请求，写请求会先删除缓存，读请求缓慢未命中会将DB中的旧数据载入，可能会造成数据不一致。先写数据库则不会有这样的问题，如果要实现先写缓存，可以使用双删的办法，即写前后分别操作一次缓存，这样处理逻辑会更复杂。如果不想侵入业务代码，可以通过监听Binlog来异步更新缓存。</p>
<h3 id="请求限流" class="headerLink">
    <a href="#%e8%af%b7%e6%b1%82%e9%99%90%e6%b5%81" class="header-mark"></a>请求限流</h3><p>限流使用了<code>golang.org/x/time/rate</code>提供的令牌桶算法，以应对突发流量，可以对单个IP以及Server层面实现请求控制。</p>
<p>需要特别注意的是限流应当区别长连接与短连接，比如<code>Weave</code>中实现了容器<code>exec</code>接口，通过Websocket登录到容器，不应该影响其他正常请求。</p>
<h3 id="从零开发前端" class="headerLink">
    <a href="#%e4%bb%8e%e9%9b%b6%e5%bc%80%e5%8f%91%e5%89%8d%e7%ab%af" class="header-mark"></a>从零开发前端</h3><p>前端而言完全是毫无经验，选用了<code>Vue3</code>，主要是文档比较全面适合新手。UI基于了<code>ElementPlus</code>，目前还是Beta版本，使用过程了也遇到了一些Bug，生产过程中不建议用，无奈的是目前<code>Vue3</code>好像也没有比较成熟的UI库。</p>
<p>Vue文档以及示例很详细，上手也挺快。主要是CCS不熟悉，调整样式上花了不少功夫，后来引入了<a href="https://windicss.org/" target="_blank" rel="noopener noreffer">WindiCSS</a>, 只编写了少量的样式，其他全部依赖WindiCSS实现。其他路由、请求、图表参考对应的文档实现起来也很容易。</p>
<p>搭建了一个比较完整的管理平台，自己还是挺满意的，后面会不断优化，加一些其他特性。</p>
<h2 id="运行" class="headerLink">
    <a href="#%e8%bf%90%e8%a1%8c" class="header-mark"></a>运行</h2><p>后端本地运行，需要依赖Docker，Makefile文件只在Linux下有效，其他平台请自行尝试</p>
<ol>
<li>安装数据库postgres与redis，初始化库</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make init
</span></span></code></pre></div><ol start="2">
<li>本地运行</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make run
</span></span></code></pre></div><p>前端使用<code>vite</code>编译</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> web
</span></span><span class="line"><span class="cl">npm i
</span></span><span class="line"><span class="cl">npm run dev
</span></span></code></pre></div><p>更多见<a href="https://github.com/qingwave/weave#readme" target="_blank" rel="noopener noreffer">ReadMe</a></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文总结了<code>Weave</code>的架构与特性，以及开发过程中遇到的一些问题，从零开始实现一个完整的前后端Web应用，其他功能后面会不断优化。</p>
<p>项目链接见</p>
<ul>
<li><a href="https://github.com/qingwave/weave" target="_blank" rel="noopener noreffer">https://github.com/qingwave/weave</a></li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>K8S中为什么需要Unstructured对象</title>
    <link>https://qingwave.github.io/k8s-unstructured-object/</link>
    <pubDate>Wed, 15 Dec 2021 15:33:54 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/k8s-unstructured-object/</guid>
    <description><![CDATA[<p>熟悉client-go的同学都知道，不止有<code>Deployment</code>、<code>Pod</code>这些结构化对象，也提供了<code>unstructured.Unstructured</code>对象，那么为什么需要非结构对象？</p>
<h2 id="structured-vs-unstructured" class="headerLink">
    <a href="#structured-vs-unstructured" class="header-mark"></a>Structured vs Unstructured</h2><p>结构化对象是指可以用Go Struct表示的对象，比如<a href="https://pkg.go.dev/k8s.io/api/apps/v1#Deployment" target="_blank" rel="noopener noreffer">Deployment</a>在<code>k8s.io/api/apps/v1</code>定义</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Deployment</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="s">`json:&#34;,inline&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Standard object&#39;s metadata.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span> <span class="s">`json:&#34;metadata,omitempty&#34; protobuf:&#34;bytes,1,opt,name=metadata&#34;`</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们可以直接通过<code>appsv1.Deployment</code>来安全地定义<code>Deployment</code>的各个字段，通常创建过程如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">clientset</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">deployment</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">deployment</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="s">&#34;example&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">deployment</span><span class="p">.</span><span class="nx">Spec</span> <span class="p">=</span> <span class="nx">appsv1</span><span class="p">.</span><span class="nx">DeploymentSpec</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">clientset</span><span class="p">.</span><span class="nf">AppsV1</span><span class="p">().</span><span class="nf">Deployments</span><span class="p">(</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">NamespaceDefault</span><span class="p">).</span><span class="nf">Create</span><span class="p">(</span><span class="nx">deployment</span><span class="p">)</span>
</span></span></code></pre></div><p>而对于<code>Unstructured</code>定义在<code>k8s.io/apimachinery/pkg/apis/meta/v1/unstructured</code>中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Unstructured</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Object is a JSON compatible map with string, float, int, bool, []interface{}, or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// map[string]interface{}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// children.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Object</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过定义<code>map[string]interface{}</code>可以来表示任意的<code>JSON/YAML</code>对象，而不需要引用<code>Go Struct</code>。可以通过<code>Dynamic client</code>来创建非结构化对象，以下是使用<code>Unstructured</code>创建Deployment的样例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">client</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">dynamic</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">deploymentRes</span> <span class="o">:=</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionResource</span><span class="p">{</span><span class="nx">Group</span><span class="p">:</span> <span class="s">&#34;apps&#34;</span><span class="p">,</span> <span class="nx">Version</span><span class="p">:</span> <span class="s">&#34;v1&#34;</span><span class="p">,</span> <span class="nx">Resource</span><span class="p">:</span> <span class="s">&#34;deployments&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">deployment</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Object</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s">&#34;apps/v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;kind&#34;</span><span class="p">:</span>       <span class="s">&#34;Deployment&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;metadata&#34;</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;demo-deployment&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;spec&#34;</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;replicas&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="o">...</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">client</span><span class="p">.</span><span class="nf">Resource</span><span class="p">(</span><span class="nx">deploymentRes</span><span class="p">).</span><span class="nf">Namespace</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Create</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">deployment</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">{})</span>
</span></span></code></pre></div><h2 id="why" class="headerLink">
    <a href="#why" class="header-mark"></a>Why</h2><p>那么什么情况下需要使用到<code>Unstructured</code>对象呢，结构化对象有着安全地类型校验，通过<code>clientset</code>可以方便地增删改查。而非结构化对象只能手动设置<code>GVR</code>、通过<code>map[string]interface{}</code>设置各个字段。</p>
<p>假想你作为一个Paas平台的开发者，需要为每个用户传入的<code>YAML/JSON</code>资源添加label，比如添加user信息<code>creator=xxx</code>。如果用户只能创建Deployment，那么我们可以将资源解析成<code>appsv1.Deployment{}</code>对象，再添加label。但是通常会传入多种资源，不仅有内置的<code>Deployment</code>、<code>Service</code>等，也可能会包含自定义资源。由于不确定资源类型，我们只能通过<code>Unstructured</code>对象来解析。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">manifest</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: apps/v1
</span></span></span><span class="line"><span class="cl"><span class="s">kind: Deployment
</span></span></span><span class="line"><span class="cl"><span class="s">metadata:
</span></span></span><span class="line"><span class="cl"><span class="s">  name: example
</span></span></span><span class="line"><span class="cl"><span class="s">spec:
</span></span></span><span class="line"><span class="cl"><span class="s">  ...
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl"><span class="c1">// convert yaml to unstructured
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">obj</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">dec</span> <span class="o">:=</span> <span class="nx">yaml</span><span class="p">.</span><span class="nf">NewDecodingSerializer</span><span class="p">(</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">UnstructuredJSONScheme</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">dec</span><span class="p">.</span><span class="nf">Decode</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">manifest</span><span class="p">),</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// add label
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">labels</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.</span><span class="nf">GetLabels</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">labels</span><span class="p">[</span><span class="s">&#34;creator&#34;</span><span class="p">]=</span><span class="s">&#34;userxxx&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// set label
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nf">SetLabels</span><span class="p">(</span><span class="nx">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">dynamicClient</span><span class="p">.</span><span class="nf">Resource</span><span class="p">().</span><span class="nf">Namespace</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Create</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">obj</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">{})</span>
</span></span></code></pre></div><p>当实现对多种资源的通用处理（上面的示例），或者运行时才能确定的对象（例如根据配置监听不同对象），又或者不愿引入额外的依赖（处理大量的CRD），可以使用<code>Unstructured</code>对象来处理以上情况。</p>
<h2 id="how" class="headerLink">
    <a href="#how" class="header-mark"></a>How</h2><p>不管是结构化对象还是非结构化，最终会调用k8s的Rest API，例如<code>Create Deployment</code>时</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">POST /apis/apps/v1/namespaces/{namespace}/deployments/{name}
</span></span></code></pre></div><p>K8s中<code>GVR</code>(GroupVersionResource)可以唯一表征资源对象，用来组成Rest API, 如上Group为apps、Version为v1、Resource是<code>deployments</code>；<code>GVK</code>(GroupVersionKind)可以来标识类型（如Deployment）。Resource与Kind的对应关系可以通过<code>kubectl api-resources</code>查看。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~ kubectl api-resources --api-group apps
</span></span><span class="line"><span class="cl">NAME                  SHORTNAMES   APIVERSION   NAMESPACED   KIND
</span></span><span class="line"><span class="cl">controllerrevisions                apps/v1      <span class="nb">true</span>         ControllerRevision
</span></span><span class="line"><span class="cl">daemonsets            ds           apps/v1      <span class="nb">true</span>         DaemonSet
</span></span><span class="line"><span class="cl">deployments           deploy       apps/v1      <span class="nb">true</span>         Deployment
</span></span><span class="line"><span class="cl">replicasets           rs           apps/v1      <span class="nb">true</span>         ReplicaSet
</span></span><span class="line"><span class="cl">statefulsets          sts          apps/v1      <span class="nb">true</span>         StatefulSet
</span></span></code></pre></div><p>对于结构化对象，使用<code>clientset</code>可以获取到<code>GVR</code>，最后调用<code>restClient</code>组成到Rest API</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">clientset</span><span class="p">.</span><span class="nf">AppsV1</span><span class="p">().</span><span class="nf">Deployments</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Create</span><span class="p">(</span><span class="nx">deployment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Create takes the representation of a deployment and creates it.  Returns the server&#39;s representation of the deployment, and an error, if there is any.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">deployments</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">deployment</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">,</span> <span class="nx">opts</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">)</span> <span class="p">(</span><span class="nx">result</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">result</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Post</span><span class="p">().</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Namespace</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">ns</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Resource</span><span class="p">(</span><span class="s">&#34;deployments&#34;</span><span class="p">).</span> <span class="c1">// Resource设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nf">VersionedParams</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">.</span><span class="nx">ParameterCodec</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Body</span><span class="p">(</span><span class="nx">deployment</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Do</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Into</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>对于非结构化对象，需要用户手动填充<code>GVR</code>，如果只知道<code>GVK</code>可以通过<code>restMapping</code>获取</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">deploymentRes</span> <span class="o">:=</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionResource</span><span class="p">{</span><span class="nx">Group</span><span class="p">:</span> <span class="s">&#34;apps&#34;</span><span class="p">,</span> <span class="nx">Version</span><span class="p">:</span> <span class="s">&#34;v1&#34;</span><span class="p">,</span> <span class="nx">Resource</span><span class="p">:</span> <span class="s">&#34;deployments&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">dynamicClient</span><span class="p">.</span><span class="nf">Resource</span><span class="p">().</span><span class="nf">Namespace</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Create</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Create具体实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">dynamicResourceClient</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">obj</span> <span class="o">*</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">,</span> <span class="nx">opts</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">,</span> <span class="nx">subresources</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">outBytes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">Encode</span><span class="p">(</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">UnstructuredJSONScheme</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">subresources</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">accessor</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">meta</span><span class="p">.</span><span class="nf">Accessor</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span> <span class="p">=</span> <span class="nx">accessor</span><span class="p">.</span><span class="nf">GetName</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 调用restClient
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Post</span><span class="p">().</span>
</span></span><span class="line"><span class="cl">		<span class="nf">AbsPath</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nf">makeURLSegments</span><span class="p">(</span><span class="nx">name</span><span class="p">),</span> <span class="nx">subresources</span><span class="o">...</span><span class="p">)</span><span class="o">...</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Body</span><span class="p">(</span><span class="nx">outBytes</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">SpecificallyVersionedParams</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">dynamicParameterCodec</span><span class="p">,</span> <span class="nx">versionV1</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Do</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文描述Unstructured对象在K8s中的使用场景、使用方式，与Structured对象的对比，以及相关代码解析。</p>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ul>
<li><a href="https://kubernetes.io/zh/docs/reference/using-api/api-concepts/" target="_blank" rel="noopener noreffer">https://kubernetes.io/zh/docs/reference/using-api/api-concepts/</a></li>
</ul>
]]></description>
</item><item>
    <title>Kubernetes调试利器Nsenter</title>
    <link>https://qingwave.github.io/k8s-debug-nsenter/</link>
    <pubDate>Fri, 12 Nov 2021 09:17:35 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-debug-nsenter/</guid>
    <description><![CDATA[<p>在k8s云环境中，我们需要在容器内抓包进行Debug, 但通常大多容器都没有安装tcpdump以及其他网络工具；在托管k8s中我们想登录node，不是没权限就是步骤太麻烦。本文的主角<code>nsenter</code>正是很擅长解决这些问题，<code>nsenter</code>可以进入指定<code>namespace</code>的工具，一般用来在容器环境中进行调试。</p>
<h2 id="调试容器网络" class="headerLink">
    <a href="#%e8%b0%83%e8%af%95%e5%ae%b9%e5%99%a8%e7%bd%91%e7%bb%9c" class="header-mark"></a>调试容器网络</h2><p>通过<code>nsenter</code>可以轻松在宿主机进入容器的网络命令空间，命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 设置containerid</span>
</span></span><span class="line"><span class="cl"><span class="nv">containerid</span><span class="o">=</span>xxx 
</span></span><span class="line"><span class="cl"><span class="c1"># 获取容器主进程</span>
</span></span><span class="line"><span class="cl"><span class="nv">pid</span><span class="o">=</span><span class="k">$(</span>docker inspect -f <span class="o">{{</span>.State.Pid<span class="o">}}</span> <span class="nv">$containerid</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 进入容器networker namespace</span>
</span></span><span class="line"><span class="cl">nsenter -n --target <span class="nv">$pid</span>
</span></span></code></pre></div><p>之后便可以使用宿主机各种工具<code>tcpdump</code>, <code>netstat</code>等命令</p>
<h2 id="登录k8s节点" class="headerLink">
    <a href="#%e7%99%bb%e5%bd%95k8s%e8%8a%82%e7%82%b9" class="header-mark"></a>登录k8s节点</h2><p>如果只有<code>Apiserver</code>权限，登录k8s节点也可以使用<code>nsenter</code></p>
<p>临时登录某个节点可以使用如下脚本:</p>
<blockquote>
<p>前提是需要拥有一些特殊权限<code>privileded</code>，<code>hostPID</code>等</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">node</span><span class="o">=</span>xxx
</span></span><span class="line"><span class="cl"><span class="nv">cmd</span><span class="o">=</span><span class="s1">&#39;[ &#34;nsenter&#34;, &#34;--target&#34;, &#34;1&#34;, &#34;--mount&#34;, &#34;--uts&#34;, &#34;--ipc&#34;, &#34;--net&#34;, &#34;--pid&#34;, &#34;--&#34;]&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">overrides</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOT
</span></span></span><span class="line"><span class="cl"><span class="s">{
</span></span></span><span class="line"><span class="cl"><span class="s">  &#34;spec&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;nodeName&#34;: &#34;$node&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;hostPID&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;hostNetwork&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;containers&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="s">      {
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;securityContext&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s">          &#34;privileged&#34;: true
</span></span></span><span class="line"><span class="cl"><span class="s">        },
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;image&#34;: &#34;alpine&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;name&#34;: &#34;nsenter&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;stdin&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;stdinOnce&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;tty&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;command&#34;: $cmd
</span></span></span><span class="line"><span class="cl"><span class="s">      }
</span></span></span><span class="line"><span class="cl"><span class="s">    ],
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;tolerations&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="s">      {
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;operator&#34;: &#34;Exists&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">      }
</span></span></span><span class="line"><span class="cl"><span class="s">    ]
</span></span></span><span class="line"><span class="cl"><span class="s">  }
</span></span></span><span class="line"><span class="cl"><span class="s">}
</span></span></span><span class="line"><span class="cl"><span class="s">EOT</span>
</span></span><span class="line"><span class="cl"><span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">pod</span><span class="o">=</span><span class="s2">&#34;kube-nodeshell-</span><span class="k">$(</span>env <span class="nv">LC_ALL</span><span class="o">=</span>C tr -dc a-z0-9 &lt;/dev/urandom <span class="p">|</span> head -c 6<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">kubectl run --image<span class="o">=</span>alpine --restart<span class="o">=</span>Never --rm --overrides<span class="o">=</span><span class="s2">&#34;</span><span class="nv">$overrides</span><span class="s2">&#34;</span> -it <span class="nv">$pod</span>
</span></span></code></pre></div><p>原理是通过共享pid方式<code>hostPID=true</code>，在容器中看到宿主机的所有进程，然后使用<code>nsenter</code>进入宿主机1号进程（宿主机根进程）的<code>mount、uts、ipc、net、pid</code>等namespace，从而可以获取类似宿主机的shell。</p>
<p>如果需要经常使用，可以部署个<code>DaemonSet</code>，使用时登录对应节点的pod即可（建议只在测试环境使用，具有一定风险）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">DaemonSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tolerations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Exists&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">nsenter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">target</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="s2">&#34;1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">mount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">uts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">ipc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">net</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">pid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">sleep</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">infinity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">privileged</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostIPC</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostPID</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostNetwork</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">priorityClassName</span><span class="p">:</span><span class="w"> </span><span class="l">system-node-critical</span><span class="w">
</span></span></span></code></pre></div><p>本文所有文件见<a href="https://github.com/qingwave/kube-nodeshell" target="_blank" rel="noopener noreffer">kube-nodeshell</a></p>
<h2 id="临时容器" class="headerLink">
    <a href="#%e4%b8%b4%e6%97%b6%e5%ae%b9%e5%99%a8" class="header-mark"></a>临时容器</h2><p>kubernetes 1.18之后启用了临时容器，用户可以通过<code>kubectl debug</code>命令来添加临时容器到pod，也可以登录到node shell，一些简单的调试工作可以使用这种方法， 见<a href="https://kubernetes.io/zh/docs/tasks/debug-application-cluster/debug-running-pod/" target="_blank" rel="noopener noreffer">调试运行中的Pod</a>。</p>
<p>对比<code>nsenter</code>方法，<code>kubectl debug</code>通过shell登录节点时只是共享了<code>pid</code>、<code>hostNetwork</code>，<code>nsenter</code>则更灵活可以使用宿主机的相关工具以及执行特权操作。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://man7.org/linux/man-pages/man1/nsenter.1.html" target="_blank" rel="noopener noreffer">https://man7.org/linux/man-pages/man1/nsenter.1.html</a></li>
<li><a href="https://github.com/kvaps/kubectl-node-shell" target="_blank" rel="noopener noreffer">https://github.com/kvaps/kubectl-node-shell</a></li>
<li><a href="https://kubernetes.io/zh/docs/tasks/debug-application-cluster/debug-running-pod/" target="_blank" rel="noopener noreffer">https://kubernetes.io/zh/docs/tasks/debug-application-cluster/debug-running-pod/</a></li>
</ul>]]></description>
</item><item>
    <title>ClusterAutoScaler无法从零扩容</title>
    <link>https://qingwave.github.io/k8s-clusterautoscaler-from-zero-issue/</link>
    <pubDate>Mon, 08 Nov 2021 09:17:48 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-clusterautoscaler-from-zero-issue/</guid>
    <description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>最近在AWS k8s集群部署一个多AZ应用时，发现<code>cluster-autoscaler</code>无法正常<code>scale up</code>。</p>
<p>通过反复测试发现，当<code>NodeGroup</code>的初始容量为0时（<code>minSize=0</code>）无法扩容，报错信息如下，当<code>NodeGrop</code>初始容量为1时（<code>minSize=1</code>）可以正常扩容。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Normal   NotTriggerScaleUp  18m                   cluster-autoscaler  pod didn&#39;t trigger scale-up (it wouldn&#39;t fit if a new node is added): 3 Insufficient cpu, 1 node(s) didn&#39;t match node selector, 1 max node group size reached, 12 Insufficient memory, 1 node(s) didn&#39;t match pod affinity/anti-affinity, 1 node(s) didn&#39;t match pod anti-affinity rules, 3 node(s) had taint, that the pod didn&#39;t tolerate
</span></span></code></pre></div><p>这个现象很有意思，跟着代码查看下究竟是哪里出问题了。</p>
<h2 id="探究" class="headerLink">
    <a href="#%e6%8e%a2%e7%a9%b6" class="header-mark"></a>探究</h2><p><code>ClusterAutoScaler</code>主要扩容逻辑如下：</p>
<ul>
<li>定期获取（默认10s）所有<code>Pending</code> Pod，过滤出由于资源不足调度失败的Pod</li>
<li>根据<code>NodeGroup</code>生成新Node模拟调度，如果可以调度则将新节点加入集群</li>
</ul>
<p>根据现象猜测与生成<code>NodeTemplate</code>有关，否则不会造成两次情况调度结果不一致。
主要代码位于<a href="https://github.com/kubernetes/autoscaler/blob/cluster-autoscaler-release-1.21/cluster-autoscaler/core/utils/utils.go#L42" target="_blank" rel="noopener noreffer">utils.go#L42</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// nodes 指当前集群中所有node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">GetNodeInfosForGroups</span><span class="p">(</span><span class="nx">nodes</span> <span class="p">[]</span><span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Node</span><span class="p">,</span> <span class="nx">nodeInfoCache</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="nx">cloudProvider</span> <span class="nx">cloudprovider</span><span class="p">.</span><span class="nx">CloudProvider</span><span class="p">,</span> <span class="nx">listers</span> <span class="nx">kube_util</span><span class="p">.</span><span class="nx">ListerRegistry</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">daemonsets</span> <span class="p">[]</span><span class="o">*</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">DaemonSet</span><span class="p">,</span> <span class="nx">predicateChecker</span> <span class="nx">simulator</span><span class="p">.</span><span class="nx">PredicateChecker</span><span class="p">,</span> <span class="nx">ignoredTaints</span> <span class="nx">taints</span><span class="p">.</span><span class="nx">TaintKeySet</span><span class="p">)</span> <span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">AutoscalerError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">seenGroups</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">// 构建node与pod的映射 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">podsForNodes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getPodsForNodes</span><span class="p">(</span><span class="nx">listers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">{},</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// processNode returns information whether the nodeTemplate was generated and if there was an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// processNode 函数通过提供的node生成node模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">processNode</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">node</span> <span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Node</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">AutoscalerError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodeGroup</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cloudProvider</span><span class="p">.</span><span class="nf">NodeGroupForNode</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">CloudProviderError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">nodeGroup</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="nx">nodeGroup</span><span class="p">).</span><span class="nf">IsNil</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">nodeGroup</span><span class="p">.</span><span class="nf">Id</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// nodeGroup id不存在则将其添加到result中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">found</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span> <span class="p">!</span><span class="nx">found</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Build nodeInfo.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// 根据当前node生成模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">nodeInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">simulator</span><span class="p">.</span><span class="nf">BuildNodeInfoForNode</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">podsForNodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">sanitizedNodeInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">sanitizeNodeInfo</span><span class="p">(</span><span class="nx">nodeInfo</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">ignoredTaints</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="nx">sanitizedNodeInfo</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 遍历所有node，如果通过node能获取到对应nodeGroup的模板，则添加到nodeInfoCache中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">node</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Broken nodes might have some stuff missing. Skipping.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">kube_util</span><span class="p">.</span><span class="nf">IsNodeReadyAndSchedulable</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">added</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">typedErr</span> <span class="o">:=</span> <span class="nf">processNode</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">typedErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">{},</span> <span class="nx">typedErr</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">added</span> <span class="o">&amp;&amp;</span> <span class="nx">nodeInfoCache</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">nodeInfoCopy</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">deepCopyNodeInfo</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">]);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">nodeInfoCache</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nodeInfoCopy</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//如果不在cahce中，则通过nodeGroup生成模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">nodeGroup</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">cloudProvider</span><span class="p">.</span><span class="nf">NodeGroups</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">nodeGroup</span><span class="p">.</span><span class="nf">Id</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">seenGroups</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">found</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span> <span class="nx">found</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// No good template, check cache of previously running nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">nodeInfoCache</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">nodeInfo</span><span class="p">,</span> <span class="nx">found</span> <span class="o">:=</span> <span class="nx">nodeInfoCache</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span> <span class="nx">found</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">nodeInfoCopy</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">deepCopyNodeInfo</span><span class="p">(</span><span class="nx">nodeInfo</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nodeInfoCopy</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// No good template, trying to generate one. This is called only if there are no
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// working nodes in the node groups. By default CA tries to use a real-world example.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">nodeInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">GetNodeInfoFromTemplate</span><span class="p">(</span><span class="nx">nodeGroup</span><span class="p">,</span> <span class="nx">daemonsets</span><span class="p">,</span> <span class="nx">predicateChecker</span><span class="p">,</span> <span class="nx">ignoredTaints</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">cloudprovider</span><span class="p">.</span><span class="nx">ErrNotImplemented</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Unable to build proper template node for %s: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">{},</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">CloudProviderError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nodeInfo</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Remove invalid node groups from cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">id</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodeInfoCache</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">seenGroups</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">delete</span><span class="p">(</span><span class="nx">nodeInfoCache</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 处理unready/unschedulable的节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">node</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Allowing broken nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">kube_util</span><span class="p">.</span><span class="nf">IsNodeReadyAndSchedulable</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">added</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">typedErr</span> <span class="o">:=</span> <span class="nf">processNode</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">typedErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">{},</span> <span class="nx">typedErr</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">nodeGroup</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cloudProvider</span><span class="p">.</span><span class="nf">NodeGroupForNode</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">{},</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">					<span class="nx">errors</span><span class="p">.</span><span class="nx">CloudProviderError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">added</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;Built template for %s based on unready/unschedulable node %s&#34;</span><span class="p">,</span> <span class="nx">nodeGroup</span><span class="p">.</span><span class="nf">Id</span><span class="p">(),</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>方法<code>GetNodeInfosForGroups</code>生成模板的主要逻辑如下：</p>
<ul>
<li>遍历集群中所有节点，节点有对应<code>nodeGroup</code>，则根据节点生成模板</li>
<li>其他<code>nodeGroup</code>则根据<code>nodeGroup</code>配置与<code>daemonset</code>信息生成模板</li>
</ul>
<p>节点存在<code>nodeGroup</code>则根据<code>sanitizeNodeInfo</code>方法生成模板</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BuildNodeInfoForNode</span><span class="p">(</span><span class="nx">node</span> <span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Node</span><span class="p">,</span> <span class="nx">podsForNodes</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">AutoscalerError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取当前节点daemonset与mirror pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">requiredPods</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getRequiredPodsForNode</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">podsForNodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 生成node模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span> <span class="o">:=</span> <span class="nx">schedulerframework</span><span class="p">.</span><span class="nf">NewNodeInfo</span><span class="p">(</span><span class="nx">requiredPods</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">.</span><span class="nf">SetNode</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">InternalError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">filterRequiredPodsForNode</span><span class="p">(</span><span class="nx">allPods</span> <span class="p">[]</span><span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">[]</span><span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Pod</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">selectedPods</span> <span class="p">[]</span><span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Pod</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">allPods</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Ignore pod in deletion phase
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">DeletionTimestamp</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">pod_util</span><span class="p">.</span><span class="nf">IsMirrorPod</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span> <span class="o">||</span> <span class="nx">pod_util</span><span class="p">.</span><span class="nf">IsDaemonSetPod</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">selectedPods</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">selectedPods</span><span class="p">,</span> <span class="nx">allPods</span><span class="p">[</span><span class="nx">id</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">selectedPods</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>根据nodeGroup生成模板调用<code>GetNodeInfoFromTemplate</code>方法，首先获取noGroup模板信息，再将daemonset pod信息加入node</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">GetNodeInfoFromTemplate</span><span class="p">(</span><span class="nx">nodeGroup</span> <span class="nx">cloudprovider</span><span class="p">.</span><span class="nx">NodeGroup</span><span class="p">,</span> <span class="nx">daemonsets</span> <span class="p">[]</span><span class="o">*</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">DaemonSet</span><span class="p">,</span> <span class="nx">predicateChecker</span> <span class="nx">simulator</span><span class="p">.</span><span class="nx">PredicateChecker</span><span class="p">,</span> <span class="nx">ignoredTaints</span> <span class="nx">taints</span><span class="p">.</span><span class="nx">TaintKeySet</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">AutoscalerError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span> <span class="o">:=</span> <span class="nx">nodeGroup</span><span class="p">.</span><span class="nf">Id</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">baseNodeInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">nodeGroup</span><span class="p">.</span><span class="nf">TemplateNodeInfo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">CloudProviderError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">pods</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">daemonset</span><span class="p">.</span><span class="nf">GetDaemonSetPodsForNode</span><span class="p">(</span><span class="nx">baseNodeInfo</span><span class="p">,</span> <span class="nx">daemonsets</span><span class="p">,</span> <span class="nx">predicateChecker</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">InternalError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">podInfo</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">baseNodeInfo</span><span class="p">.</span><span class="nx">Pods</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pods</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">pods</span><span class="p">,</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fullNodeInfo</span> <span class="o">:=</span> <span class="nx">schedulerframework</span><span class="p">.</span><span class="nf">NewNodeInfo</span><span class="p">(</span><span class="nx">pods</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fullNodeInfo</span><span class="p">.</span><span class="nf">SetNode</span><span class="p">(</span><span class="nx">baseNodeInfo</span><span class="p">.</span><span class="nf">Node</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sanitizedNodeInfo</span><span class="p">,</span> <span class="nx">typedErr</span> <span class="o">:=</span> <span class="nf">sanitizeNodeInfo</span><span class="p">(</span><span class="nx">fullNodeInfo</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">ignoredTaints</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">typedErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">typedErr</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">sanitizedNodeInfo</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>其中<code>nodeGroup.TemplateNodeInfo</code>方法是每个云供应商提供的，<code>AWS</code>相关代码位于<a href="https://github.com/kubernetes/autoscaler/blob/55476293b3cb1e37e33680cefe01e7b34170a712/cluster-autoscaler/cloudprovider/aws/aws_cloud_provider.go#L100" target="_blank" rel="noopener noreffer">aws_cloud_provider.go#L100</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// TemplateNodeInfo returns a node template for this node group.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ng</span> <span class="o">*</span><span class="nx">AwsNodeGroup</span><span class="p">)</span> <span class="nf">TemplateNodeInfo</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">template</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ng</span><span class="p">.</span><span class="nx">awsManager</span><span class="p">.</span><span class="nf">getAsgTemplate</span><span class="p">(</span><span class="nx">ng</span><span class="p">.</span><span class="nx">asg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 生成node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">node</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ng</span><span class="p">.</span><span class="nx">awsManager</span><span class="p">.</span><span class="nf">buildNodeFromTemplate</span><span class="p">(</span><span class="nx">ng</span><span class="p">.</span><span class="nx">asg</span><span class="p">,</span> <span class="nx">template</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">nodeInfo</span> <span class="o">:=</span> <span class="nx">schedulerframework</span><span class="p">.</span><span class="nf">NewNodeInfo</span><span class="p">(</span><span class="nx">cloudprovider</span><span class="p">.</span><span class="nf">BuildKubeProxy</span><span class="p">(</span><span class="nx">ng</span><span class="p">.</span><span class="nx">asg</span><span class="p">.</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodeInfo</span><span class="p">.</span><span class="nf">SetNode</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">nodeInfo</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">AwsManager</span><span class="p">)</span> <span class="nf">getAsgTemplate</span><span class="p">(</span><span class="nx">asg</span> <span class="o">*</span><span class="nx">asg</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">asgTemplate</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="nx">instanceTypeName</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">buildInstanceType</span><span class="p">(</span><span class="nx">asg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 根据instanceTypeName获取模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">instanceTypes</span><span class="p">[</span><span class="nx">instanceTypeName</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="o">&amp;</span><span class="nx">asgTemplate</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">InstanceType</span><span class="p">:</span> <span class="nx">t</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Region</span><span class="p">:</span>       <span class="nx">region</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Zone</span><span class="p">:</span>         <span class="nx">az</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Tags</span><span class="p">:</span>         <span class="nx">asg</span><span class="p">.</span><span class="nx">Tags</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;ASG %q uses the unknown EC2 instance type %q&#34;</span><span class="p">,</span> <span class="nx">asg</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">instanceTypeName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在<code>AWS</code>通过<code>nodeGroup</code>生成节点模板，是根据<a href="https://github.com/kubernetes/autoscaler/blob/55476293b3cb1e37e33680cefe01e7b34170a712/cluster-autoscaler/cloudprovider/aws/ec2_instance_types.go#L30" target="_blank" rel="noopener noreffer">ec2_instance_types.go</a>文件中的信息来生成的，如下<code>c5d.large</code>为ec2类型名称，CPU为2，内存为<code>4G</code>i</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">	<span class="s">&#34;c5d.large&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">InstanceType</span><span class="p">:</span> <span class="s">&#34;c5d.large&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">VCPU</span><span class="p">:</span>         <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MemoryMb</span><span class="p">:</span>     <span class="mi">4096</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">GPU</span><span class="p">:</span>          <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span></code></pre></div><p>而在我们的环境中，由于成本原因实际使用的<code>c5d.large</code>内存是<code>16Gi</code>。当nodeGroup初始节点为0时，根据ec2类型生成的节点是<code>4Gi</code>内存；而当初始节点为1时，集群中已经存在对应nodeGroup的节点，则通过已存在节点生成模板的内存为<code>16Gi</code>，<strong>内存不足</strong>才导致调度失败，我们也验证了调小pod申请的内存确实能够正常扩容。</p>
<p>一个简单的解决办法是将初始节点设置为1，另外可以将特殊类型添加到配置文件中，则可以正常工作。但根本原因是在<code>AWS</code>中无法正常感知节点资源的动态变化。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>在<code>AWS</code>中通过静态文件来获取节点资源信息，当实际生产中与文件不一致时，会造成<code>ClusterAutoScaler</code>无法按照预期工作。<code>ClusterAutoScaler</code>大大减少了运维工作，无需时时关心资源申请量，但只有了解其内部逻辑，才能更好的应用于生产。</p>]]></description>
</item><item>
    <title>深入了解kubebuilder</title>
    <link>https://qingwave.github.io/k8s-kubebuilder-deep-dive/</link>
    <pubDate>Mon, 23 Aug 2021 00:25:53 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-kubebuilder-deep-dive/</guid>
    <description><![CDATA[<p>前文<a href="./how-to-write-a-k8s-operator" rel="">快速实现一个Kubernetes Operator</a>介绍了<code>kubebuilder</code>工具，快速实现了一个<code>Operator</code>。今天我们深入水下，探寻<code>kubebuilder</code>究竟是如何工作的。</p>
<h2 id="普通开发流程" class="headerLink">
    <a href="#%e6%99%ae%e9%80%9a%e5%bc%80%e5%8f%91%e6%b5%81%e7%a8%8b" class="header-mark"></a>普通开发流程</h2><p>如果不借助任何<code>Operator</code>脚手架，我们是如何实现<code>Operator</code>的？大体分为一下几步：</p>
<ul>
<li>CRD定义</li>
<li>Controller开发，编写逻辑</li>
<li>测试部署</li>
</ul>
<h3 id="api定义" class="headerLink">
    <a href="#api%e5%ae%9a%e4%b9%89" class="header-mark"></a>API定义</h3><p>首先通过<a href="https://github.com/kubernetes/code-generator" target="_blank" rel="noopener noreffer">k8s.io/code-generator</a>项目生成API相关代码，定义相关字段。</p>
<h3 id="controller实现" class="headerLink">
    <a href="#controller%e5%ae%9e%e7%8e%b0" class="header-mark"></a>Controller实现</h3><p>实现Controller以官方提供的<a href="https://github.com/kubernetes/sample-controller" target="_blank" rel="noopener noreffer">sample-controller</a>为例，如图所示


</p>
<p>主要分为以下几步：</p>
<p>初始化<code>client</code>配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">  <span class="c1">//通过master/kubeconfig建立client config
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">cfg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientcmd</span><span class="p">.</span><span class="nf">BuildConfigFromFlags</span><span class="p">(</span><span class="nx">masterURL</span><span class="p">,</span> <span class="nx">kubeconfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error building kubeconfig: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// kubernetes client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">kubeClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error building kubernetes clientset: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// crd client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">exampleClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientset</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error building example clientset: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></div><p>初始化Informer并启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">  <span class="c1">//k8s sharedInformer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">kubeInformerFactory</span> <span class="o">:=</span> <span class="nx">kubeinformers</span><span class="p">.</span><span class="nf">NewSharedInformerFactory</span><span class="p">(</span><span class="nx">kubeClient</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">*</span><span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// crd sharedInformer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">exampleInformerFactory</span> <span class="o">:=</span> <span class="nx">informers</span><span class="p">.</span><span class="nf">NewSharedInformerFactory</span><span class="p">(</span><span class="nx">exampleClient</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">*</span><span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 初始化controller，传入informer, 注册了Deployment与Foo Informers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">controller</span> <span class="o">:=</span> <span class="nf">NewController</span><span class="p">(</span><span class="nx">kubeClient</span><span class="p">,</span> <span class="nx">exampleClient</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kubeInformerFactory</span><span class="p">.</span><span class="nf">Apps</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">Deployments</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">exampleInformerFactory</span><span class="p">.</span><span class="nf">Samplecontroller</span><span class="p">().</span><span class="nf">V1alpha1</span><span class="p">().</span><span class="nf">Foos</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//启动Informer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">kubeInformerFactory</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">exampleInformerFactory</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span></code></pre></div><p>最后启动<code>Controller</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">controller</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error running controller: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></div><p>在<code>Controller</code>的实现中，通过<code>NewController</code>来初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewController</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kubeclientset</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sampleclientset</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">deploymentInformer</span> <span class="nx">appsinformers</span><span class="p">.</span><span class="nx">DeploymentInformer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fooInformer</span> <span class="nx">informers</span><span class="p">.</span><span class="nx">FooInformer</span><span class="p">)</span> <span class="o">*</span><span class="nx">Controller</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create event broadcaster
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">samplescheme</span><span class="p">.</span><span class="nf">AddToScheme</span><span class="p">(</span><span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Creating event broadcaster&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventBroadcaster</span> <span class="o">:=</span> <span class="nx">record</span><span class="p">.</span><span class="nf">NewBroadcaster</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventBroadcaster</span><span class="p">.</span><span class="nf">StartStructuredLogging</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventBroadcaster</span><span class="p">.</span><span class="nf">StartRecordingToSink</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">typedcorev1</span><span class="p">.</span><span class="nx">EventSinkImpl</span><span class="p">{</span><span class="nx">Interface</span><span class="p">:</span> <span class="nx">kubeclientset</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">Events</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">recorder</span> <span class="o">:=</span> <span class="nx">eventBroadcaster</span><span class="p">.</span><span class="nf">NewRecorder</span><span class="p">(</span><span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">corev1</span><span class="p">.</span><span class="nx">EventSource</span><span class="p">{</span><span class="nx">Component</span><span class="p">:</span> <span class="nx">controllerAgentName</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">controller</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Controller</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kubeclientset</span><span class="p">:</span>     <span class="nx">kubeclientset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sampleclientset</span><span class="p">:</span>   <span class="nx">sampleclientset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">deploymentsLister</span><span class="p">:</span> <span class="nx">deploymentInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">(),</span> <span class="c1">//只读cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">deploymentsSynced</span><span class="p">:</span> <span class="nx">deploymentInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nx">HasSynced</span><span class="p">,</span> <span class="c1">//调用Informer()会注册informer到共享informer中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">foosLister</span><span class="p">:</span>        <span class="nx">fooInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">foosSynced</span><span class="p">:</span>        <span class="nx">fooInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nx">HasSynced</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">workqueue</span><span class="p">:</span>         <span class="nx">workqueue</span><span class="p">.</span><span class="nf">NewNamedRateLimitingQueue</span><span class="p">(</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">DefaultControllerRateLimiter</span><span class="p">(),</span> <span class="s">&#34;Foos&#34;</span><span class="p">),</span> <span class="c1">// 初始化工作队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">recorder</span><span class="p">:</span>          <span class="nx">recorder</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Setting up event handlers&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 添加回调事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fooInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AddFunc</span><span class="p">:</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">enqueueFoo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UpdateFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">old</span><span class="p">,</span> <span class="nx">new</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">controller</span><span class="p">.</span><span class="nf">enqueueFoo</span><span class="p">(</span><span class="nx">new</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">deploymentInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AddFunc</span><span class="p">:</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">handleObject</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UpdateFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">old</span><span class="p">,</span> <span class="nx">new</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">newDepl</span> <span class="o">:=</span> <span class="nx">new</span><span class="p">.(</span><span class="o">*</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">oldDepl</span> <span class="o">:=</span> <span class="nx">old</span><span class="p">.(</span><span class="o">*</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">newDepl</span><span class="p">.</span><span class="nx">ResourceVersion</span> <span class="o">==</span> <span class="nx">oldDepl</span><span class="p">.</span><span class="nx">ResourceVersion</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Periodic resync will send update events for all known Deployments.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// Two different versions of the same Deployment will always have different RVs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">controller</span><span class="p">.</span><span class="nf">handleObject</span><span class="p">(</span><span class="nx">new</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DeleteFunc</span><span class="p">:</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">handleObject</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">controller</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>Controller</code>启动则是典型的k8s工作流，通过控制循环不断从工作队列获取对象进行处理，使其达到期望状态</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">workers</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">ShutDown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 等待cache同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">klog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Waiting for informer caches to sync&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">deploymentsSynced</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">foosSynced</span><span class="p">);</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to wait for caches to sync&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 启动worker,每个worker一个goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">workers</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">runWorker</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 等待退出信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// worker就是一个循环不断调用processNextWorkItem
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">runWorker</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">c</span><span class="p">.</span><span class="nf">processNextWorkItem</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">processNextWorkItem</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 从工作队列获取对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">obj</span><span class="p">,</span> <span class="nx">shutdown</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">Get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">shutdown</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// We wrap this block in a func so we can defer c.workqueue.Done.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">Done</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">key</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">ok</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="nx">obj</span><span class="p">.(</span><span class="kt">string</span><span class="p">);</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">Forget</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;expected string in workqueue but got %#v&#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 进行处理，核心逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">syncHandler</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 处理失败再次加入队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">AddRateLimited</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error syncing &#39;%s&#39;: %s, requeuing&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 处理成功不入队
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">Forget</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Successfully synced &#39;%s&#39;&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="operator模式" class="headerLink">
    <a href="#operator%e6%a8%a1%e5%bc%8f" class="header-mark"></a>Operator模式</h2><p>在<code>Operator</code>模式下，用户只需要实现<code>Reconcile</code>(调谐)即<code>sample-controller</code>中的<code>syncHandler</code>，其他步骤<code>kubebuilder</code>已经帮我们实现了。那我们来一探究竟，<code>kubebuilder</code>是怎么一步步触发<code>Reconcile</code>逻辑。</p>
<p>以<a href="https://github.com/qingwave/mygame" target="_blank" rel="noopener noreffer">mygame</a>为例，通常使用<code>kubebuilder</code>生成的主文件如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 用来解析kubernetes对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">scheme</span>   <span class="p">=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">NewScheme</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">setupLog</span> <span class="p">=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">WithName</span><span class="p">(</span><span class="s">&#34;setup&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">clientgoscheme</span><span class="p">.</span><span class="nf">AddToScheme</span><span class="p">(</span><span class="nx">scheme</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 添加自定义对象到scheme
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">myappv1</span><span class="p">.</span><span class="nf">AddToScheme</span><span class="p">(</span><span class="nx">scheme</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//+kubebuilder:scaffold:scheme
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctrl</span><span class="p">.</span><span class="nf">SetLogger</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nf">UseFlagOptions</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化controller manager
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mgr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nf">NewManager</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">GetConfigOrDie</span><span class="p">(),</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Scheme</span><span class="p">:</span>                 <span class="nx">scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MetricsBindAddress</span><span class="p">:</span>     <span class="nx">metricsAddr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Port</span><span class="p">:</span>                   <span class="mi">9443</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">HealthProbeBindAddress</span><span class="p">:</span> <span class="nx">probeAddr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElection</span><span class="p">:</span>         <span class="nx">enableLeaderElection</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionID</span><span class="p">:</span>       <span class="s">&#34;7bc453ad.qingwave.github.io&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to start manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化Reconciler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">controllers</span><span class="p">.</span><span class="nx">GameReconciler</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Client</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetClient</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Scheme</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}).</span><span class="nf">SetupWithManager</span><span class="p">(</span><span class="nx">mgr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to create controller&#34;</span><span class="p">,</span> <span class="s">&#34;controller&#34;</span><span class="p">,</span> <span class="s">&#34;Game&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化Webhook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">enableWebhook</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">myappv1</span><span class="p">.</span><span class="nx">Game</span><span class="p">{}).</span><span class="nf">SetupWebhookWithManager</span><span class="p">(</span><span class="nx">mgr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to create webhook&#34;</span><span class="p">,</span> <span class="s">&#34;webhook&#34;</span><span class="p">,</span> <span class="s">&#34;Game&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//+kubebuilder:scaffold:builder
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 启动manager
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">SetupSignalHandler</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;problem running manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>kubebuilder</code>封装了<code>controller-runtime</code>，在主文件中主要初始了<code>controller-manager</code>,以及我们填充的<code>Reconciler</code>与<code>Webhook</code>，最后启动<code>manager</code>。</p>
<p>分别来看下每个流程。</p>
<h3 id="manager初始化" class="headerLink">
    <a href="#manager%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>Manager初始化</h3><p>代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Manager</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置默认配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">options</span> <span class="p">=</span> <span class="nf">setOptionsDefaults</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// cluster初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cluster</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cluster</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">clusterOptions</span> <span class="o">*</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">Options</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">Scheme</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">MapperProvider</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">MapperProvider</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">Logger</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">SyncPeriod</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">SyncPeriod</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">Namespace</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Namespace</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">NewCache</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">NewCache</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">ClientBuilder</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">ClientBuilder</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">ClientDisableCacheFor</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">ClientDisableCacheFor</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">DryRunClient</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">DryRunClient</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">EventBroadcaster</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">EventBroadcaster</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// event recorder初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">recorderProvider</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">newRecorderProvider</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">cluster</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">(),</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">WithName</span><span class="p">(</span><span class="s">&#34;events&#34;</span><span class="p">),</span> <span class="nx">options</span><span class="p">.</span><span class="nx">makeBroadcaster</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 选主的资源锁配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">leaderConfig</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">LeaderElectionConfig</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">leaderConfig</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">leaderConfig</span> <span class="p">=</span> <span class="nx">rest</span><span class="p">.</span><span class="nf">CopyConfig</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resourceLock</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">newResourceLock</span><span class="p">(</span><span class="nx">leaderConfig</span><span class="p">,</span> <span class="nx">recorderProvider</span><span class="p">,</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElection</span><span class="p">:</span>             <span class="nx">options</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionResourceLock</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">LeaderElectionResourceLock</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionID</span><span class="p">:</span>           <span class="nx">options</span><span class="p">.</span><span class="nx">LeaderElectionID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionNamespace</span><span class="p">:</span>    <span class="nx">options</span><span class="p">.</span><span class="nx">LeaderElectionNamespace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">controllerManager</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cluster</span><span class="p">:</span>                 <span class="nx">cluster</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">recorderProvider</span><span class="p">:</span>        <span class="nx">recorderProvider</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">resourceLock</span><span class="p">:</span>            <span class="nx">resourceLock</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metricsListener</span><span class="p">:</span>         <span class="nx">metricsListener</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metricsExtraHandlers</span><span class="p">:</span>    <span class="nx">metricsExtraHandlers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">:</span>                  <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">elected</span><span class="p">:</span>                 <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">port</span><span class="p">:</span>                    <span class="nx">options</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">host</span><span class="p">:</span>                    <span class="nx">options</span><span class="p">.</span><span class="nx">Host</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">certDir</span><span class="p">:</span>                 <span class="nx">options</span><span class="p">.</span><span class="nx">CertDir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">leaseDuration</span><span class="p">:</span>           <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">LeaseDuration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">renewDeadline</span><span class="p">:</span>           <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">RenewDeadline</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">retryPeriod</span><span class="p">:</span>             <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">RetryPeriod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">healthProbeListener</span><span class="p">:</span>     <span class="nx">healthProbeListener</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">readinessEndpointName</span><span class="p">:</span>   <span class="nx">options</span><span class="p">.</span><span class="nx">ReadinessEndpointName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">livenessEndpointName</span><span class="p">:</span>    <span class="nx">options</span><span class="p">.</span><span class="nx">LivenessEndpointName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gracefulShutdownTimeout</span><span class="p">:</span> <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">GracefulShutdownTimeout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">internalProceduresStop</span><span class="p">:</span>  <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">leaderElectionStopped</span><span class="p">:</span>   <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span></code></pre></div><p>在<code>New</code>中主要初始化了各种配置端口、选主信息、<code>eventRecorder</code>，最重要的是初始了<code>Cluster</code>。<code>Cluster</code>用来访问k8s，初始化代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// New constructs a brand new cluster
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">Option</span><span class="p">)</span> <span class="p">(</span><span class="nx">Cluster</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">config</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;must specify Config&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">options</span> <span class="o">:=</span> <span class="nx">Options</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">opt</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">options</span> <span class="p">=</span> <span class="nf">setOptionsDefaults</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create the mapper provider
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mapper</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">MapperProvider</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Failed to get API Group-Resources&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create the cache for the cached read client and registering informers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cache</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">NewCache</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span><span class="nx">Scheme</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">Mapper</span><span class="p">:</span> <span class="nx">mapper</span><span class="p">,</span> <span class="nx">Resync</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">SyncPeriod</span><span class="p">,</span> <span class="nx">Namespace</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">clientOptions</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span><span class="nx">Scheme</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">Mapper</span><span class="p">:</span> <span class="nx">mapper</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">apiReader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">clientOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">writeObj</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">ClientBuilder</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">		<span class="nf">WithUncached</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">ClientDisableCacheFor</span><span class="o">...</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Build</span><span class="p">(</span><span class="nx">cache</span><span class="p">,</span> <span class="nx">config</span><span class="p">,</span> <span class="nx">clientOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">DryRunClient</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">writeObj</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">NewDryRunClient</span><span class="p">(</span><span class="nx">writeObj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">recorderProvider</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">newRecorderProvider</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">WithName</span><span class="p">(</span><span class="s">&#34;events&#34;</span><span class="p">),</span> <span class="nx">options</span><span class="p">.</span><span class="nx">makeBroadcaster</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cluster</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">config</span><span class="p">:</span>           <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">:</span>           <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cache</span><span class="p">:</span>            <span class="nx">cache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fieldIndexes</span><span class="p">:</span>     <span class="nx">cache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span>           <span class="nx">writeObj</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">apiReader</span><span class="p">:</span>        <span class="nx">apiReader</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">recorderProvider</span><span class="p">:</span> <span class="nx">recorderProvider</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mapper</span><span class="p">:</span>           <span class="nx">mapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">:</span>           <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这里主要创建了<code>cache</code>与读写<code>client</code></p>
<h3 id="cache初始化" class="headerLink">
    <a href="#cache%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>Cache初始化</h3><p>创建<code>cache</code>代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// New initializes and returns a new Cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">opts</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Cache</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">opts</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">defaultOpts</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">im</span> <span class="o">:=</span> <span class="nx">internal</span><span class="p">.</span><span class="nf">NewInformersMap</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">Mapper</span><span class="p">,</span> <span class="o">*</span><span class="nx">opts</span><span class="p">.</span><span class="nx">Resync</span><span class="p">,</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">informerCache</span><span class="p">{</span><span class="nx">InformersMap</span><span class="p">:</span> <span class="nx">im</span><span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>New</code>中调用了<code>NewInformersMap</code>来创建<code>infermer map</code>，分为<code>structured</code>、<code>unstructured</code>与<code>metadata</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewInformersMap</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mapper</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">RESTMapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resync</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">namespace</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">InformersMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">InformersMap</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">structured</span><span class="p">:</span>   <span class="nf">newStructuredInformersMap</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">,</span> <span class="nx">mapper</span><span class="p">,</span> <span class="nx">resync</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">unstructured</span><span class="p">:</span> <span class="nf">newUnstructuredInformersMap</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">,</span> <span class="nx">mapper</span><span class="p">,</span> <span class="nx">resync</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metadata</span><span class="p">:</span>     <span class="nf">newMetadataInformersMap</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">,</span> <span class="nx">mapper</span><span class="p">,</span> <span class="nx">resync</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">Scheme</span><span class="p">:</span> <span class="nx">scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>最终都是调用<code>newSpecificInformersMap</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// newStructuredInformersMap creates a new InformersMap for structured objects.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">newStructuredInformersMap</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">mapper</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">RESTMapper</span><span class="p">,</span> <span class="nx">resync</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span> <span class="nx">namespace</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">specificInformersMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">newSpecificInformersMap</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">,</span> <span class="nx">mapper</span><span class="p">,</span> <span class="nx">resync</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">,</span> <span class="nx">createStructuredListWatch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">newSpecificInformersMap</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mapper</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">RESTMapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resync</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">namespace</span> <span class="kt">string</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">createListWatcher</span> <span class="nx">createListWatcherFunc</span><span class="p">)</span> <span class="o">*</span><span class="nx">specificInformersMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ip</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">specificInformersMap</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">config</span><span class="p">:</span>            <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Scheme</span><span class="p">:</span>            <span class="nx">scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mapper</span><span class="p">:</span>            <span class="nx">mapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">informersByGVK</span><span class="p">:</span>    <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">]</span><span class="o">*</span><span class="nx">MapEntry</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">codecs</span><span class="p">:</span>            <span class="nx">serializer</span><span class="p">.</span><span class="nf">NewCodecFactory</span><span class="p">(</span><span class="nx">scheme</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">paramCodec</span><span class="p">:</span>        <span class="nx">runtime</span><span class="p">.</span><span class="nf">NewParameterCodec</span><span class="p">(</span><span class="nx">scheme</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">resync</span><span class="p">:</span>            <span class="nx">resync</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">startWait</span><span class="p">:</span>         <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">createListWatcher</span><span class="p">:</span> <span class="nx">createListWatcher</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">namespace</span><span class="p">:</span>         <span class="nx">namespace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">ip</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">createStructuredListWatch</span><span class="p">(</span><span class="nx">gvk</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">,</span> <span class="nx">ip</span> <span class="o">*</span><span class="nx">specificInformersMap</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ListWatch</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Kubernetes APIs work against Resources, not GroupVersionKinds.  Map the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// groupVersionKind to the Resource API we will use.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mapping</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">mapper</span><span class="p">.</span><span class="nf">RESTMapping</span><span class="p">(</span><span class="nx">gvk</span><span class="p">.</span><span class="nf">GroupKind</span><span class="p">(),</span> <span class="nx">gvk</span><span class="p">.</span><span class="nx">Version</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">apiutil</span><span class="p">.</span><span class="nf">RESTClientForGVK</span><span class="p">(</span><span class="nx">gvk</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">config</span><span class="p">,</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">codecs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">listGVK</span> <span class="o">:=</span> <span class="nx">gvk</span><span class="p">.</span><span class="nf">GroupVersion</span><span class="p">().</span><span class="nf">WithKind</span><span class="p">(</span><span class="nx">gvk</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">+</span> <span class="s">&#34;List&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">listObj</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">listGVK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// TODO: the functions that make use of this ListWatch should be adapted to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  pass in their own contexts instead of relying on this fixed one here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Create a new ListWatch for the obj
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ListWatch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ListFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">opts</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">)</span> <span class="p">(</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">res</span> <span class="o">:=</span> <span class="nx">listObj</span><span class="p">.</span><span class="nf">DeepCopyObject</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">isNamespaceScoped</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">namespace</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="o">&amp;&amp;</span> <span class="nx">mapping</span><span class="p">.</span><span class="nx">Scope</span><span class="p">.</span><span class="nf">Name</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">RESTScopeNameRoot</span>
</span></span><span class="line"><span class="cl">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">().</span><span class="nf">NamespaceIfScoped</span><span class="p">(</span><span class="nx">ip</span><span class="p">.</span><span class="nx">namespace</span><span class="p">,</span> <span class="nx">isNamespaceScoped</span><span class="p">).</span><span class="nf">Resource</span><span class="p">(</span><span class="nx">mapping</span><span class="p">.</span><span class="nx">Resource</span><span class="p">.</span><span class="nx">Resource</span><span class="p">).</span><span class="nf">VersionedParams</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">paramCodec</span><span class="p">).</span><span class="nf">Do</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nf">Into</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Setup the watch function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">WatchFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">opts</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">)</span> <span class="p">(</span><span class="nx">watch</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Watch needs to be set to true separately
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">opts</span><span class="p">.</span><span class="nx">Watch</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">			<span class="nx">isNamespaceScoped</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">namespace</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="o">&amp;&amp;</span> <span class="nx">mapping</span><span class="p">.</span><span class="nx">Scope</span><span class="p">.</span><span class="nf">Name</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">RESTScopeNameRoot</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">().</span><span class="nf">NamespaceIfScoped</span><span class="p">(</span><span class="nx">ip</span><span class="p">.</span><span class="nx">namespace</span><span class="p">,</span> <span class="nx">isNamespaceScoped</span><span class="p">).</span><span class="nf">Resource</span><span class="p">(</span><span class="nx">mapping</span><span class="p">.</span><span class="nx">Resource</span><span class="p">.</span><span class="nx">Resource</span><span class="p">).</span><span class="nf">VersionedParams</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">paramCodec</span><span class="p">).</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在<code>newSpecificInformersMap</code>中通过<code>informersByGVK</code>来记录<code>schema</code>中每个<code>GVK</code>对象与<code>informer</code>的对应关系，使用时可根据<code>GVK</code>得到<code>informer</code>再去<code>List</code>/<code>Get</code>。</p>
<p><code>newSpecificInformersMap</code>中的<code>createListWatcher</code>来初始化<code>ListWatch</code>对象。</p>
<h3 id="client初始化" class="headerLink">
    <a href="#client%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>Client初始化</h3><p>client这里有多种类型，<code>apiReader</code>直接从<code>apiserver</code>读取对象，<code>writeObj</code>可以从<code>apiserver</code>或者<code>cache</code>中读取数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">	<span class="nx">apiReader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">clientOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Client</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">config</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide non-nil rest.Config to client.New&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Init a scheme if none provided
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span> <span class="p">=</span> <span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Init a Mapper if none provided
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Mapper</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">Mapper</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">apiutil</span><span class="p">.</span><span class="nf">NewDynamicRESTMapper</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 从cache中读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">clientcache</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">clientCache</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">config</span><span class="p">:</span> <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mapper</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Mapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">codecs</span><span class="p">:</span> <span class="nx">serializer</span><span class="p">.</span><span class="nf">NewCodecFactory</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">structuredResourceByType</span><span class="p">:</span>   <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">]</span><span class="o">*</span><span class="nx">resourceMeta</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">unstructuredResourceByType</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">]</span><span class="o">*</span><span class="nx">resourceMeta</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">rawMetaClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">metadata</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unable to construct metadata-only client for use as part of client: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">c</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">client</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">typedClient</span><span class="p">:</span> <span class="nx">typedClient</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">cache</span><span class="p">:</span>      <span class="nx">clientcache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">paramCodec</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">NewParameterCodec</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">unstructuredClient</span><span class="p">:</span> <span class="nx">unstructuredClient</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">cache</span><span class="p">:</span>      <span class="nx">clientcache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">paramCodec</span><span class="p">:</span> <span class="nx">noConversionParamCodec</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metadataClient</span><span class="p">:</span> <span class="nx">metadataClient</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">client</span><span class="p">:</span>     <span class="nx">rawMetaClient</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">restMapper</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Mapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mapper</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Mapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">c</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>writeObj</code>实现了读写分离的<code>Client</code>，写直连<code>apiserver</code>，读获取在<code>cache</code>中则直接读取<code>cache</code>，否则通过<code>clientset</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">writeObj</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">ClientBuilder</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">		<span class="nf">WithUncached</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">ClientDisableCacheFor</span><span class="o">...</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Build</span><span class="p">(</span><span class="nx">cache</span><span class="p">,</span> <span class="nx">config</span><span class="p">,</span> <span class="nx">clientOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">newClientBuilder</span><span class="p">)</span> <span class="nf">Build</span><span class="p">(</span><span class="nx">cache</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Cache</span><span class="p">,</span> <span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Create the Client for Write operations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nf">NewDelegatingClient</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">NewDelegatingClientInput</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">CacheReader</span><span class="p">:</span>     <span class="nx">cache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Client</span><span class="p">:</span>          <span class="nx">c</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UncachedObjects</span><span class="p">:</span> <span class="nx">n</span><span class="p">.</span><span class="nx">uncached</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 读写分离client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewDelegatingClient</span><span class="p">(</span><span class="nx">in</span> <span class="nx">NewDelegatingClientInput</span><span class="p">)</span> <span class="p">(</span><span class="nx">Client</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">uncachedGVKs</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">]</span><span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">obj</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">in</span><span class="p">.</span><span class="nx">UncachedObjects</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gvk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">apiutil</span><span class="p">.</span><span class="nf">GVKForObject</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Scheme</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">uncachedGVKs</span><span class="p">[</span><span class="nx">gvk</span><span class="p">]</span> <span class="p">=</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">delegatingClient</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">:</span> <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Scheme</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mapper</span><span class="p">:</span> <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">RESTMapper</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Reader</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">delegatingReader</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">CacheReader</span><span class="p">:</span>       <span class="nx">in</span><span class="p">.</span><span class="nx">CacheReader</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ClientReader</span><span class="p">:</span>      <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">scheme</span><span class="p">:</span>            <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Scheme</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">uncachedGVKs</span><span class="p">:</span>      <span class="nx">uncachedGVKs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">cacheUnstructured</span><span class="p">:</span> <span class="nx">in</span><span class="p">.</span><span class="nx">CacheUnstructured</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Writer</span><span class="p">:</span>       <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">StatusClient</span><span class="p">:</span> <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Get retrieves an obj for a given object key from the Kubernetes Cluster.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">delegatingReader</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">key</span> <span class="nx">ObjectKey</span><span class="p">,</span> <span class="nx">obj</span> <span class="nx">Object</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//根据是否cached选择client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">isUncached</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">shouldBypassCache</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">isUncached</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">ClientReader</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">CacheReader</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="controller初始化" class="headerLink">
    <a href="#controller%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>Controller初始化</h3><p>Controller初始化代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">GameReconciler</span><span class="p">)</span> <span class="nf">SetupWithManager</span><span class="p">(</span><span class="nx">mgr</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Manager</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrl</span><span class="p">.</span><span class="nf">NewControllerManagedBy</span><span class="p">(</span><span class="nx">mgr</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">WithOptions</span><span class="p">(</span><span class="nx">controller</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">MaxConcurrentReconciles</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">For</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myappv1</span><span class="p">.</span><span class="nx">Game</span><span class="p">{}).</span> <span class="c1">// Reconcile资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nf">Owns</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{}).</span> <span class="c1">// 监听Owner是当前资源的Deployment
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nf">Complete</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Complete builds the Application ControllerManagedBy.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">Complete</span><span class="p">(</span><span class="nx">r</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">Build</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Build builds the Application ControllerManagedBy and returns the Controller it created.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">Build</span><span class="p">(</span><span class="nx">r</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="p">(</span><span class="nx">controller</span><span class="p">.</span><span class="nx">Controller</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">r</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide a non-nil Reconciler&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide a non-nil Manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Checking the reconcile type exist or not
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide an object for reconciliation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the Config
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">blder</span><span class="p">.</span><span class="nf">loadRestConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the ControllerManagedBy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">doController</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the Watch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">doWatch</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>初始化<code>Controller</code>调用<code>ctrl.NewControllerManagedBy</code>来创建<code>Builder</code>，填充配置，最后通过<code>Build</code>方法完成初始化，主要做了三件事</p>
<ol>
<li>设置配置</li>
<li><code>doController</code>来创建<code>controller</code></li>
<li><code>doWatch</code>来设置需要监听的资源</li>
</ol>
<p>先看<code>controller</code>初始化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">doController</span><span class="p">(</span><span class="nx">r</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrlOptions</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrlOptions</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Reconciler</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Reconciler</span> <span class="p">=</span> <span class="nx">r</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">gvk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getGvk</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Setup the logger.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Log</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Log</span> <span class="p">=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span><span class="p">.</span><span class="nf">GetLogger</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Log</span> <span class="p">=</span> <span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">WithValues</span><span class="p">(</span><span class="s">&#34;reconciler group&#34;</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">.</span><span class="nx">Group</span><span class="p">,</span> <span class="s">&#34;reconciler kind&#34;</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">.</span><span class="nx">Kind</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Build the controller and return.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">newController</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nf">getControllerName</span><span class="p">(</span><span class="nx">gvk</span><span class="p">),</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span><span class="p">,</span> <span class="nx">ctrlOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">mgr</span> <span class="nx">manager</span><span class="p">.</span><span class="nx">Manager</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Controller</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewUnmanaged</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">mgr</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Add the controller as a Manager components
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewUnmanaged</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">mgr</span> <span class="nx">manager</span><span class="p">.</span><span class="nx">Manager</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Controller</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Reconciler</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must specify Reconciler&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must specify Name for Controller&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Log</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">Log</span> <span class="p">=</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetLogger</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span> <span class="p">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Minute</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">RateLimiter</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">RateLimiter</span> <span class="p">=</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nf">DefaultControllerRateLimiter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Inject dependencies into Reconciler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create controller with dependencies set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">controller</span><span class="p">.</span><span class="nx">Controller</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Do</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MakeQueue</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nf">NewNamedRateLimitingQueue</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">RateLimiter</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MaxConcurrentReconciles</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">CacheSyncTimeout</span><span class="p">:</span>        <span class="nx">options</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">SetFields</span><span class="p">:</span>               <span class="nx">mgr</span><span class="p">.</span><span class="nx">SetFields</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span>                    <span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Log</span><span class="p">:</span>                     <span class="nx">options</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">WithName</span><span class="p">(</span><span class="s">&#34;controller&#34;</span><span class="p">).</span><span class="nf">WithName</span><span class="p">(</span><span class="nx">name</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>doController</code>调用<code>controller.New</code>来创建<code>controller</code>并添加到<code>manager</code>，在<code>NewUnmanaged</code>可以看到我们熟悉的配置，与上文<code>sample-controller</code>类似这里也设置了工作队列、最大Worker数等。</p>
<p><code>doWatch</code>代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">doWatch</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Reconcile type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">typeForSrc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">project</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">objectProjection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">src</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="nx">typeForSrc</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">hdler</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">handler</span><span class="p">.</span><span class="nx">EnqueueRequestForObject</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">allPredicates</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">globalPredicates</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">src</span><span class="p">,</span> <span class="nx">hdler</span><span class="p">,</span> <span class="nx">allPredicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Watches the managed types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">own</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ownsInput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">typeForSrc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">project</span><span class="p">(</span><span class="nx">own</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span> <span class="nx">own</span><span class="p">.</span><span class="nx">objectProjection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">src</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="nx">typeForSrc</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">hdler</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">handler</span><span class="p">.</span><span class="nx">EnqueueRequestForOwner</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OwnerType</span><span class="p">:</span>    <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">IsController</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">([]</span><span class="nx">predicate</span><span class="p">.</span><span class="nf">Predicate</span><span class="p">(</span><span class="kc">nil</span><span class="p">),</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">globalPredicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">allPredicates</span><span class="p">,</span> <span class="nx">own</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">src</span><span class="p">,</span> <span class="nx">hdler</span><span class="p">,</span> <span class="nx">allPredicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Do the watch requests
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">w</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">watchesInput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">([]</span><span class="nx">predicate</span><span class="p">.</span><span class="nf">Predicate</span><span class="p">(</span><span class="kc">nil</span><span class="p">),</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">globalPredicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">allPredicates</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// If the source of this watch is of type *source.Kind, project it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">srckind</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">src</span><span class="p">.(</span><span class="o">*</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">typeForSrc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">project</span><span class="p">(</span><span class="nx">srckind</span><span class="p">.</span><span class="nx">Type</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">objectProjection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">srckind</span><span class="p">.</span><span class="nx">Type</span> <span class="p">=</span> <span class="nx">typeForSrc</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">src</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">eventhandler</span><span class="p">,</span> <span class="nx">allPredicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>doWatch</code>以此<code>watch</code>当前资源，<code>ownsInput</code>资源（即owner为当前资源），以及通过<code>builder</code>传入的<code>watchsInput</code>，最后调用<code>ctrl.Watch</code>来注册。其中参数<code>eventhandler</code>为入队函数，如当前资源入队实现为<code>handler.EnqueueRequestForObject</code>，类似地<code>handler.EnqueueRequestForOwner</code>是将<code>owner</code>加入工作队列。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">EnqueueRequestForObject</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Create implements EventHandler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">EnqueueRequestForObject</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">evt</span> <span class="nx">event</span><span class="p">.</span><span class="nx">CreateEvent</span><span class="p">,</span> <span class="nx">q</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">Object</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">enqueueLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;CreateEvent received with no metadata&#34;</span><span class="p">,</span> <span class="s">&#34;event&#34;</span><span class="p">,</span> <span class="nx">evt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 加入队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">q</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">reconcile</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span><span class="nx">NamespacedName</span><span class="p">:</span> <span class="nx">types</span><span class="p">.</span><span class="nx">NamespacedName</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span>      <span class="nx">evt</span><span class="p">.</span><span class="nx">Object</span><span class="p">.</span><span class="nf">GetName</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Namespace</span><span class="p">:</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">Object</span><span class="p">.</span><span class="nf">GetNamespace</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>Watch</code>实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">src</span> <span class="nx">source</span><span class="p">.</span><span class="nx">Source</span><span class="p">,</span> <span class="nx">evthdler</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">,</span> <span class="nx">prct</span> <span class="o">...</span><span class="nx">predicate</span><span class="p">.</span><span class="nx">Predicate</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Inject Cache into arguments
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">src</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">evthdler</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">pr</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">prct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">pr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">Started</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span><span class="p">,</span> <span class="nx">watchDescription</span><span class="p">{</span><span class="nx">src</span><span class="p">:</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">handler</span><span class="p">:</span> <span class="nx">evthdler</span><span class="p">,</span> <span class="nx">predicates</span><span class="p">:</span> <span class="nx">prct</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Starting EventSource&#34;</span><span class="p">,</span> <span class="s">&#34;source&#34;</span><span class="p">,</span> <span class="nx">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">src</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">evthdler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">,</span> <span class="nx">prct</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ks</span> <span class="o">*</span><span class="nx">Kind</span><span class="p">)</span> <span class="nf">InjectCache</span><span class="p">(</span><span class="nx">c</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Cache</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ks</span><span class="p">.</span><span class="nx">cache</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ks</span><span class="p">.</span><span class="nx">cache</span> <span class="p">=</span> <span class="nx">c</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ks</span> <span class="o">*</span><span class="nx">Kind</span><span class="p">)</span> <span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">handler</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">,</span> <span class="nx">queue</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">prct</span> <span class="o">...</span><span class="nx">predicate</span><span class="p">.</span><span class="nx">Predicate</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="nx">i</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ks</span><span class="p">.</span><span class="nx">cache</span><span class="p">.</span><span class="nf">GetInformer</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ks</span><span class="p">.</span><span class="nx">Type</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">kindMatchErr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">meta</span><span class="p">.</span><span class="nx">NoKindMatchError</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;if kind is a CRD, it should be installed before calling Start&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="s">&#34;kind&#34;</span><span class="p">,</span> <span class="nx">kindMatchErr</span><span class="p">.</span><span class="nx">GroupKind</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">i</span><span class="p">.</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">internal</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">{</span><span class="nx">Queue</span><span class="p">:</span> <span class="nx">queue</span><span class="p">,</span> <span class="nx">EventHandler</span><span class="p">:</span> <span class="nx">handler</span><span class="p">,</span> <span class="nx">Predicates</span><span class="p">:</span> <span class="nx">prct</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// informer get 实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">InformersMap</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">gvk</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">,</span> <span class="nx">obj</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="o">*</span><span class="nx">MapEntry</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="nx">obj</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">*</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">unstructured</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">*</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">UnstructuredList</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">unstructured</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">*</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">PartialObjectMetadata</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">metadata</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">*</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">PartialObjectMetadataList</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">metadata</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">structured</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 如果informer不存在则新创建一个，加入到informerMap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ip</span> <span class="o">*</span><span class="nx">specificInformersMap</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">gvk</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">,</span> <span class="nx">obj</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="o">*</span><span class="nx">MapEntry</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Return the informer if it is found
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">i</span><span class="p">,</span> <span class="nx">started</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">MapEntry</span><span class="p">,</span> <span class="kt">bool</span><span class="p">,</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ip</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">i</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">informersByGVK</span><span class="p">[</span><span class="nx">gvk</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">started</span><span class="p">,</span> <span class="nx">ok</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">started</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ip</span><span class="p">.</span><span class="nf">addInformerToMap</span><span class="p">(</span><span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">started</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">started</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>Watch</code>通过<code>SetFeilds</code>方法注入<code>cache</code>, 最后添加到<code>controller</code>的<code>startWatches</code>队列，若已启动，调用<code>Start</code>方法配置回调函数<code>EventHandler</code>。</p>
<h3 id="manager启动" class="headerLink">
    <a href="#manager%e5%90%af%e5%8a%a8" class="header-mark"></a>Manager启动</h3><p>最后来看<code>Manager</code>启动流程</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="o">*</span><span class="nx">controllerManager</span><span class="p">)</span> <span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">cluster</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to add cluster to runnables: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nx">internalCtx</span><span class="p">,</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">internalCancel</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">stopComplete</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">stopComplete</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stopErr</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">engageStopProcedure</span><span class="p">(</span><span class="nx">stopComplete</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nx">errChan</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">metricsListener</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">serveMetrics</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Serve health probes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">healthProbeListener</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">serveHealthProbes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">startNonLeaderElectionRunnables</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">resourceLock</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">startLeaderElection</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">cm</span><span class="p">.</span><span class="nx">errChan</span> <span class="o">&lt;-</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Treat not having leader election enabled the same as being elected.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">cm</span><span class="p">.</span><span class="nf">startLeaderElectionRunnables</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nb">close</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">elected</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// We are done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">err</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">cm</span><span class="p">.</span><span class="nx">errChan</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Error starting or running a runnable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要流程包括：</p>
<ol>
<li>启动监控服务</li>
<li>启动健康检查服务</li>
<li>启动非选主服务</li>
<li>启动选主服务</li>
</ol>
<p>对于非选主服务，代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="o">*</span><span class="nx">controllerManager</span><span class="p">)</span> <span class="nf">startNonLeaderElectionRunnables</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nf">waitForCache</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">internalCtx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start the non-leaderelection Runnables after the cache has synced
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">nonLeaderElectionRunnables</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cm</span><span class="p">.</span><span class="nf">startRunnable</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="o">*</span><span class="nx">controllerManager</span><span class="p">)</span> <span class="nf">waitForCache</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">started</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cache</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">caches</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cm</span><span class="p">.</span><span class="nf">startRunnable</span><span class="p">(</span><span class="nx">cache</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cache</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">caches</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cache</span><span class="p">.</span><span class="nf">GetCache</span><span class="p">().</span><span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nx">started</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>启动<code>cache</code>，启动其他服务，对于选主服务也类似，初始化<code>controller</code>时会加入到选主服务队列，即最后启动<code>Controller</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">MakeQueue</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">ShutDown</span><span class="p">()</span> <span class="c1">// needs to be outside the iife so that we shutdown after the stop channel is closed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">watch</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Starting EventSource&#34;</span><span class="p">,</span> <span class="s">&#34;source&#34;</span><span class="p">,</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">src</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">,</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">watch</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">syncingSource</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">src</span><span class="p">.(</span><span class="nx">source</span><span class="p">.</span><span class="nx">SyncingSource</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// use a context with timeout for launching sources and syncing caches.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">sourceStartCtx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">syncingSource</span><span class="p">.</span><span class="nf">WaitForSync</span><span class="p">(</span><span class="nx">sourceStartCtx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">err</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to wait for %s caches to sync: %w&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">c</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Could not wait for Cache to sync&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="p">}();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">...</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">UntilWithContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="nx">c</span><span class="p">.</span><span class="nf">processNextWorkItem</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span> <span class="nx">c</span><span class="p">.</span><span class="nx">JitterPeriod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Started</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Stopping workers&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">processNextWorkItem</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">obj</span><span class="p">,</span> <span class="nx">shutdown</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">Get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nf">reconcileHandler</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">reconcileHandler</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Make sure that the the object is a valid request.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">req</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="nx">reconcile</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Do</span><span class="p">.</span><span class="nf">Reconcile</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">req</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>Controller</code>启动主要包括</p>
<ol>
<li>等待cache同步</li>
<li>启动多个<code>processNextWorkItem</code></li>
<li>每个Worker调用<code>c.Do.Reconcile</code>来进行数据处理
与<code>sample-controller</code>工作流程一致，不断获取工作队列中的数据调用<code>Reconcile</code>进行调谐。</li>
</ol>
<h3 id="流程归纳" class="headerLink">
    <a href="#%e6%b5%81%e7%a8%8b%e5%bd%92%e7%ba%b3" class="header-mark"></a>流程归纳</h3><p>至此，通过<code>kubebuilder</code>生成代码的主要逻辑已经明朗，对比<code>sample-controller</code>其实整体流程类似，只是<code>kubebuilder</code>通过<code>controller-runtime</code>已经帮我们做了很多工作，如<code>client</code>、<code>cache</code>的初始化，<code>controller</code>的运行框架，我们只需要关心<code>Reconcile</code>逻辑即可。</p>
<ol>
<li>初始化<code>manager</code>，创建<code>client</code>与<code>cache</code></li>
<li>创建<code>controller</code>，对于监听资源会创建对应<code>informer</code>并添加回调函数</li>
<li>启动<code>manager</code>，启动<code>cache</code>与<code>controller</code></li>
</ol>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p><code>kubebuilder</code>大大简化了开发<code>Operator</code>的流程，了解其背后的原理有利于我们对<code>Operator</code>进行调优，能更好地应用于生产。</p>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ul>
<li><a href="https://github.com/kubernetes/sample-controller" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/sample-controller</a></li>
<li><a href="https://book.kubebuilder.io/architecture.html" target="_blank" rel="noopener noreffer">https://book.kubebuilder.io/architecture.html</a></li>
<li><a href="https://developer.aliyun.com/article/719215" target="_blank" rel="noopener noreffer">https://developer.aliyun.com/article/719215</a></li>
</ul>]]></description>
</item></channel>
</rss>
