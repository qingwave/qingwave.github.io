<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>cloud - 分类 - Qingwave</title>
        <link>https://qingwave.github.io/categories/cloud/</link>
        <description>cloud - 分类 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Fri, 08 Jul 2022 08:36:52 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/categories/cloud/" rel="self" type="application/rss+xml" /><item>
    <title>捕获Kubernetes中Pod驱逐事件</title>
    <link>https://qingwave.github.io/k8s-watch-eviction-event/</link>
    <pubDate>Fri, 08 Jul 2022 08:36:52 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/k8s-watch-eviction-event/</guid>
    <description><![CDATA[<p>最近在工作中需要捕获Kubernetes的Pod驱逐事件，再做额外的操作。第一个想法是能不能监听（watch）驱逐对象（Eviction Resource），很遗憾Eviction并没有watch接口，只是Pod下的一个子资源，和Scale、Status类似。等等，既然是子资源那能不能通过Webhook获取。</p>
<h2 id="实现" class="headerLink">
    <a href="#%e5%ae%9e%e7%8e%b0" class="header-mark"></a>实现</h2><p>峰回路转，在<a href="https://github.com/kubernetes/kubernetes/pull/76910" target="_blank" rel="noopener noreffer">kubernetes#pr76910</a>中已经实现对pod/eviction子资源的支持。</p>
<p>简单验证一下</p>
<h3 id="生成项目" class="headerLink">
    <a href="#%e7%94%9f%e6%88%90%e9%a1%b9%e7%9b%ae" class="header-mark"></a>生成项目</h3><p>通过kubebuilder快速生成项目</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubebuilder init --component-config --domain qinng.io --repo github.com/qingwave/k8s
</span></span><span class="line"><span class="cl">-eviction-operator
</span></span></code></pre></div><h3 id="编写webhook" class="headerLink">
    <a href="#%e7%bc%96%e5%86%99webhook" class="header-mark"></a>编写Webhook</h3><p>由于pod/eviction不是自定义资源，无法通过kubebuilder直接生成，可按照如下逻辑生成ValidatingAdmissionWebhook</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">webhook</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/go-logr/logr&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">admissionv1</span> <span class="s">&#34;k8s.io/api/admission/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">corev1</span> <span class="s">&#34;k8s.io/api/core/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">policyv1</span> <span class="s">&#34;k8s.io/api/policy/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/apis/meta/v1/unstructured&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/runtime&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/types&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrl</span> <span class="s">&#34;sigs.k8s.io/controller-runtime&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sigs.k8s.io/controller-runtime/pkg/client&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sigs.k8s.io/controller-runtime/pkg/webhook&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sigs.k8s.io/controller-runtime/pkg/webhook/admission&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">WebhookName</span>  <span class="p">=</span> <span class="s">&#34;Eviction&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">EvictionKind</span> <span class="p">=</span> <span class="s">&#34;Eviction&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// rbac注解与webhook注解
</span></span></span><span class="line"><span class="cl"><span class="c1">// +kubebuilder:rbac:groups=&#34;&#34;,resources=pods,verbs=get;list
</span></span></span><span class="line"><span class="cl"><span class="c1">// +kubebuilder:webhook:path=/validate-v1-pod-eviction,admissionReviewVersions=v1;v1beta1,sideEffects=NoneOnDryRun,matchPolicy=Equivalent,mutating=false,failurePolicy=fail,groups=&#34;&#34;,resources=pods/eviction,verbs=create,versions=v1,name=veviction.kb.io
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// EvictionValidator validates Pods Eviction event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">EvictionValidator</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span>  <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span>  <span class="nx">client</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span>     <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl">	<span class="nx">decoder</span> <span class="o">*</span><span class="nx">admission</span><span class="p">.</span><span class="nx">Decoder</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// EvictionValidator 解析Eviction, 格式化返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">EvictionValidator</span><span class="p">)</span> <span class="nf">Handle</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">req</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Response</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nf">WithValues</span><span class="p">(</span><span class="s">&#34;eviction&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s/%s&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;start handle eviction&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Operation</span> <span class="o">!=</span> <span class="nx">admissionv1</span><span class="p">.</span><span class="nx">Create</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;skip none create request, verb: %s&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Operation</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">req</span><span class="p">.</span><span class="nx">DryRun</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="nx">req</span><span class="p">.</span><span class="nx">DryRun</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;skip dry run request&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Kind</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">!=</span> <span class="nx">EvictionKind</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;expected request %s but got %s&#34;</span><span class="p">,</span> <span class="nx">EvictionKind</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Kind</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Errored</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unexpected kind %v&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Kind</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">eviction</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nf">getEviction</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;failed to decode eviction&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Errored</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;reveice new obj, obj: %+#v&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">eviction</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">eviction</span><span class="p">.</span><span class="nx">DeleteOptions</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">eviction</span><span class="p">.</span><span class="nx">DeleteOptions</span><span class="p">.</span><span class="nx">DryRun</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;skip eviction dry run request&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nf">handleEviction</span><span class="p">(</span><span class="nx">eviction</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Errored</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;handle eviction success&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">admission</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// EvictionValidator implements admission.DecoderInjector.
</span></span></span><span class="line"><span class="cl"><span class="c1">// A decoder will be automatically injected.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// InjectDecoder injects the decoder.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">EvictionValidator</span><span class="p">)</span> <span class="nf">InjectDecoder</span><span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">admission</span><span class="p">.</span><span class="nx">Decoder</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">v</span><span class="p">.</span><span class="nx">decoder</span> <span class="p">=</span> <span class="nx">d</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 解析Eviction
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">EvictionValidator</span><span class="p">)</span> <span class="nf">getEviction</span><span class="p">(</span><span class="nx">req</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">obj</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">decoder</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">obj</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">eviction</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">scheme</span><span class="p">.</span><span class="nf">Convert</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">eviction</span><span class="p">,</span> <span class="kc">nil</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">eviction</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 处理驱逐事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">EvictionValidator</span><span class="p">)</span> <span class="nf">handleEviction</span><span class="p">(</span><span class="nx">eviction</span> <span class="o">*</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">podNamespacedName</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">NamespacedName</span><span class="p">{</span><span class="nx">Namespace</span><span class="p">:</span> <span class="nx">eviction</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span> <span class="nx">Name</span><span class="p">:</span> <span class="nx">eviction</span><span class="p">.</span><span class="nx">Name</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">podNamespacedName</span><span class="p">,</span> <span class="nx">pod</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">v</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;get eviction pod: %#v&#34;</span><span class="p">,</span> <span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 注册Webhook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewEvictionWebhook</span><span class="p">(</span><span class="nx">mgr</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Manager</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">EvictionValidator</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetClient</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">:</span>    <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetLogger</span><span class="p">().</span><span class="nf">WithName</span><span class="p">(</span><span class="nx">WebhookName</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">mgr</span><span class="p">.</span><span class="nf">GetWebhookServer</span><span class="p">().</span><span class="nf">Register</span><span class="p">(</span><span class="s">&#34;/validate-v1-pod-eviction&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">webhook</span><span class="p">.</span><span class="nx">Admission</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Handler</span><span class="p">:</span> <span class="nx">w</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>特别注意的是，Eviction包括v1、v1beat1两个版本，解析时需要可以全部转换为v1方便处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">webhook</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">policyv1</span> <span class="s">&#34;k8s.io/api/policy/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">policyv1beta1</span> <span class="s">&#34;k8s.io/api/policy/v1beta1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/conversion&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/runtime&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">RegisterConversion</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nf">AddConversionFunc</span><span class="p">((</span><span class="o">*</span><span class="nx">policyv1beta1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">)(</span><span class="kc">nil</span><span class="p">),</span> <span class="p">(</span><span class="o">*</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">)(</span><span class="kc">nil</span><span class="p">),</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">scope</span> <span class="nx">conversion</span><span class="p">.</span><span class="nx">Scope</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nf">ConvertV1beta1EvictionToV1Eviction</span><span class="p">(</span><span class="nx">a</span><span class="p">.(</span><span class="o">*</span><span class="nx">policyv1beta1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">),</span> <span class="nx">b</span><span class="p">.(</span><span class="o">*</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">),</span> <span class="nx">scope</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 注册转换函数v1beta1-&gt;v1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">ConvertV1beta1EvictionToV1Eviction</span><span class="p">(</span><span class="nx">in</span> <span class="o">*</span><span class="nx">policyv1beta1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">,</span> <span class="nx">out</span> <span class="o">*</span><span class="nx">policyv1</span><span class="p">.</span><span class="nx">Eviction</span><span class="p">,</span> <span class="nx">s</span> <span class="nx">conversion</span><span class="p">.</span><span class="nx">Scope</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span><span class="p">.</span><span class="nx">ObjectMeta</span> <span class="p">=</span> <span class="nx">in</span><span class="p">.</span><span class="nx">ObjectMeta</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span><span class="p">.</span><span class="nx">DeleteOptions</span> <span class="p">=</span> <span class="nx">in</span><span class="p">.</span><span class="nx">DeleteOptions</span><span class="p">.</span><span class="nf">DeepCopy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>至此，大体框架完成，需要部署建议使用cert-manager来注入证书，不需要自己手动再生成。</p>
<h3 id="测试" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95" class="header-mark"></a>测试</h3><p>通过<a href="https://github.com/ueokande/kubectl-evict" target="_blank" rel="noopener noreffer">kubectl-evict</a>驱逐pod，在operator日志中显示已捕获事件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1.6572752110781207e+09  DEBUG   controller-runtime.webhook.webhooks     received request        {&#34;webhook&#34;: &#34;/validate-v1-pod-eviction&#34;, &#34;UID&#34;: &#34;4f98f064-97c1-4ada-a9d8-0946afb11eba&#34;, &#34;kind&#34;: &#34;policy/v1beta1, Kind=Eviction&#34;, &#34;resource&#34;: {&#34;group&#34;:&#34;&#34;,&#34;version&#34;:&#34;v1&#34;,&#34;resource&#34;:&#34;pods&#34;}}
</span></span><span class="line"><span class="cl">1.6572752110781898e+09  INFO    Eviction        start handle eviction   {&#34;eviction&#34;: &#34;default/nginx-6799fc88d8-drkc4&#34;}
</span></span><span class="line"><span class="cl">1.6572752110787241e+09  INFO    Eviction        reveice new obj, obj: v1.Eviction{TypeMeta:v1.TypeMeta{Kind:&#34;&#34;, APIVersion:&#34;&#34;}, ObjectMeta:v1.ObjectMeta{Name:&#34;nginx-6799fc88d8-drkc4&#34;, GenerateName:&#34;&#34;, Namespace:&#34;default&#34;, SelfLink:&#34;&#34;, UID:&#34;&#34;, ResourceVersion:&#34;&#34;, Generation:0, CreationTimestamp:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), DeletionTimestamp:&lt;nil&gt;, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ZZZ_DeprecatedClusterName:&#34;&#34;, ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:&#34;kubectl-evict&#34;, Operation:&#34;Update&#34;, APIVersion:&#34;policy/v1beta1&#34;, Time:time.Date(2022, time.July, 8, 10, 13, 31, 0, time.Local), FieldsType:&#34;FieldsV1&#34;, FieldsV1:(*v1.FieldsV1)(0xc000479a10), Subresource:&#34;&#34;}}}, DeleteOptions:(*v1.DeleteOptions)(0xc00060dc20)}    {&#34;eviction&#34;: &#34;default/nginx-6799fc88d8-drkc4&#34;}
</span></span><span class="line"><span class="cl">1.6572752111794329e+09  INFO    Eviction        get eviction pod: &amp;v1.Pod{TypeMeta:v1.TypeMeta{Kind:&#34;Pod&#34;, APIVersion:&#34;v1&#34;}, ObjectMeta:v1.ObjectMeta{Name:&#34;nginx-6799fc88d8-drkc4&#34;...
</span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>通过Webhook可以实现对驱逐事件的捕捉，但也有一些地方需要注意</p>
<ul>
<li>如果处理逻辑比较复杂，尽量通过Webhook生成其他资源如CRD，Controller监听CRD再来处理其他的处理，防止Webhook处理超时，而且Controller遇到异常会再次重试</li>
<li>目前Webhook对于Eviction子资源，无法通过<code>objectSelector</code>选择特定的Pod，除非调用者在Eviction对象中包含了Pod的Labels</li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>手写一个Kubernetes CNI网络插件</title>
    <link>https://qingwave.github.io/how-to-write-k8s-cni/</link>
    <pubDate>Fri, 01 Apr 2022 05:56:01 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/how-to-write-k8s-cni/</guid>
    <description><![CDATA[<p>CNI(Container Network Interface) 即容器的网络API接口，在Kubernetes中通过CNI来扩展网络功能，今天我们从零开始实现一个自己的CNI网络插件。</p>
<p>本文所有代码见:</p>
<blockquote>
<p><a href="https://github.com/qingwave/mycni" target="_blank" rel="noopener noreffer">https://github.com/qingwave/mycni</a></p>
</blockquote>
<h2 id="cni简介" class="headerLink">
    <a href="#cni%e7%ae%80%e4%bb%8b" class="header-mark"></a>CNI简介</h2><p>Kubernetes提供了很多扩展点，通过CNI网络插件可以支持不同的网络设施，大大提供了系统的灵活性，目前也已成为容器网络领域的标准。</p>
<p>Kubernetes与CNI的交互逻辑如下：


</p>
<p>Kubelet监听到Pod调度到当前节点后，通过rpc调用CRI(containerd, cri-o等)，CRI创建Sandbox容器，初始化Cgroup与Namespace，然后再调用CNI插件分配IP，最后完成容器创建与启动。</p>
<p>不同于CRI、CSI通过rpc通信，CNI是通过二进制接口调用的，通过环境变量和标准输入传递具体网络配置，下图为Flannel CNI插件的工作流程，通过链式调用CNI插件实现对Pod的IP分配、网络配置：


</p>
<h2 id="实现cni" class="headerLink">
    <a href="#%e5%ae%9e%e7%8e%b0cni" class="header-mark"></a>实现CNI</h2><p>实现一个完整的K8s CNI插件需要满足以下几点要求：</p>
<ol>
<li>Pod IP分配，即IPAM功能</li>
<li>节点与其上所有Pod网络互通，以实现健康检查</li>
<li>集群内所有Pod可通信，包括同节点与不同节点</li>
<li>其他功能的支持，比如hostPort、兼容kube-proxy的iptables规则等</li>
</ol>
<p>我们主要实现前三点需求，通过Linux Bridge、Veth Pair以及路由来实现K8s网络方案。</p>
<p>网络架构如下：


</p>
<p>包括两个组件：</p>
<ol>
<li>mycni: CNI插件，实现IPAM，为Pod分配IP配置路由，通过网桥实现同节点上不同Pod的通信</li>
<li>mycnid: 节点上守护进程，监听K8s Node，获取各个节点CIDR写入路由</li>
</ol>
<h3 id="mycni" class="headerLink">
    <a href="#mycni" class="header-mark"></a>Mycni</h3><p>CNI官方已经提供了<a href="https://github.com/containernetworking/cni/blob/main/pkg/skel/skel.go#L267" target="_blank" rel="noopener noreffer">工具包</a>，我们只需要实现<code>cmdAdd, cmdCheck, cmdDel</code>接口即可实现一个CNI插件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">PluginMainWithError</span><span class="p">(</span><span class="nx">cmdAdd</span><span class="p">,</span> <span class="nx">cmdCheck</span><span class="p">,</span> <span class="nx">cmdDel</span> <span class="kd">func</span><span class="p">(</span><span class="nx">_</span> <span class="o">*</span><span class="nx">CmdArgs</span><span class="p">)</span> <span class="kt">error</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">versionInfo</span> <span class="nx">version</span><span class="p">.</span><span class="nx">PluginInfo</span><span class="p">,</span> <span class="nx">about</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">Error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">dispatcher</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Getenv</span><span class="p">:</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getenv</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Stdin</span><span class="p">:</span>  <span class="nx">os</span><span class="p">.</span><span class="nx">Stdin</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Stdout</span><span class="p">:</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Stderr</span><span class="p">:</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}).</span><span class="nf">pluginMain</span><span class="p">(</span><span class="nx">cmdAdd</span><span class="p">,</span> <span class="nx">cmdCheck</span><span class="p">,</span> <span class="nx">cmdDel</span><span class="p">,</span> <span class="nx">versionInfo</span><span class="p">,</span> <span class="nx">about</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们主要关注网络创建过程，实现IP分配与网桥配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">cmdAdd</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">skel</span><span class="p">.</span><span class="nx">CmdArgs</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 加载配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conf</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">config</span><span class="p">.</span><span class="nf">LoadCNIConfig</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">StdinData</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 存储本机IP分配列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">store</span><span class="p">.</span><span class="nf">NewStore</span><span class="p">(</span><span class="nx">conf</span><span class="p">.</span><span class="nx">DataDir</span><span class="p">,</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">s</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ipam服务，分配ip
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ipam</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">NewIPAM</span><span class="p">(</span><span class="nx">conf</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gateway</span> <span class="o">:=</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">Gateway</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ip</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">AllocateIP</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">ContainerID</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">IfName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建网桥，虚拟设备，并绑定到网桥
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">br</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bridge</span><span class="p">.</span><span class="nf">CreateBridge</span><span class="p">(</span><span class="nx">conf</span><span class="p">.</span><span class="nx">Bridge</span><span class="p">,</span> <span class="nx">mtu</span><span class="p">,</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">IPNet</span><span class="p">(</span><span class="nx">gateway</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bridge</span><span class="p">.</span><span class="nf">SetupVeth</span><span class="p">(</span><span class="nx">netns</span><span class="p">,</span> <span class="nx">br</span><span class="p">,</span> <span class="nx">mtu</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">IfName</span><span class="p">,</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">IPNet</span><span class="p">(</span><span class="nx">ip</span><span class="p">),</span> <span class="nx">gateway</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 返回网络配置信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">current</span><span class="p">.</span><span class="nx">Result</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">CNIVersion</span><span class="p">:</span> <span class="nx">current</span><span class="p">.</span><span class="nx">ImplementedSpecVersion</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">IPs</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">current</span><span class="p">.</span><span class="nx">IPConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Address</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">{</span><span class="nx">IP</span><span class="p">:</span> <span class="nx">ip</span><span class="p">,</span> <span class="nx">Mask</span><span class="p">:</span> <span class="nx">ipam</span><span class="p">.</span><span class="nf">Mask</span><span class="p">()},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Gateway</span><span class="p">:</span> <span class="nx">gateway</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">types</span><span class="p">.</span><span class="nf">PrintResult</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">CNIVersion</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="ipam" class="headerLink">
    <a href="#ipam" class="header-mark"></a>IPAM</h4><p>IPAM服务需要保证为Pod分配唯一的IP，K8s会为每个节点分配PodCIDR，只需要保证节点上所有Pod IP不冲突即可。</p>
<p>通过本地文件来存储已分配的IP，当新Pod创建时只需要检查已分配IP，通过CIDR取一个未使用的IP。通常做法是将IP信息存储在数据库中(etcd)，简单期间本文只使用文件存储。</p>
<p>首先需要保证并发请求时，IP分配不会冲突，可通过文件锁实现，存储实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">data</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">IPs</span>  <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">containerNetINfo</span> <span class="s">`json:&#34;ips&#34;`</span> <span class="c1">// 存储IP信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Last</span> <span class="kt">string</span>                      <span class="s">`json:&#34;last&#34;`</span><span class="c1">// 上一个分配IP
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Store</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">filemutex</span><span class="p">.</span><span class="nx">FileMutex</span> <span class="c1">// 文件锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">dir</span>      <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span>     <span class="o">*</span><span class="nx">data</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dataFile</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>分配IP代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">im</span> <span class="o">*</span><span class="nx">IPAM</span><span class="p">)</span> <span class="nf">AllocateIP</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">ifName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span> <span class="c1">// 上锁，防止冲突
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">defer</span> <span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">LoadData</span><span class="p">();</span> <span class="c1">// 加载存储中IP数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 根据容器id查询ip是否已分配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ip</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">GetIPByID</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ip</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ip</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 从上次已分配IP开始，依次检查，如果IP未使用则添加到文件中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">start</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">last</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">next</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">im</span><span class="p">.</span><span class="nf">NextIP</span><span class="p">(</span><span class="nx">start</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">IPOverflowError</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">last</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">im</span><span class="p">.</span><span class="nx">gateway</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">start</span> <span class="p">=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">gateway</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 分配IP
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">Contain</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">ifName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">next</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">start</span> <span class="p">=</span> <span class="nx">next</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">start</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">last</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;ip: %s&#34;</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;no available ip&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>IP分配过程如下：</p>
<ol>
<li>加文件锁，读取已分配IP</li>
<li>从上一个分配IP开始，遍历判断是否未分配</li>
<li>如果IP未使用，存储到文件中并返回</li>
</ol>
<h4 id="节点内通信" class="headerLink">
    <a href="#%e8%8a%82%e7%82%b9%e5%86%85%e9%80%9a%e4%bf%a1" class="header-mark"></a>节点内通信</h4><p>节点内通信通过网桥实现，创建一个虚拟设备对，分别绑定到Pod所在Namespace与网桥上，绑定IPAM分配的IP, 并设置默认路由。从而实现同一个节点上，Node-&gt;Pod与Pod之间的通信。</p>
<p>首先，如果网桥不存在则通过netlink库创建</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">CreateBridge</span><span class="p">(</span><span class="nx">bridge</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">mtu</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">gateway</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">)</span> <span class="p">(</span><span class="nx">netlink</span><span class="p">.</span><span class="nx">Link</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">l</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkByName</span><span class="p">(</span><span class="nx">bridge</span><span class="p">);</span> <span class="nx">l</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">l</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">br</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">netlink</span><span class="p">.</span><span class="nx">Bridge</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LinkAttrs</span><span class="p">:</span> <span class="nx">netlink</span><span class="p">.</span><span class="nx">LinkAttrs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>   <span class="nx">bridge</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">MTU</span><span class="p">:</span>    <span class="nx">mtu</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">TxQLen</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkAdd</span><span class="p">(</span><span class="nx">br</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">EEXIST</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">dev</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkByName</span><span class="p">(</span><span class="nx">bridge</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加地址，即Pod默认网关地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">AddrAdd</span><span class="p">(</span><span class="nx">dev</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">netlink</span><span class="p">.</span><span class="nx">Addr</span><span class="p">{</span><span class="nx">IPNet</span><span class="p">:</span> <span class="nx">gateway</span><span class="p">});</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 启动网桥
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkSetUp</span><span class="p">(</span><span class="nx">dev</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">dev</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>为容器创建虚拟网卡</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">SetupVeth</span><span class="p">(</span><span class="nx">netns</span> <span class="nx">ns</span><span class="p">.</span><span class="nx">NetNS</span><span class="p">,</span> <span class="nx">br</span> <span class="nx">netlink</span><span class="p">.</span><span class="nx">Link</span><span class="p">,</span> <span class="nx">mtu</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">ifName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">podIP</span> <span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">,</span> <span class="nx">gateway</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">hostIface</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">current</span><span class="p">.</span><span class="nx">Interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">netns</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">hostNS</span> <span class="nx">ns</span><span class="p">.</span><span class="nx">NetNS</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 在容器网络空间创建虚拟网卡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">hostVeth</span><span class="p">,</span> <span class="nx">containerVeth</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nf">SetupVeth</span><span class="p">(</span><span class="nx">ifName</span><span class="p">,</span> <span class="nx">mtu</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">hostNS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">hostIface</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="nx">hostVeth</span><span class="p">.</span><span class="nx">Name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// set ip for container veth
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">conLink</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkByName</span><span class="p">(</span><span class="nx">containerVeth</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 绑定Pod IP
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">AddrAdd</span><span class="p">(</span><span class="nx">conLink</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">netlink</span><span class="p">.</span><span class="nx">Addr</span><span class="p">{</span><span class="nx">IPNet</span><span class="p">:</span> <span class="nx">podIP</span><span class="p">});</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 启动网卡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkSetUp</span><span class="p">(</span><span class="nx">conLink</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 添加默认路径，网关即网桥的地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nf">AddDefaultRoute</span><span class="p">(</span><span class="nx">gateway</span><span class="p">,</span> <span class="nx">conLink</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// need to lookup hostVeth again as its index has changed during ns move
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">hostVeth</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkByName</span><span class="p">(</span><span class="nx">hostIface</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to lookup %q: %v&#34;</span><span class="p">,</span> <span class="nx">hostIface</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 将虚拟网卡另一端绑定到网桥上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">LinkSetMaster</span><span class="p">(</span><span class="nx">hostVeth</span><span class="p">,</span> <span class="nx">br</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to connect %q to bridge %v: %v&#34;</span><span class="p">,</span> <span class="nx">hostVeth</span><span class="p">.</span><span class="nf">Attrs</span><span class="p">().</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">br</span><span class="p">.</span><span class="nf">Attrs</span><span class="p">().</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>至此，CNI插件的功能实现完成。</p>
<h3 id="mycnid" class="headerLink">
    <a href="#mycnid" class="header-mark"></a>Mycnid</h3><p><code>mycnid</code>为节点上的守护进程，实现不同节点的Pod通信，主要功能包括：</p>
<ol>
<li>监听K8s Nodes, 获取本节点的PodCIDR写入配置文件(默认位置在<code>/run/mycni/subnet.json</code>)</li>
<li>为其他节点添加路由(<code>ip route add podCIDR via nodeip</code>)</li>
<li>一些初始化配置，写入默认的Iptables规则，初始化网桥</li>
</ol>
<h4 id="节点间通信" class="headerLink">
    <a href="#%e8%8a%82%e7%82%b9%e9%97%b4%e9%80%9a%e4%bf%a1" class="header-mark"></a>节点间通信</h4><p>通过Controller监听Node资源，当前有节点Add/Delete时，调用Reconcile同步路由</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="nf">Reconcile</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">req</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="nx">reconcile</span><span class="p">.</span><span class="nx">Result</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">result</span> <span class="o">:=</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Result</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodes</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">NodeList</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取所有节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">List</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取节点的CIDR，生成路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cidrs</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">netlink</span><span class="p">.</span><span class="nx">Route</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">node</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodes</span><span class="p">.</span><span class="nx">Items</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="nx">r</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">nodeName</span> <span class="p">{</span> <span class="c1">// 跳过当前节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 生成期望路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">_</span><span class="p">,</span> <span class="nx">cidr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">ParseCIDR</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">PodCIDR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodeip</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getNodeInternalIP</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">route</span> <span class="o">:=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nx">Route</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Dst</span><span class="p">:</span>        <span class="nx">cidr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Gw</span><span class="p">:</span>         <span class="nx">nodeip</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ILinkIndex</span><span class="p">:</span> <span class="nx">r</span><span class="p">.</span><span class="nx">hostLink</span><span class="p">.</span><span class="nf">Attrs</span><span class="p">().</span><span class="nx">Index</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cidrs</span><span class="p">[</span><span class="nx">cidr</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="nx">route</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 与本地的路由对比，不存在则创建
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">currentRoute</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">cidr</span><span class="p">.</span><span class="nf">String</span><span class="p">()];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nf">isRouteEqual</span><span class="p">(</span><span class="nx">route</span><span class="p">,</span> <span class="nx">currentRoute</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">ReplaceRoute</span><span class="p">(</span><span class="nx">currentRoute</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">addRoute</span><span class="p">(</span><span class="nx">route</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 删除多余的路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">cidr</span><span class="p">,</span> <span class="nx">route</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">r</span><span class="p">.</span><span class="nx">routes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">cidrs</span><span class="p">[</span><span class="nx">cidr</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">delRoute</span><span class="p">(</span><span class="nx">route</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 创建路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="nf">addRoute</span><span class="p">(</span><span class="nx">route</span> <span class="nx">netlink</span><span class="p">.</span><span class="nx">Route</span><span class="p">)</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">r</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">route</span><span class="p">.</span><span class="nx">Dst</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="nx">route</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;add route: %s&#34;</span><span class="p">,</span> <span class="nx">route</span><span class="p">.</span><span class="nf">String</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">netlink</span><span class="p">.</span><span class="nf">RouteAdd</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">route</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;failed to add route&#34;</span><span class="p">,</span> <span class="s">&#34;route&#34;</span><span class="p">,</span> <span class="nx">route</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要步骤包括：</p>
<ol>
<li>当前Node变化时获取集群中所有Node网络信息（PodCIDR、IP等）</li>
<li>与节点上路由进行比对，若缺少则添加，若宿主机上存在多余的路由则删除</li>
</ol>
<blockquote>
<p>为什么不是直接对变化的Node修改对应的路由？</p>
<p>通过获取所有节点网络信息与宿主机进行路由比对，符合Kubernetes编程规范，声明式编程而不是过程式，这种方式不会丢事件。即使手动误删了路由，下次同步也会将其恢复。</p>
</blockquote>
<h4 id="其他配置" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96%e9%85%8d%e7%bd%ae" class="header-mark"></a>其他配置</h4><p>如果使用Docker的话，Docker会禁止非Docker网桥的流量转发，需要配置iptables</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">iptables -A FORWARD -i <span class="si">${</span><span class="nv">bridge</span><span class="si">}</span> -j ACCEPT
</span></span></code></pre></div><p>大部分集群允许Pod访问外部网络，需要配置SNAT：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo iptables -t nat -A POSTROUTING -s <span class="nv">$cidr</span> -j MASQUERADE
</span></span><span class="line"><span class="cl"><span class="c1"># 另外允许主机网卡转发</span>
</span></span><span class="line"><span class="cl">iptables -A FORWARD -i <span class="nv">$hostNetWork</span> -j ACCEPT
</span></span></code></pre></div><p>代码如下，通过<code>github.com/coreos/go-iptables/iptables</code>可以配置iptables：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">addIptables</span><span class="p">(</span><span class="nx">bridgeName</span><span class="p">,</span> <span class="nx">hostDeviceName</span><span class="p">,</span> <span class="nx">nodeCIDR</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ipt</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">iptables</span><span class="p">.</span><span class="nf">NewWithProtocol</span><span class="p">(</span><span class="nx">iptables</span><span class="p">.</span><span class="nx">ProtocolIPv4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ipt</span><span class="p">.</span><span class="nf">AppendUnique</span><span class="p">(</span><span class="s">&#34;filter&#34;</span><span class="p">,</span> <span class="s">&#34;FORWARD&#34;</span><span class="p">,</span> <span class="s">&#34;-i&#34;</span><span class="p">,</span> <span class="nx">bridgeName</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="s">&#34;ACCEPT&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ipt</span><span class="p">.</span><span class="nf">AppendUnique</span><span class="p">(</span><span class="s">&#34;filter&#34;</span><span class="p">,</span> <span class="s">&#34;FORWARD&#34;</span><span class="p">,</span> <span class="s">&#34;-i&#34;</span><span class="p">,</span> <span class="nx">hostDeviceName</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="s">&#34;ACCEPT&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ipt</span><span class="p">.</span><span class="nf">AppendUnique</span><span class="p">(</span><span class="s">&#34;nat&#34;</span><span class="p">,</span> <span class="s">&#34;POSTROUTING&#34;</span><span class="p">,</span> <span class="s">&#34;-s&#34;</span><span class="p">,</span> <span class="nx">nodeCIDR</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="s">&#34;MASQUERADE&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="演示" class="headerLink">
    <a href="#%e6%bc%94%e7%a4%ba" class="header-mark"></a>演示</h2><p>通过kind模拟创建多节点k8s集群<code>kind create cluster --config deploy/kind.yaml</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># cat deploy/kind.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Cluster</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kind.x-k8s.io/v1alpha4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networking</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 禁止默认的CNI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disableDefaultCNI</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 包括一个master节点，三个worker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">control-plane</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">worker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">worker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">worker</span><span class="w">
</span></span></span></code></pre></div><p>创建完成后，可以看到所有节点都是NotReady，这是因为我们没有装CNI</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mycni kubectl get no
</span></span><span class="line"><span class="cl">NAME                 STATUS     ROLES                  AGE   VERSION
</span></span><span class="line"><span class="cl">kind-control-plane   NotReady   control-plane,master   37s   v1.23.4
</span></span><span class="line"><span class="cl">kind-worker          NotReady   &lt;none&gt;                 18s   v1.23.4
</span></span><span class="line"><span class="cl">kind-worker2         NotReady   &lt;none&gt;                 18s   v1.23.4
</span></span><span class="line"><span class="cl">kind-worker3         NotReady   &lt;none&gt;                 18s   v1.23.4
</span></span></code></pre></div><p>接下编译我们的mycni镜像，通过<code>kind load docker-image</code>加载到集群中。</p>
<p>部署CNI插件，这里参考了Flannel的部署，主要是通过Daemonset在每个节点上部署一个Pod，初始化容器将mycni检查二进制文件拷贝到/opt/cni/bin，将配置文件拷贝到/etc/cni/net.d，再启动mycnid容器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubectl apply -f deploy/mycni.yaml
</span></span></code></pre></div><p>部署完成后，可以看到所有节点状态变为Ready。</p>
<p>最后测试Pod的网络配置情况，部署一个多副本Alpine Deployment</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create deployment cni-test --image<span class="o">=</span>alpine --replicas<span class="o">=</span><span class="m">6</span> -- top
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl get po -owide
</span></span><span class="line"><span class="cl">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE           NOMINATED NODE   READINESS GATES
</span></span><span class="line"><span class="cl">cni-test-5df744744c-5wthb   1/1     Running   <span class="m">0</span>          12s   10.244.2.3   kind-worker2   &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">cni-test-5df744744c-7cdll   1/1     Running   <span class="m">0</span>          12s   10.244.1.2   kind-worker    &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">cni-test-5df744744c-jssjk   1/1     Running   <span class="m">0</span>          12s   10.244.3.2   kind-worker3   &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">cni-test-5df744744c-jw6xv   1/1     Running   <span class="m">0</span>          12s   10.244.1.3   kind-worker    &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">cni-test-5df744744c-klbr4   1/1     Running   <span class="m">0</span>          12s   10.244.3.3   kind-worker3   &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">cni-test-5df744744c-w7q9t   1/1     Running   <span class="m">0</span>          12s   10.244.2.2   kind-worker2   &lt;none&gt;           &lt;none&gt;
</span></span></code></pre></div><p>所有Pod可以正常启动，首先测试Node与Pod的通信, 结果如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">root@kind-worker:/# ping 10.244.1.2
</span></span><span class="line"><span class="cl">PING 10.244.1.2 <span class="o">(</span>10.244.1.2<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.2: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.101 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.2: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.049 ms
</span></span><span class="line"><span class="cl">--- 10.244.1.2 ping statistics ---
</span></span></code></pre></div><p>同节点上的Pod通信：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~ kubectl <span class="nb">exec</span> cni-test-5df744744c-7cdll -- ping 10.244.1.3 -c <span class="m">4</span>
</span></span><span class="line"><span class="cl">PING 10.244.1.3 <span class="o">(</span>10.244.1.3<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.3: <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.118 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.3: <span class="nv">seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.077 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.3: <span class="nv">seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.082 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.1.3: <span class="nv">seq</span><span class="o">=</span><span class="m">3</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.085 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- 10.244.1.3 ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">4</span> packets transmitted, <span class="m">4</span> packets received, 0% packet loss
</span></span><span class="line"><span class="cl">round-trip min/avg/max <span class="o">=</span> 0.077/0.090/0.118 ms
</span></span></code></pre></div><p>不同节点的Pod通信</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> ~ kubectl <span class="nb">exec</span> cni-test-5df744744c-7cdll -- ping 10.244.2.2 -c <span class="m">4</span>
</span></span><span class="line"><span class="cl">PING 10.244.2.2 <span class="o">(</span>10.244.2.2<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.2.2: <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">62</span> <span class="nv">time</span><span class="o">=</span>0.298 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.2.2: <span class="nv">seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">62</span> <span class="nv">time</span><span class="o">=</span>0.234 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.2.2: <span class="nv">seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">62</span> <span class="nv">time</span><span class="o">=</span>0.180 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.244.2.2: <span class="nv">seq</span><span class="o">=</span><span class="m">3</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">62</span> <span class="nv">time</span><span class="o">=</span>0.234 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- 10.244.2.2 ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">4</span> packets transmitted, <span class="m">4</span> packets received, 0% packet loss
</span></span><span class="line"><span class="cl">round-trip min/avg/max <span class="o">=</span> 0.180/0.236/0.298 ms
</span></span></code></pre></div><p>Pod访问外网</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~ kubectl <span class="nb">exec</span> cni-test-5df744744c-7cdll -- ping www.baidu.com -c <span class="m">4</span>
</span></span><span class="line"><span class="cl">PING www.baidu.com <span class="o">(</span>103.235.46.39<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.39: <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">47</span> <span class="nv">time</span><span class="o">=</span>312.115 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.39: <span class="nv">seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">47</span> <span class="nv">time</span><span class="o">=</span>311.126 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.39: <span class="nv">seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">47</span> <span class="nv">time</span><span class="o">=</span>311.653 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 103.235.46.39: <span class="nv">seq</span><span class="o">=</span><span class="m">3</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">47</span> <span class="nv">time</span><span class="o">=</span>311.250 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- www.baidu.com ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">4</span> packets transmitted, <span class="m">4</span> packets received, 0% packet loss
</span></span><span class="line"><span class="cl">round-trip min/avg/max <span class="o">=</span> 311.126/311.536/312.115 ms
</span></span></code></pre></div><p>通过测试验证，我们实现的mycni满足k8s的CNI网络插件的要求，可以实现集群内所有Pod的通信，以及Node与Pod的通信，Pod也可以正常访问外网。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文首先介绍了CNI的架构，通过手动实现一个CNI网络插件，可以更加深入的了解CNI的工作原理以及Linux相关网络知识。</p>
<p>欢迎指正，所有代码见：</p>
<blockquote>
<p><a href="https://github.com/qingwave/mycni" target="_blank" rel="noopener noreffer">https://github.com/qingwave/mycni</a></p>
</blockquote>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ul>
<li><a href="https://www.cni.dev/docs/" target="_blank" rel="noopener noreffer">https://www.cni.dev/docs/</a></li>
<li><a href="https://ronaknathani.com/blog/2020/08/how-a-kubernetes-pod-gets-an-ip-address/" target="_blank" rel="noopener noreffer">https://ronaknathani.com/blog/2020/08/how-a-kubernetes-pod-gets-an-ip-address/</a></li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>K8S中为什么需要Unstructured对象</title>
    <link>https://qingwave.github.io/k8s-unstructured-object/</link>
    <pubDate>Wed, 15 Dec 2021 15:33:54 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/k8s-unstructured-object/</guid>
    <description><![CDATA[<p>熟悉client-go的同学都知道，不止有<code>Deployment</code>、<code>Pod</code>这些结构化对象，也提供了<code>unstructured.Unstructured</code>对象，那么为什么需要非结构对象？</p>
<h2 id="structured-vs-unstructured" class="headerLink">
    <a href="#structured-vs-unstructured" class="header-mark"></a>Structured vs Unstructured</h2><p>结构化对象是指可以用Go Struct表示的对象，比如<a href="https://pkg.go.dev/k8s.io/api/apps/v1#Deployment" target="_blank" rel="noopener noreffer">Deployment</a>在<code>k8s.io/api/apps/v1</code>定义</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Deployment</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="s">`json:&#34;,inline&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Standard object&#39;s metadata.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span> <span class="s">`json:&#34;metadata,omitempty&#34; protobuf:&#34;bytes,1,opt,name=metadata&#34;`</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们可以直接通过<code>appsv1.Deployment</code>来安全地定义<code>Deployment</code>的各个字段，通常创建过程如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">clientset</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">deployment</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">deployment</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="s">&#34;example&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">deployment</span><span class="p">.</span><span class="nx">Spec</span> <span class="p">=</span> <span class="nx">appsv1</span><span class="p">.</span><span class="nx">DeploymentSpec</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">clientset</span><span class="p">.</span><span class="nf">AppsV1</span><span class="p">().</span><span class="nf">Deployments</span><span class="p">(</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">NamespaceDefault</span><span class="p">).</span><span class="nf">Create</span><span class="p">(</span><span class="nx">deployment</span><span class="p">)</span>
</span></span></code></pre></div><p>而对于<code>Unstructured</code>定义在<code>k8s.io/apimachinery/pkg/apis/meta/v1/unstructured</code>中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Unstructured</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Object is a JSON compatible map with string, float, int, bool, []interface{}, or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// map[string]interface{}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// children.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Object</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过定义<code>map[string]interface{}</code>可以来表示任意的<code>JSON/YAML</code>对象，而不需要引用<code>Go Struct</code>。可以通过<code>Dynamic client</code>来创建非结构化对象，以下是使用<code>Unstructured</code>创建Deployment的样例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">client</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">dynamic</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">deploymentRes</span> <span class="o">:=</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionResource</span><span class="p">{</span><span class="nx">Group</span><span class="p">:</span> <span class="s">&#34;apps&#34;</span><span class="p">,</span> <span class="nx">Version</span><span class="p">:</span> <span class="s">&#34;v1&#34;</span><span class="p">,</span> <span class="nx">Resource</span><span class="p">:</span> <span class="s">&#34;deployments&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">deployment</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Object</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s">&#34;apps/v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;kind&#34;</span><span class="p">:</span>       <span class="s">&#34;Deployment&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;metadata&#34;</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;demo-deployment&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;spec&#34;</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;replicas&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="o">...</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">client</span><span class="p">.</span><span class="nf">Resource</span><span class="p">(</span><span class="nx">deploymentRes</span><span class="p">).</span><span class="nf">Namespace</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Create</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">deployment</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">{})</span>
</span></span></code></pre></div><h2 id="why" class="headerLink">
    <a href="#why" class="header-mark"></a>Why</h2><p>那么什么情况下需要使用到<code>Unstructured</code>对象呢，结构化对象有着安全地类型校验，通过<code>clientset</code>可以方便地增删改查。而非结构化对象只能手动设置<code>GVR</code>、通过<code>map[string]interface{}</code>设置各个字段。</p>
<p>假想你作为一个Paas平台的开发者，需要为每个用户传入的<code>YAML/JSON</code>资源添加label，比如添加user信息<code>creator=xxx</code>。如果用户只能创建Deployment，那么我们可以将资源解析成<code>appsv1.Deployment{}</code>对象，再添加label。但是通常会传入多种资源，不仅有内置的<code>Deployment</code>、<code>Service</code>等，也可能会包含自定义资源。由于不确定资源类型，我们只能通过<code>Unstructured</code>对象来解析。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">manifest</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: apps/v1
</span></span></span><span class="line"><span class="cl"><span class="s">kind: Deployment
</span></span></span><span class="line"><span class="cl"><span class="s">metadata:
</span></span></span><span class="line"><span class="cl"><span class="s">  name: example
</span></span></span><span class="line"><span class="cl"><span class="s">spec:
</span></span></span><span class="line"><span class="cl"><span class="s">  ...
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl"><span class="c1">// convert yaml to unstructured
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">obj</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">dec</span> <span class="o">:=</span> <span class="nx">yaml</span><span class="p">.</span><span class="nf">NewDecodingSerializer</span><span class="p">(</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">UnstructuredJSONScheme</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">dec</span><span class="p">.</span><span class="nf">Decode</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">manifest</span><span class="p">),</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// add label
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">labels</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.</span><span class="nf">GetLabels</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">labels</span><span class="p">[</span><span class="s">&#34;creator&#34;</span><span class="p">]=</span><span class="s">&#34;userxxx&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// set label
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nf">SetLabels</span><span class="p">(</span><span class="nx">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">dynamicClient</span><span class="p">.</span><span class="nf">Resource</span><span class="p">().</span><span class="nf">Namespace</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Create</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">obj</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">{})</span>
</span></span></code></pre></div><p>当实现对多种资源的通用处理（上面的示例），或者运行时才能确定的对象（例如根据配置监听不同对象），又或者不愿引入额外的依赖（处理大量的CRD），可以使用<code>Unstructured</code>对象来处理以上情况。</p>
<h2 id="how" class="headerLink">
    <a href="#how" class="header-mark"></a>How</h2><p>不管是结构化对象还是非结构化，最终会调用k8s的Rest API，例如<code>Create Deployment</code>时</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">POST /apis/apps/v1/namespaces/{namespace}/deployments/{name}
</span></span></code></pre></div><p>K8s中<code>GVR</code>(GroupVersionResource)可以唯一表征资源对象，用来组成Rest API, 如上Group为apps、Version为v1、Resource是<code>deployments</code>；<code>GVK</code>(GroupVersionKind)可以来标识类型（如Deployment）。Resource与Kind的对应关系可以通过<code>kubectl api-resources</code>查看。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~ kubectl api-resources --api-group apps
</span></span><span class="line"><span class="cl">NAME                  SHORTNAMES   APIVERSION   NAMESPACED   KIND
</span></span><span class="line"><span class="cl">controllerrevisions                apps/v1      <span class="nb">true</span>         ControllerRevision
</span></span><span class="line"><span class="cl">daemonsets            ds           apps/v1      <span class="nb">true</span>         DaemonSet
</span></span><span class="line"><span class="cl">deployments           deploy       apps/v1      <span class="nb">true</span>         Deployment
</span></span><span class="line"><span class="cl">replicasets           rs           apps/v1      <span class="nb">true</span>         ReplicaSet
</span></span><span class="line"><span class="cl">statefulsets          sts          apps/v1      <span class="nb">true</span>         StatefulSet
</span></span></code></pre></div><p>对于结构化对象，使用<code>clientset</code>可以获取到<code>GVR</code>，最后调用<code>restClient</code>组成到Rest API</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">clientset</span><span class="p">.</span><span class="nf">AppsV1</span><span class="p">().</span><span class="nf">Deployments</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Create</span><span class="p">(</span><span class="nx">deployment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Create takes the representation of a deployment and creates it.  Returns the server&#39;s representation of the deployment, and an error, if there is any.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">deployments</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">deployment</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">,</span> <span class="nx">opts</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">)</span> <span class="p">(</span><span class="nx">result</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">result</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Post</span><span class="p">().</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Namespace</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">ns</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Resource</span><span class="p">(</span><span class="s">&#34;deployments&#34;</span><span class="p">).</span> <span class="c1">// Resource设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nf">VersionedParams</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">.</span><span class="nx">ParameterCodec</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Body</span><span class="p">(</span><span class="nx">deployment</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Do</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Into</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>对于非结构化对象，需要用户手动填充<code>GVR</code>，如果只知道<code>GVK</code>可以通过<code>restMapping</code>获取</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">deploymentRes</span> <span class="o">:=</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionResource</span><span class="p">{</span><span class="nx">Group</span><span class="p">:</span> <span class="s">&#34;apps&#34;</span><span class="p">,</span> <span class="nx">Version</span><span class="p">:</span> <span class="s">&#34;v1&#34;</span><span class="p">,</span> <span class="nx">Resource</span><span class="p">:</span> <span class="s">&#34;deployments&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">dynamicClient</span><span class="p">.</span><span class="nf">Resource</span><span class="p">().</span><span class="nf">Namespace</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Create</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Create具体实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">dynamicResourceClient</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">obj</span> <span class="o">*</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">,</span> <span class="nx">opts</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">,</span> <span class="nx">subresources</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">outBytes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">Encode</span><span class="p">(</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">UnstructuredJSONScheme</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">subresources</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">accessor</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">meta</span><span class="p">.</span><span class="nf">Accessor</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span> <span class="p">=</span> <span class="nx">accessor</span><span class="p">.</span><span class="nf">GetName</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 调用restClient
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Post</span><span class="p">().</span>
</span></span><span class="line"><span class="cl">		<span class="nf">AbsPath</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nf">makeURLSegments</span><span class="p">(</span><span class="nx">name</span><span class="p">),</span> <span class="nx">subresources</span><span class="o">...</span><span class="p">)</span><span class="o">...</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Body</span><span class="p">(</span><span class="nx">outBytes</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">SpecificallyVersionedParams</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">dynamicParameterCodec</span><span class="p">,</span> <span class="nx">versionV1</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Do</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文描述Unstructured对象在K8s中的使用场景、使用方式，与Structured对象的对比，以及相关代码解析。</p>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ul>
<li><a href="https://kubernetes.io/zh/docs/reference/using-api/api-concepts/" target="_blank" rel="noopener noreffer">https://kubernetes.io/zh/docs/reference/using-api/api-concepts/</a></li>
</ul>
]]></description>
</item><item>
    <title>Kubernetes调试利器Nsenter</title>
    <link>https://qingwave.github.io/k8s-debug-nsenter/</link>
    <pubDate>Fri, 12 Nov 2021 09:17:35 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-debug-nsenter/</guid>
    <description><![CDATA[<p>在k8s云环境中，我们需要在容器内抓包进行Debug, 但通常大多容器都没有安装tcpdump以及其他网络工具；在托管k8s中我们想登录node，不是没权限就是步骤太麻烦。本文的主角<code>nsenter</code>正是很擅长解决这些问题，<code>nsenter</code>可以进入指定<code>namespace</code>的工具，一般用来在容器环境中进行调试。</p>
<h2 id="调试容器网络" class="headerLink">
    <a href="#%e8%b0%83%e8%af%95%e5%ae%b9%e5%99%a8%e7%bd%91%e7%bb%9c" class="header-mark"></a>调试容器网络</h2><p>通过<code>nsenter</code>可以轻松在宿主机进入容器的网络命令空间，命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 设置containerid</span>
</span></span><span class="line"><span class="cl"><span class="nv">containerid</span><span class="o">=</span>xxx 
</span></span><span class="line"><span class="cl"><span class="c1"># 获取容器主进程</span>
</span></span><span class="line"><span class="cl"><span class="nv">pid</span><span class="o">=</span><span class="k">$(</span>docker inspect -f <span class="o">{{</span>.State.Pid<span class="o">}}</span> <span class="nv">$containerid</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 进入容器networker namespace</span>
</span></span><span class="line"><span class="cl">nsenter -n --target <span class="nv">$pid</span>
</span></span></code></pre></div><p>之后便可以使用宿主机各种工具<code>tcpdump</code>, <code>netstat</code>等命令</p>
<h2 id="登录k8s节点" class="headerLink">
    <a href="#%e7%99%bb%e5%bd%95k8s%e8%8a%82%e7%82%b9" class="header-mark"></a>登录k8s节点</h2><p>如果只有<code>Apiserver</code>权限，登录k8s节点也可以使用<code>nsenter</code></p>
<p>临时登录某个节点可以使用如下脚本:</p>
<blockquote>
<p>前提是需要拥有一些特殊权限<code>privileded</code>，<code>hostPID</code>等</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">node</span><span class="o">=</span>xxx
</span></span><span class="line"><span class="cl"><span class="nv">cmd</span><span class="o">=</span><span class="s1">&#39;[ &#34;nsenter&#34;, &#34;--target&#34;, &#34;1&#34;, &#34;--mount&#34;, &#34;--uts&#34;, &#34;--ipc&#34;, &#34;--net&#34;, &#34;--pid&#34;, &#34;--&#34;]&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">overrides</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOT
</span></span></span><span class="line"><span class="cl"><span class="s">{
</span></span></span><span class="line"><span class="cl"><span class="s">  &#34;spec&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;nodeName&#34;: &#34;$node&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;hostPID&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;hostNetwork&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;containers&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="s">      {
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;securityContext&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s">          &#34;privileged&#34;: true
</span></span></span><span class="line"><span class="cl"><span class="s">        },
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;image&#34;: &#34;alpine&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;name&#34;: &#34;nsenter&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;stdin&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;stdinOnce&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;tty&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;command&#34;: $cmd
</span></span></span><span class="line"><span class="cl"><span class="s">      }
</span></span></span><span class="line"><span class="cl"><span class="s">    ],
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;tolerations&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="s">      {
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;operator&#34;: &#34;Exists&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">      }
</span></span></span><span class="line"><span class="cl"><span class="s">    ]
</span></span></span><span class="line"><span class="cl"><span class="s">  }
</span></span></span><span class="line"><span class="cl"><span class="s">}
</span></span></span><span class="line"><span class="cl"><span class="s">EOT</span>
</span></span><span class="line"><span class="cl"><span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">pod</span><span class="o">=</span><span class="s2">&#34;kube-nodeshell-</span><span class="k">$(</span>env <span class="nv">LC_ALL</span><span class="o">=</span>C tr -dc a-z0-9 &lt;/dev/urandom <span class="p">|</span> head -c 6<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">kubectl run --image<span class="o">=</span>alpine --restart<span class="o">=</span>Never --rm --overrides<span class="o">=</span><span class="s2">&#34;</span><span class="nv">$overrides</span><span class="s2">&#34;</span> -it <span class="nv">$pod</span>
</span></span></code></pre></div><p>原理是通过共享pid方式<code>hostPID=true</code>，在容器中看到宿主机的所有进程，然后使用<code>nsenter</code>进入宿主机1号进程（宿主机根进程）的<code>mount、uts、ipc、net、pid</code>等namespace，从而可以获取类似宿主机的shell。</p>
<p>如果需要经常使用，可以部署个<code>DaemonSet</code>，使用时登录对应节点的pod即可（建议只在测试环境使用，具有一定风险）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">DaemonSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tolerations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Exists&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">nsenter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">target</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="s2">&#34;1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">mount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">uts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">ipc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">net</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">pid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">sleep</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">infinity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">privileged</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostIPC</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostPID</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostNetwork</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">priorityClassName</span><span class="p">:</span><span class="w"> </span><span class="l">system-node-critical</span><span class="w">
</span></span></span></code></pre></div><p>本文所有文件见<a href="https://github.com/qingwave/kube-nodeshell" target="_blank" rel="noopener noreffer">kube-nodeshell</a></p>
<h2 id="临时容器" class="headerLink">
    <a href="#%e4%b8%b4%e6%97%b6%e5%ae%b9%e5%99%a8" class="header-mark"></a>临时容器</h2><p>kubernetes 1.18之后启用了临时容器，用户可以通过<code>kubectl debug</code>命令来添加临时容器到pod，也可以登录到node shell，一些简单的调试工作可以使用这种方法， 见<a href="https://kubernetes.io/zh/docs/tasks/debug-application-cluster/debug-running-pod/" target="_blank" rel="noopener noreffer">调试运行中的Pod</a>。</p>
<p>对比<code>nsenter</code>方法，<code>kubectl debug</code>通过shell登录节点时只是共享了<code>pid</code>、<code>hostNetwork</code>，<code>nsenter</code>则更灵活可以使用宿主机的相关工具以及执行特权操作。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://man7.org/linux/man-pages/man1/nsenter.1.html" target="_blank" rel="noopener noreffer">https://man7.org/linux/man-pages/man1/nsenter.1.html</a></li>
<li><a href="https://github.com/kvaps/kubectl-node-shell" target="_blank" rel="noopener noreffer">https://github.com/kvaps/kubectl-node-shell</a></li>
<li><a href="https://kubernetes.io/zh/docs/tasks/debug-application-cluster/debug-running-pod/" target="_blank" rel="noopener noreffer">https://kubernetes.io/zh/docs/tasks/debug-application-cluster/debug-running-pod/</a></li>
</ul>]]></description>
</item><item>
    <title>ClusterAutoScaler无法从零扩容</title>
    <link>https://qingwave.github.io/k8s-clusterautoscaler-from-zero-issue/</link>
    <pubDate>Mon, 08 Nov 2021 09:17:48 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-clusterautoscaler-from-zero-issue/</guid>
    <description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>最近在AWS k8s集群部署一个多AZ应用时，发现<code>cluster-autoscaler</code>无法正常<code>scale up</code>。</p>
<p>通过反复测试发现，当<code>NodeGroup</code>的初始容量为0时（<code>minSize=0</code>）无法扩容，报错信息如下，当<code>NodeGrop</code>初始容量为1时（<code>minSize=1</code>）可以正常扩容。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Normal   NotTriggerScaleUp  18m                   cluster-autoscaler  pod didn&#39;t trigger scale-up (it wouldn&#39;t fit if a new node is added): 3 Insufficient cpu, 1 node(s) didn&#39;t match node selector, 1 max node group size reached, 12 Insufficient memory, 1 node(s) didn&#39;t match pod affinity/anti-affinity, 1 node(s) didn&#39;t match pod anti-affinity rules, 3 node(s) had taint, that the pod didn&#39;t tolerate
</span></span></code></pre></div><p>这个现象很有意思，跟着代码查看下究竟是哪里出问题了。</p>
<h2 id="探究" class="headerLink">
    <a href="#%e6%8e%a2%e7%a9%b6" class="header-mark"></a>探究</h2><p><code>ClusterAutoScaler</code>主要扩容逻辑如下：</p>
<ul>
<li>定期获取（默认10s）所有<code>Pending</code> Pod，过滤出由于资源不足调度失败的Pod</li>
<li>根据<code>NodeGroup</code>生成新Node模拟调度，如果可以调度则将新节点加入集群</li>
</ul>
<p>根据现象猜测与生成<code>NodeTemplate</code>有关，否则不会造成两次情况调度结果不一致。
主要代码位于<a href="https://github.com/kubernetes/autoscaler/blob/cluster-autoscaler-release-1.21/cluster-autoscaler/core/utils/utils.go#L42" target="_blank" rel="noopener noreffer">utils.go#L42</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// nodes 指当前集群中所有node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">GetNodeInfosForGroups</span><span class="p">(</span><span class="nx">nodes</span> <span class="p">[]</span><span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Node</span><span class="p">,</span> <span class="nx">nodeInfoCache</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="nx">cloudProvider</span> <span class="nx">cloudprovider</span><span class="p">.</span><span class="nx">CloudProvider</span><span class="p">,</span> <span class="nx">listers</span> <span class="nx">kube_util</span><span class="p">.</span><span class="nx">ListerRegistry</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">daemonsets</span> <span class="p">[]</span><span class="o">*</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">DaemonSet</span><span class="p">,</span> <span class="nx">predicateChecker</span> <span class="nx">simulator</span><span class="p">.</span><span class="nx">PredicateChecker</span><span class="p">,</span> <span class="nx">ignoredTaints</span> <span class="nx">taints</span><span class="p">.</span><span class="nx">TaintKeySet</span><span class="p">)</span> <span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">AutoscalerError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">seenGroups</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">// 构建node与pod的映射 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">podsForNodes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getPodsForNodes</span><span class="p">(</span><span class="nx">listers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">{},</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// processNode returns information whether the nodeTemplate was generated and if there was an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// processNode 函数通过提供的node生成node模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">processNode</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">node</span> <span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Node</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">AutoscalerError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodeGroup</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cloudProvider</span><span class="p">.</span><span class="nf">NodeGroupForNode</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">CloudProviderError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">nodeGroup</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="nx">nodeGroup</span><span class="p">).</span><span class="nf">IsNil</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">nodeGroup</span><span class="p">.</span><span class="nf">Id</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// nodeGroup id不存在则将其添加到result中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">found</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span> <span class="p">!</span><span class="nx">found</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Build nodeInfo.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// 根据当前node生成模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">nodeInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">simulator</span><span class="p">.</span><span class="nf">BuildNodeInfoForNode</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">podsForNodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">sanitizedNodeInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">sanitizeNodeInfo</span><span class="p">(</span><span class="nx">nodeInfo</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">ignoredTaints</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="nx">sanitizedNodeInfo</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 遍历所有node，如果通过node能获取到对应nodeGroup的模板，则添加到nodeInfoCache中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">node</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Broken nodes might have some stuff missing. Skipping.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">kube_util</span><span class="p">.</span><span class="nf">IsNodeReadyAndSchedulable</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">added</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">typedErr</span> <span class="o">:=</span> <span class="nf">processNode</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">typedErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">{},</span> <span class="nx">typedErr</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">added</span> <span class="o">&amp;&amp;</span> <span class="nx">nodeInfoCache</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">nodeInfoCopy</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">deepCopyNodeInfo</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">]);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">nodeInfoCache</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nodeInfoCopy</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//如果不在cahce中，则通过nodeGroup生成模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">nodeGroup</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">cloudProvider</span><span class="p">.</span><span class="nf">NodeGroups</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">nodeGroup</span><span class="p">.</span><span class="nf">Id</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">seenGroups</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">found</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span> <span class="nx">found</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// No good template, check cache of previously running nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">nodeInfoCache</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">nodeInfo</span><span class="p">,</span> <span class="nx">found</span> <span class="o">:=</span> <span class="nx">nodeInfoCache</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span> <span class="nx">found</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">nodeInfoCopy</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">deepCopyNodeInfo</span><span class="p">(</span><span class="nx">nodeInfo</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nodeInfoCopy</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// No good template, trying to generate one. This is called only if there are no
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// working nodes in the node groups. By default CA tries to use a real-world example.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">nodeInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">GetNodeInfoFromTemplate</span><span class="p">(</span><span class="nx">nodeGroup</span><span class="p">,</span> <span class="nx">daemonsets</span><span class="p">,</span> <span class="nx">predicateChecker</span><span class="p">,</span> <span class="nx">ignoredTaints</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">cloudprovider</span><span class="p">.</span><span class="nx">ErrNotImplemented</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Unable to build proper template node for %s: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">{},</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">CloudProviderError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nodeInfo</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Remove invalid node groups from cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">id</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodeInfoCache</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">seenGroups</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">delete</span><span class="p">(</span><span class="nx">nodeInfoCache</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 处理unready/unschedulable的节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">node</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Allowing broken nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">kube_util</span><span class="p">.</span><span class="nf">IsNodeReadyAndSchedulable</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">added</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">typedErr</span> <span class="o">:=</span> <span class="nf">processNode</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">typedErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">{},</span> <span class="nx">typedErr</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">nodeGroup</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cloudProvider</span><span class="p">.</span><span class="nf">NodeGroupForNode</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">{},</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">					<span class="nx">errors</span><span class="p">.</span><span class="nx">CloudProviderError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">added</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;Built template for %s based on unready/unschedulable node %s&#34;</span><span class="p">,</span> <span class="nx">nodeGroup</span><span class="p">.</span><span class="nf">Id</span><span class="p">(),</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>方法<code>GetNodeInfosForGroups</code>生成模板的主要逻辑如下：</p>
<ul>
<li>遍历集群中所有节点，节点有对应<code>nodeGroup</code>，则根据节点生成模板</li>
<li>其他<code>nodeGroup</code>则根据<code>nodeGroup</code>配置与<code>daemonset</code>信息生成模板</li>
</ul>
<p>节点存在<code>nodeGroup</code>则根据<code>sanitizeNodeInfo</code>方法生成模板</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BuildNodeInfoForNode</span><span class="p">(</span><span class="nx">node</span> <span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Node</span><span class="p">,</span> <span class="nx">podsForNodes</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">AutoscalerError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取当前节点daemonset与mirror pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">requiredPods</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getRequiredPodsForNode</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">podsForNodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 生成node模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span> <span class="o">:=</span> <span class="nx">schedulerframework</span><span class="p">.</span><span class="nf">NewNodeInfo</span><span class="p">(</span><span class="nx">requiredPods</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">.</span><span class="nf">SetNode</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">InternalError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">filterRequiredPodsForNode</span><span class="p">(</span><span class="nx">allPods</span> <span class="p">[]</span><span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">[]</span><span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Pod</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">selectedPods</span> <span class="p">[]</span><span class="o">*</span><span class="nx">apiv1</span><span class="p">.</span><span class="nx">Pod</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">allPods</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Ignore pod in deletion phase
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">DeletionTimestamp</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">pod_util</span><span class="p">.</span><span class="nf">IsMirrorPod</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span> <span class="o">||</span> <span class="nx">pod_util</span><span class="p">.</span><span class="nf">IsDaemonSetPod</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">selectedPods</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">selectedPods</span><span class="p">,</span> <span class="nx">allPods</span><span class="p">[</span><span class="nx">id</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">selectedPods</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>根据nodeGroup生成模板调用<code>GetNodeInfoFromTemplate</code>方法，首先获取noGroup模板信息，再将daemonset pod信息加入node</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">GetNodeInfoFromTemplate</span><span class="p">(</span><span class="nx">nodeGroup</span> <span class="nx">cloudprovider</span><span class="p">.</span><span class="nx">NodeGroup</span><span class="p">,</span> <span class="nx">daemonsets</span> <span class="p">[]</span><span class="o">*</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">DaemonSet</span><span class="p">,</span> <span class="nx">predicateChecker</span> <span class="nx">simulator</span><span class="p">.</span><span class="nx">PredicateChecker</span><span class="p">,</span> <span class="nx">ignoredTaints</span> <span class="nx">taints</span><span class="p">.</span><span class="nx">TaintKeySet</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">AutoscalerError</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span> <span class="o">:=</span> <span class="nx">nodeGroup</span><span class="p">.</span><span class="nf">Id</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">baseNodeInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">nodeGroup</span><span class="p">.</span><span class="nf">TemplateNodeInfo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">CloudProviderError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">pods</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">daemonset</span><span class="p">.</span><span class="nf">GetDaemonSetPodsForNode</span><span class="p">(</span><span class="nx">baseNodeInfo</span><span class="p">,</span> <span class="nx">daemonsets</span><span class="p">,</span> <span class="nx">predicateChecker</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">ToAutoscalerError</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">InternalError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">podInfo</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">baseNodeInfo</span><span class="p">.</span><span class="nx">Pods</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pods</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">pods</span><span class="p">,</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fullNodeInfo</span> <span class="o">:=</span> <span class="nx">schedulerframework</span><span class="p">.</span><span class="nf">NewNodeInfo</span><span class="p">(</span><span class="nx">pods</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fullNodeInfo</span><span class="p">.</span><span class="nf">SetNode</span><span class="p">(</span><span class="nx">baseNodeInfo</span><span class="p">.</span><span class="nf">Node</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sanitizedNodeInfo</span><span class="p">,</span> <span class="nx">typedErr</span> <span class="o">:=</span> <span class="nf">sanitizeNodeInfo</span><span class="p">(</span><span class="nx">fullNodeInfo</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">ignoredTaints</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">typedErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">typedErr</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">sanitizedNodeInfo</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>其中<code>nodeGroup.TemplateNodeInfo</code>方法是每个云供应商提供的，<code>AWS</code>相关代码位于<a href="https://github.com/kubernetes/autoscaler/blob/55476293b3cb1e37e33680cefe01e7b34170a712/cluster-autoscaler/cloudprovider/aws/aws_cloud_provider.go#L100" target="_blank" rel="noopener noreffer">aws_cloud_provider.go#L100</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// TemplateNodeInfo returns a node template for this node group.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ng</span> <span class="o">*</span><span class="nx">AwsNodeGroup</span><span class="p">)</span> <span class="nf">TemplateNodeInfo</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">schedulerframework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">template</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ng</span><span class="p">.</span><span class="nx">awsManager</span><span class="p">.</span><span class="nf">getAsgTemplate</span><span class="p">(</span><span class="nx">ng</span><span class="p">.</span><span class="nx">asg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 生成node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">node</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ng</span><span class="p">.</span><span class="nx">awsManager</span><span class="p">.</span><span class="nf">buildNodeFromTemplate</span><span class="p">(</span><span class="nx">ng</span><span class="p">.</span><span class="nx">asg</span><span class="p">,</span> <span class="nx">template</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">nodeInfo</span> <span class="o">:=</span> <span class="nx">schedulerframework</span><span class="p">.</span><span class="nf">NewNodeInfo</span><span class="p">(</span><span class="nx">cloudprovider</span><span class="p">.</span><span class="nf">BuildKubeProxy</span><span class="p">(</span><span class="nx">ng</span><span class="p">.</span><span class="nx">asg</span><span class="p">.</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodeInfo</span><span class="p">.</span><span class="nf">SetNode</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">nodeInfo</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">AwsManager</span><span class="p">)</span> <span class="nf">getAsgTemplate</span><span class="p">(</span><span class="nx">asg</span> <span class="o">*</span><span class="nx">asg</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">asgTemplate</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="nx">instanceTypeName</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">buildInstanceType</span><span class="p">(</span><span class="nx">asg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 根据instanceTypeName获取模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">instanceTypes</span><span class="p">[</span><span class="nx">instanceTypeName</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="o">&amp;</span><span class="nx">asgTemplate</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">InstanceType</span><span class="p">:</span> <span class="nx">t</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Region</span><span class="p">:</span>       <span class="nx">region</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Zone</span><span class="p">:</span>         <span class="nx">az</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Tags</span><span class="p">:</span>         <span class="nx">asg</span><span class="p">.</span><span class="nx">Tags</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;ASG %q uses the unknown EC2 instance type %q&#34;</span><span class="p">,</span> <span class="nx">asg</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">instanceTypeName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在<code>AWS</code>通过<code>nodeGroup</code>生成节点模板，是根据<a href="https://github.com/kubernetes/autoscaler/blob/55476293b3cb1e37e33680cefe01e7b34170a712/cluster-autoscaler/cloudprovider/aws/ec2_instance_types.go#L30" target="_blank" rel="noopener noreffer">ec2_instance_types.go</a>文件中的信息来生成的，如下<code>c5d.large</code>为ec2类型名称，CPU为2，内存为<code>4G</code>i</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">	<span class="s">&#34;c5d.large&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">InstanceType</span><span class="p">:</span> <span class="s">&#34;c5d.large&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">VCPU</span><span class="p">:</span>         <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MemoryMb</span><span class="p">:</span>     <span class="mi">4096</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">GPU</span><span class="p">:</span>          <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span></code></pre></div><p>而在我们的环境中，由于成本原因实际使用的<code>c5d.large</code>内存是<code>16Gi</code>。当nodeGroup初始节点为0时，根据ec2类型生成的节点是<code>4Gi</code>内存；而当初始节点为1时，集群中已经存在对应nodeGroup的节点，则通过已存在节点生成模板的内存为<code>16Gi</code>，<strong>内存不足</strong>才导致调度失败，我们也验证了调小pod申请的内存确实能够正常扩容。</p>
<p>一个简单的解决办法是将初始节点设置为1，另外可以将特殊类型添加到配置文件中，则可以正常工作。但根本原因是在<code>AWS</code>中无法正常感知节点资源的动态变化。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>在<code>AWS</code>中通过静态文件来获取节点资源信息，当实际生产中与文件不一致时，会造成<code>ClusterAutoScaler</code>无法按照预期工作。<code>ClusterAutoScaler</code>大大减少了运维工作，无需时时关心资源申请量，但只有了解其内部逻辑，才能更好的应用于生产。</p>]]></description>
</item><item>
    <title>深入了解kubebuilder</title>
    <link>https://qingwave.github.io/k8s-kubebuilder-deep-dive/</link>
    <pubDate>Mon, 23 Aug 2021 00:25:53 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-kubebuilder-deep-dive/</guid>
    <description><![CDATA[<p>前文<a href="./how-to-write-a-k8s-operator" rel="">快速实现一个Kubernetes Operator</a>介绍了<code>kubebuilder</code>工具，快速实现了一个<code>Operator</code>。今天我们深入水下，探寻<code>kubebuilder</code>究竟是如何工作的。</p>
<h2 id="普通开发流程" class="headerLink">
    <a href="#%e6%99%ae%e9%80%9a%e5%bc%80%e5%8f%91%e6%b5%81%e7%a8%8b" class="header-mark"></a>普通开发流程</h2><p>如果不借助任何<code>Operator</code>脚手架，我们是如何实现<code>Operator</code>的？大体分为一下几步：</p>
<ul>
<li>CRD定义</li>
<li>Controller开发，编写逻辑</li>
<li>测试部署</li>
</ul>
<h3 id="api定义" class="headerLink">
    <a href="#api%e5%ae%9a%e4%b9%89" class="header-mark"></a>API定义</h3><p>首先通过<a href="https://github.com/kubernetes/code-generator" target="_blank" rel="noopener noreffer">k8s.io/code-generator</a>项目生成API相关代码，定义相关字段。</p>
<h3 id="controller实现" class="headerLink">
    <a href="#controller%e5%ae%9e%e7%8e%b0" class="header-mark"></a>Controller实现</h3><p>实现Controller以官方提供的<a href="https://github.com/kubernetes/sample-controller" target="_blank" rel="noopener noreffer">sample-controller</a>为例，如图所示


</p>
<p>主要分为以下几步：</p>
<p>初始化<code>client</code>配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">  <span class="c1">//通过master/kubeconfig建立client config
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">cfg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientcmd</span><span class="p">.</span><span class="nf">BuildConfigFromFlags</span><span class="p">(</span><span class="nx">masterURL</span><span class="p">,</span> <span class="nx">kubeconfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error building kubeconfig: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// kubernetes client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">kubeClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error building kubernetes clientset: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// crd client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">exampleClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientset</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error building example clientset: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></div><p>初始化Informer并启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">  <span class="c1">//k8s sharedInformer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">kubeInformerFactory</span> <span class="o">:=</span> <span class="nx">kubeinformers</span><span class="p">.</span><span class="nf">NewSharedInformerFactory</span><span class="p">(</span><span class="nx">kubeClient</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">*</span><span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// crd sharedInformer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">exampleInformerFactory</span> <span class="o">:=</span> <span class="nx">informers</span><span class="p">.</span><span class="nf">NewSharedInformerFactory</span><span class="p">(</span><span class="nx">exampleClient</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">*</span><span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 初始化controller，传入informer, 注册了Deployment与Foo Informers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">controller</span> <span class="o">:=</span> <span class="nf">NewController</span><span class="p">(</span><span class="nx">kubeClient</span><span class="p">,</span> <span class="nx">exampleClient</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kubeInformerFactory</span><span class="p">.</span><span class="nf">Apps</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">Deployments</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">exampleInformerFactory</span><span class="p">.</span><span class="nf">Samplecontroller</span><span class="p">().</span><span class="nf">V1alpha1</span><span class="p">().</span><span class="nf">Foos</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//启动Informer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">kubeInformerFactory</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">exampleInformerFactory</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span></code></pre></div><p>最后启动<code>Controller</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">controller</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error running controller: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></div><p>在<code>Controller</code>的实现中，通过<code>NewController</code>来初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewController</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kubeclientset</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sampleclientset</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">deploymentInformer</span> <span class="nx">appsinformers</span><span class="p">.</span><span class="nx">DeploymentInformer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fooInformer</span> <span class="nx">informers</span><span class="p">.</span><span class="nx">FooInformer</span><span class="p">)</span> <span class="o">*</span><span class="nx">Controller</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create event broadcaster
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">samplescheme</span><span class="p">.</span><span class="nf">AddToScheme</span><span class="p">(</span><span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Creating event broadcaster&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventBroadcaster</span> <span class="o">:=</span> <span class="nx">record</span><span class="p">.</span><span class="nf">NewBroadcaster</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventBroadcaster</span><span class="p">.</span><span class="nf">StartStructuredLogging</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventBroadcaster</span><span class="p">.</span><span class="nf">StartRecordingToSink</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">typedcorev1</span><span class="p">.</span><span class="nx">EventSinkImpl</span><span class="p">{</span><span class="nx">Interface</span><span class="p">:</span> <span class="nx">kubeclientset</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">Events</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">recorder</span> <span class="o">:=</span> <span class="nx">eventBroadcaster</span><span class="p">.</span><span class="nf">NewRecorder</span><span class="p">(</span><span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">corev1</span><span class="p">.</span><span class="nx">EventSource</span><span class="p">{</span><span class="nx">Component</span><span class="p">:</span> <span class="nx">controllerAgentName</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">controller</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Controller</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kubeclientset</span><span class="p">:</span>     <span class="nx">kubeclientset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sampleclientset</span><span class="p">:</span>   <span class="nx">sampleclientset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">deploymentsLister</span><span class="p">:</span> <span class="nx">deploymentInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">(),</span> <span class="c1">//只读cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">deploymentsSynced</span><span class="p">:</span> <span class="nx">deploymentInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nx">HasSynced</span><span class="p">,</span> <span class="c1">//调用Informer()会注册informer到共享informer中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">foosLister</span><span class="p">:</span>        <span class="nx">fooInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">foosSynced</span><span class="p">:</span>        <span class="nx">fooInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nx">HasSynced</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">workqueue</span><span class="p">:</span>         <span class="nx">workqueue</span><span class="p">.</span><span class="nf">NewNamedRateLimitingQueue</span><span class="p">(</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">DefaultControllerRateLimiter</span><span class="p">(),</span> <span class="s">&#34;Foos&#34;</span><span class="p">),</span> <span class="c1">// 初始化工作队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">recorder</span><span class="p">:</span>          <span class="nx">recorder</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Setting up event handlers&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 添加回调事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fooInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AddFunc</span><span class="p">:</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">enqueueFoo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UpdateFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">old</span><span class="p">,</span> <span class="nx">new</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">controller</span><span class="p">.</span><span class="nf">enqueueFoo</span><span class="p">(</span><span class="nx">new</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">deploymentInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AddFunc</span><span class="p">:</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">handleObject</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UpdateFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">old</span><span class="p">,</span> <span class="nx">new</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">newDepl</span> <span class="o">:=</span> <span class="nx">new</span><span class="p">.(</span><span class="o">*</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">oldDepl</span> <span class="o">:=</span> <span class="nx">old</span><span class="p">.(</span><span class="o">*</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">newDepl</span><span class="p">.</span><span class="nx">ResourceVersion</span> <span class="o">==</span> <span class="nx">oldDepl</span><span class="p">.</span><span class="nx">ResourceVersion</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Periodic resync will send update events for all known Deployments.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// Two different versions of the same Deployment will always have different RVs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">controller</span><span class="p">.</span><span class="nf">handleObject</span><span class="p">(</span><span class="nx">new</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DeleteFunc</span><span class="p">:</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">handleObject</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">controller</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>Controller</code>启动则是典型的k8s工作流，通过控制循环不断从工作队列获取对象进行处理，使其达到期望状态</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">workers</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">ShutDown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 等待cache同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">klog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Waiting for informer caches to sync&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">deploymentsSynced</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">foosSynced</span><span class="p">);</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to wait for caches to sync&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 启动worker,每个worker一个goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">workers</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">runWorker</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 等待退出信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// worker就是一个循环不断调用processNextWorkItem
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">runWorker</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">c</span><span class="p">.</span><span class="nf">processNextWorkItem</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">processNextWorkItem</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 从工作队列获取对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">obj</span><span class="p">,</span> <span class="nx">shutdown</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">Get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">shutdown</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// We wrap this block in a func so we can defer c.workqueue.Done.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">Done</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">key</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">ok</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="nx">obj</span><span class="p">.(</span><span class="kt">string</span><span class="p">);</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">Forget</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;expected string in workqueue but got %#v&#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 进行处理，核心逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">syncHandler</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 处理失败再次加入队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">AddRateLimited</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error syncing &#39;%s&#39;: %s, requeuing&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 处理成功不入队
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">Forget</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Successfully synced &#39;%s&#39;&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="operator模式" class="headerLink">
    <a href="#operator%e6%a8%a1%e5%bc%8f" class="header-mark"></a>Operator模式</h2><p>在<code>Operator</code>模式下，用户只需要实现<code>Reconcile</code>(调谐)即<code>sample-controller</code>中的<code>syncHandler</code>，其他步骤<code>kubebuilder</code>已经帮我们实现了。那我们来一探究竟，<code>kubebuilder</code>是怎么一步步触发<code>Reconcile</code>逻辑。</p>
<p>以<a href="https://github.com/qingwave/mygame" target="_blank" rel="noopener noreffer">mygame</a>为例，通常使用<code>kubebuilder</code>生成的主文件如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 用来解析kubernetes对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">scheme</span>   <span class="p">=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">NewScheme</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">setupLog</span> <span class="p">=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">WithName</span><span class="p">(</span><span class="s">&#34;setup&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">clientgoscheme</span><span class="p">.</span><span class="nf">AddToScheme</span><span class="p">(</span><span class="nx">scheme</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 添加自定义对象到scheme
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">myappv1</span><span class="p">.</span><span class="nf">AddToScheme</span><span class="p">(</span><span class="nx">scheme</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//+kubebuilder:scaffold:scheme
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctrl</span><span class="p">.</span><span class="nf">SetLogger</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nf">UseFlagOptions</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化controller manager
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mgr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nf">NewManager</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">GetConfigOrDie</span><span class="p">(),</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Scheme</span><span class="p">:</span>                 <span class="nx">scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MetricsBindAddress</span><span class="p">:</span>     <span class="nx">metricsAddr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Port</span><span class="p">:</span>                   <span class="mi">9443</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">HealthProbeBindAddress</span><span class="p">:</span> <span class="nx">probeAddr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElection</span><span class="p">:</span>         <span class="nx">enableLeaderElection</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionID</span><span class="p">:</span>       <span class="s">&#34;7bc453ad.qingwave.github.io&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to start manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化Reconciler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">controllers</span><span class="p">.</span><span class="nx">GameReconciler</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Client</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetClient</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Scheme</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}).</span><span class="nf">SetupWithManager</span><span class="p">(</span><span class="nx">mgr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to create controller&#34;</span><span class="p">,</span> <span class="s">&#34;controller&#34;</span><span class="p">,</span> <span class="s">&#34;Game&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化Webhook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">enableWebhook</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">myappv1</span><span class="p">.</span><span class="nx">Game</span><span class="p">{}).</span><span class="nf">SetupWebhookWithManager</span><span class="p">(</span><span class="nx">mgr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to create webhook&#34;</span><span class="p">,</span> <span class="s">&#34;webhook&#34;</span><span class="p">,</span> <span class="s">&#34;Game&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//+kubebuilder:scaffold:builder
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 启动manager
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">SetupSignalHandler</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;problem running manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>kubebuilder</code>封装了<code>controller-runtime</code>，在主文件中主要初始了<code>controller-manager</code>,以及我们填充的<code>Reconciler</code>与<code>Webhook</code>，最后启动<code>manager</code>。</p>
<p>分别来看下每个流程。</p>
<h3 id="manager初始化" class="headerLink">
    <a href="#manager%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>Manager初始化</h3><p>代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Manager</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置默认配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">options</span> <span class="p">=</span> <span class="nf">setOptionsDefaults</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// cluster初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cluster</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cluster</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">clusterOptions</span> <span class="o">*</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">Options</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">Scheme</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">MapperProvider</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">MapperProvider</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">Logger</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">SyncPeriod</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">SyncPeriod</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">Namespace</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Namespace</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">NewCache</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">NewCache</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">ClientBuilder</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">ClientBuilder</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">ClientDisableCacheFor</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">ClientDisableCacheFor</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">DryRunClient</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">DryRunClient</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterOptions</span><span class="p">.</span><span class="nx">EventBroadcaster</span> <span class="p">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">EventBroadcaster</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// event recorder初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">recorderProvider</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">newRecorderProvider</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">cluster</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">(),</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">WithName</span><span class="p">(</span><span class="s">&#34;events&#34;</span><span class="p">),</span> <span class="nx">options</span><span class="p">.</span><span class="nx">makeBroadcaster</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 选主的资源锁配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">leaderConfig</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">LeaderElectionConfig</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">leaderConfig</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">leaderConfig</span> <span class="p">=</span> <span class="nx">rest</span><span class="p">.</span><span class="nf">CopyConfig</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resourceLock</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">newResourceLock</span><span class="p">(</span><span class="nx">leaderConfig</span><span class="p">,</span> <span class="nx">recorderProvider</span><span class="p">,</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElection</span><span class="p">:</span>             <span class="nx">options</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionResourceLock</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">LeaderElectionResourceLock</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionID</span><span class="p">:</span>           <span class="nx">options</span><span class="p">.</span><span class="nx">LeaderElectionID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionNamespace</span><span class="p">:</span>    <span class="nx">options</span><span class="p">.</span><span class="nx">LeaderElectionNamespace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">controllerManager</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cluster</span><span class="p">:</span>                 <span class="nx">cluster</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">recorderProvider</span><span class="p">:</span>        <span class="nx">recorderProvider</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">resourceLock</span><span class="p">:</span>            <span class="nx">resourceLock</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metricsListener</span><span class="p">:</span>         <span class="nx">metricsListener</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metricsExtraHandlers</span><span class="p">:</span>    <span class="nx">metricsExtraHandlers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">:</span>                  <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">elected</span><span class="p">:</span>                 <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">port</span><span class="p">:</span>                    <span class="nx">options</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">host</span><span class="p">:</span>                    <span class="nx">options</span><span class="p">.</span><span class="nx">Host</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">certDir</span><span class="p">:</span>                 <span class="nx">options</span><span class="p">.</span><span class="nx">CertDir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">leaseDuration</span><span class="p">:</span>           <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">LeaseDuration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">renewDeadline</span><span class="p">:</span>           <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">RenewDeadline</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">retryPeriod</span><span class="p">:</span>             <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">RetryPeriod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">healthProbeListener</span><span class="p">:</span>     <span class="nx">healthProbeListener</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">readinessEndpointName</span><span class="p">:</span>   <span class="nx">options</span><span class="p">.</span><span class="nx">ReadinessEndpointName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">livenessEndpointName</span><span class="p">:</span>    <span class="nx">options</span><span class="p">.</span><span class="nx">LivenessEndpointName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gracefulShutdownTimeout</span><span class="p">:</span> <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">GracefulShutdownTimeout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">internalProceduresStop</span><span class="p">:</span>  <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">leaderElectionStopped</span><span class="p">:</span>   <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span></code></pre></div><p>在<code>New</code>中主要初始化了各种配置端口、选主信息、<code>eventRecorder</code>，最重要的是初始了<code>Cluster</code>。<code>Cluster</code>用来访问k8s，初始化代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// New constructs a brand new cluster
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">Option</span><span class="p">)</span> <span class="p">(</span><span class="nx">Cluster</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">config</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;must specify Config&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">options</span> <span class="o">:=</span> <span class="nx">Options</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">opt</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">options</span> <span class="p">=</span> <span class="nf">setOptionsDefaults</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create the mapper provider
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mapper</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">MapperProvider</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Failed to get API Group-Resources&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create the cache for the cached read client and registering informers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cache</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">NewCache</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span><span class="nx">Scheme</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">Mapper</span><span class="p">:</span> <span class="nx">mapper</span><span class="p">,</span> <span class="nx">Resync</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">SyncPeriod</span><span class="p">,</span> <span class="nx">Namespace</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">clientOptions</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span><span class="nx">Scheme</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">Mapper</span><span class="p">:</span> <span class="nx">mapper</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">apiReader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">clientOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">writeObj</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">ClientBuilder</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">		<span class="nf">WithUncached</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">ClientDisableCacheFor</span><span class="o">...</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Build</span><span class="p">(</span><span class="nx">cache</span><span class="p">,</span> <span class="nx">config</span><span class="p">,</span> <span class="nx">clientOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">DryRunClient</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">writeObj</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">NewDryRunClient</span><span class="p">(</span><span class="nx">writeObj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">recorderProvider</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">newRecorderProvider</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">WithName</span><span class="p">(</span><span class="s">&#34;events&#34;</span><span class="p">),</span> <span class="nx">options</span><span class="p">.</span><span class="nx">makeBroadcaster</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cluster</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">config</span><span class="p">:</span>           <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">:</span>           <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cache</span><span class="p">:</span>            <span class="nx">cache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fieldIndexes</span><span class="p">:</span>     <span class="nx">cache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span>           <span class="nx">writeObj</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">apiReader</span><span class="p">:</span>        <span class="nx">apiReader</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">recorderProvider</span><span class="p">:</span> <span class="nx">recorderProvider</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mapper</span><span class="p">:</span>           <span class="nx">mapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">:</span>           <span class="nx">options</span><span class="p">.</span><span class="nx">Logger</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这里主要创建了<code>cache</code>与读写<code>client</code></p>
<h3 id="cache初始化" class="headerLink">
    <a href="#cache%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>Cache初始化</h3><p>创建<code>cache</code>代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// New initializes and returns a new Cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">opts</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Cache</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">opts</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">defaultOpts</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">im</span> <span class="o">:=</span> <span class="nx">internal</span><span class="p">.</span><span class="nf">NewInformersMap</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">Mapper</span><span class="p">,</span> <span class="o">*</span><span class="nx">opts</span><span class="p">.</span><span class="nx">Resync</span><span class="p">,</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">informerCache</span><span class="p">{</span><span class="nx">InformersMap</span><span class="p">:</span> <span class="nx">im</span><span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>New</code>中调用了<code>NewInformersMap</code>来创建<code>infermer map</code>，分为<code>structured</code>、<code>unstructured</code>与<code>metadata</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewInformersMap</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mapper</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">RESTMapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resync</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">namespace</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">InformersMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">InformersMap</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">structured</span><span class="p">:</span>   <span class="nf">newStructuredInformersMap</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">,</span> <span class="nx">mapper</span><span class="p">,</span> <span class="nx">resync</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">unstructured</span><span class="p">:</span> <span class="nf">newUnstructuredInformersMap</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">,</span> <span class="nx">mapper</span><span class="p">,</span> <span class="nx">resync</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metadata</span><span class="p">:</span>     <span class="nf">newMetadataInformersMap</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">,</span> <span class="nx">mapper</span><span class="p">,</span> <span class="nx">resync</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">Scheme</span><span class="p">:</span> <span class="nx">scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>最终都是调用<code>newSpecificInformersMap</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// newStructuredInformersMap creates a new InformersMap for structured objects.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">newStructuredInformersMap</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">mapper</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">RESTMapper</span><span class="p">,</span> <span class="nx">resync</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span> <span class="nx">namespace</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">specificInformersMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">newSpecificInformersMap</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">,</span> <span class="nx">mapper</span><span class="p">,</span> <span class="nx">resync</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">,</span> <span class="nx">createStructuredListWatch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">newSpecificInformersMap</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mapper</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">RESTMapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resync</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">namespace</span> <span class="kt">string</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">createListWatcher</span> <span class="nx">createListWatcherFunc</span><span class="p">)</span> <span class="o">*</span><span class="nx">specificInformersMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ip</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">specificInformersMap</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">config</span><span class="p">:</span>            <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Scheme</span><span class="p">:</span>            <span class="nx">scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mapper</span><span class="p">:</span>            <span class="nx">mapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">informersByGVK</span><span class="p">:</span>    <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">]</span><span class="o">*</span><span class="nx">MapEntry</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">codecs</span><span class="p">:</span>            <span class="nx">serializer</span><span class="p">.</span><span class="nf">NewCodecFactory</span><span class="p">(</span><span class="nx">scheme</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">paramCodec</span><span class="p">:</span>        <span class="nx">runtime</span><span class="p">.</span><span class="nf">NewParameterCodec</span><span class="p">(</span><span class="nx">scheme</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">resync</span><span class="p">:</span>            <span class="nx">resync</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">startWait</span><span class="p">:</span>         <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">createListWatcher</span><span class="p">:</span> <span class="nx">createListWatcher</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">namespace</span><span class="p">:</span>         <span class="nx">namespace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">ip</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">createStructuredListWatch</span><span class="p">(</span><span class="nx">gvk</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">,</span> <span class="nx">ip</span> <span class="o">*</span><span class="nx">specificInformersMap</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ListWatch</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Kubernetes APIs work against Resources, not GroupVersionKinds.  Map the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// groupVersionKind to the Resource API we will use.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mapping</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">mapper</span><span class="p">.</span><span class="nf">RESTMapping</span><span class="p">(</span><span class="nx">gvk</span><span class="p">.</span><span class="nf">GroupKind</span><span class="p">(),</span> <span class="nx">gvk</span><span class="p">.</span><span class="nx">Version</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">apiutil</span><span class="p">.</span><span class="nf">RESTClientForGVK</span><span class="p">(</span><span class="nx">gvk</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">config</span><span class="p">,</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">codecs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">listGVK</span> <span class="o">:=</span> <span class="nx">gvk</span><span class="p">.</span><span class="nf">GroupVersion</span><span class="p">().</span><span class="nf">WithKind</span><span class="p">(</span><span class="nx">gvk</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">+</span> <span class="s">&#34;List&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">listObj</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">listGVK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// TODO: the functions that make use of this ListWatch should be adapted to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  pass in their own contexts instead of relying on this fixed one here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Create a new ListWatch for the obj
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ListWatch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ListFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">opts</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">)</span> <span class="p">(</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">res</span> <span class="o">:=</span> <span class="nx">listObj</span><span class="p">.</span><span class="nf">DeepCopyObject</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">isNamespaceScoped</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">namespace</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="o">&amp;&amp;</span> <span class="nx">mapping</span><span class="p">.</span><span class="nx">Scope</span><span class="p">.</span><span class="nf">Name</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">RESTScopeNameRoot</span>
</span></span><span class="line"><span class="cl">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">().</span><span class="nf">NamespaceIfScoped</span><span class="p">(</span><span class="nx">ip</span><span class="p">.</span><span class="nx">namespace</span><span class="p">,</span> <span class="nx">isNamespaceScoped</span><span class="p">).</span><span class="nf">Resource</span><span class="p">(</span><span class="nx">mapping</span><span class="p">.</span><span class="nx">Resource</span><span class="p">.</span><span class="nx">Resource</span><span class="p">).</span><span class="nf">VersionedParams</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">paramCodec</span><span class="p">).</span><span class="nf">Do</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nf">Into</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Setup the watch function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">WatchFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">opts</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">)</span> <span class="p">(</span><span class="nx">watch</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Watch needs to be set to true separately
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">opts</span><span class="p">.</span><span class="nx">Watch</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">			<span class="nx">isNamespaceScoped</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">namespace</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="o">&amp;&amp;</span> <span class="nx">mapping</span><span class="p">.</span><span class="nx">Scope</span><span class="p">.</span><span class="nf">Name</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">RESTScopeNameRoot</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">().</span><span class="nf">NamespaceIfScoped</span><span class="p">(</span><span class="nx">ip</span><span class="p">.</span><span class="nx">namespace</span><span class="p">,</span> <span class="nx">isNamespaceScoped</span><span class="p">).</span><span class="nf">Resource</span><span class="p">(</span><span class="nx">mapping</span><span class="p">.</span><span class="nx">Resource</span><span class="p">.</span><span class="nx">Resource</span><span class="p">).</span><span class="nf">VersionedParams</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">paramCodec</span><span class="p">).</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在<code>newSpecificInformersMap</code>中通过<code>informersByGVK</code>来记录<code>schema</code>中每个<code>GVK</code>对象与<code>informer</code>的对应关系，使用时可根据<code>GVK</code>得到<code>informer</code>再去<code>List</code>/<code>Get</code>。</p>
<p><code>newSpecificInformersMap</code>中的<code>createListWatcher</code>来初始化<code>ListWatch</code>对象。</p>
<h3 id="client初始化" class="headerLink">
    <a href="#client%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>Client初始化</h3><p>client这里有多种类型，<code>apiReader</code>直接从<code>apiserver</code>读取对象，<code>writeObj</code>可以从<code>apiserver</code>或者<code>cache</code>中读取数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">	<span class="nx">apiReader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">clientOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Client</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">config</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide non-nil rest.Config to client.New&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Init a scheme if none provided
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span> <span class="p">=</span> <span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Init a Mapper if none provided
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Mapper</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">Mapper</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">apiutil</span><span class="p">.</span><span class="nf">NewDynamicRESTMapper</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 从cache中读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">clientcache</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">clientCache</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">config</span><span class="p">:</span> <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mapper</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Mapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">codecs</span><span class="p">:</span> <span class="nx">serializer</span><span class="p">.</span><span class="nf">NewCodecFactory</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">structuredResourceByType</span><span class="p">:</span>   <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">]</span><span class="o">*</span><span class="nx">resourceMeta</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">unstructuredResourceByType</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">]</span><span class="o">*</span><span class="nx">resourceMeta</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">rawMetaClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">metadata</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unable to construct metadata-only client for use as part of client: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">c</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">client</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">typedClient</span><span class="p">:</span> <span class="nx">typedClient</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">cache</span><span class="p">:</span>      <span class="nx">clientcache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">paramCodec</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">NewParameterCodec</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">unstructuredClient</span><span class="p">:</span> <span class="nx">unstructuredClient</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">cache</span><span class="p">:</span>      <span class="nx">clientcache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">paramCodec</span><span class="p">:</span> <span class="nx">noConversionParamCodec</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metadataClient</span><span class="p">:</span> <span class="nx">metadataClient</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">client</span><span class="p">:</span>     <span class="nx">rawMetaClient</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">restMapper</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Mapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mapper</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Mapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">c</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>writeObj</code>实现了读写分离的<code>Client</code>，写直连<code>apiserver</code>，读获取在<code>cache</code>中则直接读取<code>cache</code>，否则通过<code>clientset</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">writeObj</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">ClientBuilder</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">		<span class="nf">WithUncached</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">ClientDisableCacheFor</span><span class="o">...</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Build</span><span class="p">(</span><span class="nx">cache</span><span class="p">,</span> <span class="nx">config</span><span class="p">,</span> <span class="nx">clientOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">newClientBuilder</span><span class="p">)</span> <span class="nf">Build</span><span class="p">(</span><span class="nx">cache</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Cache</span><span class="p">,</span> <span class="nx">config</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Create the Client for Write operations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nf">NewDelegatingClient</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">NewDelegatingClientInput</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">CacheReader</span><span class="p">:</span>     <span class="nx">cache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Client</span><span class="p">:</span>          <span class="nx">c</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UncachedObjects</span><span class="p">:</span> <span class="nx">n</span><span class="p">.</span><span class="nx">uncached</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 读写分离client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewDelegatingClient</span><span class="p">(</span><span class="nx">in</span> <span class="nx">NewDelegatingClientInput</span><span class="p">)</span> <span class="p">(</span><span class="nx">Client</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">uncachedGVKs</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">]</span><span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">obj</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">in</span><span class="p">.</span><span class="nx">UncachedObjects</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gvk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">apiutil</span><span class="p">.</span><span class="nf">GVKForObject</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Scheme</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">uncachedGVKs</span><span class="p">[</span><span class="nx">gvk</span><span class="p">]</span> <span class="p">=</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">delegatingClient</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">:</span> <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Scheme</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mapper</span><span class="p">:</span> <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">RESTMapper</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Reader</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">delegatingReader</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">CacheReader</span><span class="p">:</span>       <span class="nx">in</span><span class="p">.</span><span class="nx">CacheReader</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ClientReader</span><span class="p">:</span>      <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">scheme</span><span class="p">:</span>            <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Scheme</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">uncachedGVKs</span><span class="p">:</span>      <span class="nx">uncachedGVKs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">cacheUnstructured</span><span class="p">:</span> <span class="nx">in</span><span class="p">.</span><span class="nx">CacheUnstructured</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Writer</span><span class="p">:</span>       <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">StatusClient</span><span class="p">:</span> <span class="nx">in</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Get retrieves an obj for a given object key from the Kubernetes Cluster.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">delegatingReader</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">key</span> <span class="nx">ObjectKey</span><span class="p">,</span> <span class="nx">obj</span> <span class="nx">Object</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//根据是否cached选择client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">isUncached</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">shouldBypassCache</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">isUncached</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">ClientReader</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">CacheReader</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="controller初始化" class="headerLink">
    <a href="#controller%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>Controller初始化</h3><p>Controller初始化代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">GameReconciler</span><span class="p">)</span> <span class="nf">SetupWithManager</span><span class="p">(</span><span class="nx">mgr</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Manager</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrl</span><span class="p">.</span><span class="nf">NewControllerManagedBy</span><span class="p">(</span><span class="nx">mgr</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">WithOptions</span><span class="p">(</span><span class="nx">controller</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">MaxConcurrentReconciles</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">For</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">myappv1</span><span class="p">.</span><span class="nx">Game</span><span class="p">{}).</span> <span class="c1">// Reconcile资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nf">Owns</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{}).</span> <span class="c1">// 监听Owner是当前资源的Deployment
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nf">Complete</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Complete builds the Application ControllerManagedBy.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">Complete</span><span class="p">(</span><span class="nx">r</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">Build</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Build builds the Application ControllerManagedBy and returns the Controller it created.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">Build</span><span class="p">(</span><span class="nx">r</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="p">(</span><span class="nx">controller</span><span class="p">.</span><span class="nx">Controller</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">r</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide a non-nil Reconciler&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide a non-nil Manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Checking the reconcile type exist or not
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide an object for reconciliation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the Config
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">blder</span><span class="p">.</span><span class="nf">loadRestConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the ControllerManagedBy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">doController</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the Watch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">doWatch</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>初始化<code>Controller</code>调用<code>ctrl.NewControllerManagedBy</code>来创建<code>Builder</code>，填充配置，最后通过<code>Build</code>方法完成初始化，主要做了三件事</p>
<ol>
<li>设置配置</li>
<li><code>doController</code>来创建<code>controller</code></li>
<li><code>doWatch</code>来设置需要监听的资源</li>
</ol>
<p>先看<code>controller</code>初始化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">doController</span><span class="p">(</span><span class="nx">r</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrlOptions</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrlOptions</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Reconciler</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Reconciler</span> <span class="p">=</span> <span class="nx">r</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">gvk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getGvk</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Setup the logger.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Log</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Log</span> <span class="p">=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span><span class="p">.</span><span class="nf">GetLogger</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Log</span> <span class="p">=</span> <span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">WithValues</span><span class="p">(</span><span class="s">&#34;reconciler group&#34;</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">.</span><span class="nx">Group</span><span class="p">,</span> <span class="s">&#34;reconciler kind&#34;</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">.</span><span class="nx">Kind</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Build the controller and return.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">newController</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nf">getControllerName</span><span class="p">(</span><span class="nx">gvk</span><span class="p">),</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span><span class="p">,</span> <span class="nx">ctrlOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">mgr</span> <span class="nx">manager</span><span class="p">.</span><span class="nx">Manager</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Controller</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewUnmanaged</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">mgr</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Add the controller as a Manager components
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewUnmanaged</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">mgr</span> <span class="nx">manager</span><span class="p">.</span><span class="nx">Manager</span><span class="p">,</span> <span class="nx">options</span> <span class="nx">Options</span><span class="p">)</span> <span class="p">(</span><span class="nx">Controller</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Reconciler</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must specify Reconciler&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must specify Name for Controller&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Log</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">Log</span> <span class="p">=</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetLogger</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span> <span class="p">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Minute</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">RateLimiter</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">RateLimiter</span> <span class="p">=</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nf">DefaultControllerRateLimiter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Inject dependencies into Reconciler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create controller with dependencies set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">controller</span><span class="p">.</span><span class="nx">Controller</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Do</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MakeQueue</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nf">NewNamedRateLimitingQueue</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">RateLimiter</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MaxConcurrentReconciles</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">CacheSyncTimeout</span><span class="p">:</span>        <span class="nx">options</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">SetFields</span><span class="p">:</span>               <span class="nx">mgr</span><span class="p">.</span><span class="nx">SetFields</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span>                    <span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Log</span><span class="p">:</span>                     <span class="nx">options</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">WithName</span><span class="p">(</span><span class="s">&#34;controller&#34;</span><span class="p">).</span><span class="nf">WithName</span><span class="p">(</span><span class="nx">name</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>doController</code>调用<code>controller.New</code>来创建<code>controller</code>并添加到<code>manager</code>，在<code>NewUnmanaged</code>可以看到我们熟悉的配置，与上文<code>sample-controller</code>类似这里也设置了工作队列、最大Worker数等。</p>
<p><code>doWatch</code>代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">doWatch</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Reconcile type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">typeForSrc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">project</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">objectProjection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">src</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="nx">typeForSrc</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">hdler</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">handler</span><span class="p">.</span><span class="nx">EnqueueRequestForObject</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">allPredicates</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">globalPredicates</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">src</span><span class="p">,</span> <span class="nx">hdler</span><span class="p">,</span> <span class="nx">allPredicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Watches the managed types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">own</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ownsInput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">typeForSrc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">project</span><span class="p">(</span><span class="nx">own</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span> <span class="nx">own</span><span class="p">.</span><span class="nx">objectProjection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">src</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="nx">typeForSrc</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">hdler</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">handler</span><span class="p">.</span><span class="nx">EnqueueRequestForOwner</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OwnerType</span><span class="p">:</span>    <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">IsController</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">([]</span><span class="nx">predicate</span><span class="p">.</span><span class="nf">Predicate</span><span class="p">(</span><span class="kc">nil</span><span class="p">),</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">globalPredicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">allPredicates</span><span class="p">,</span> <span class="nx">own</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">src</span><span class="p">,</span> <span class="nx">hdler</span><span class="p">,</span> <span class="nx">allPredicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Do the watch requests
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">w</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">watchesInput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">([]</span><span class="nx">predicate</span><span class="p">.</span><span class="nf">Predicate</span><span class="p">(</span><span class="kc">nil</span><span class="p">),</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">globalPredicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">allPredicates</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// If the source of this watch is of type *source.Kind, project it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">srckind</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">src</span><span class="p">.(</span><span class="o">*</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">typeForSrc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">project</span><span class="p">(</span><span class="nx">srckind</span><span class="p">.</span><span class="nx">Type</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">objectProjection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">srckind</span><span class="p">.</span><span class="nx">Type</span> <span class="p">=</span> <span class="nx">typeForSrc</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">src</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">eventhandler</span><span class="p">,</span> <span class="nx">allPredicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>doWatch</code>以此<code>watch</code>当前资源，<code>ownsInput</code>资源（即owner为当前资源），以及通过<code>builder</code>传入的<code>watchsInput</code>，最后调用<code>ctrl.Watch</code>来注册。其中参数<code>eventhandler</code>为入队函数，如当前资源入队实现为<code>handler.EnqueueRequestForObject</code>，类似地<code>handler.EnqueueRequestForOwner</code>是将<code>owner</code>加入工作队列。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">EnqueueRequestForObject</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Create implements EventHandler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">EnqueueRequestForObject</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">evt</span> <span class="nx">event</span><span class="p">.</span><span class="nx">CreateEvent</span><span class="p">,</span> <span class="nx">q</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">Object</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">enqueueLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;CreateEvent received with no metadata&#34;</span><span class="p">,</span> <span class="s">&#34;event&#34;</span><span class="p">,</span> <span class="nx">evt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 加入队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">q</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">reconcile</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span><span class="nx">NamespacedName</span><span class="p">:</span> <span class="nx">types</span><span class="p">.</span><span class="nx">NamespacedName</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span>      <span class="nx">evt</span><span class="p">.</span><span class="nx">Object</span><span class="p">.</span><span class="nf">GetName</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Namespace</span><span class="p">:</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">Object</span><span class="p">.</span><span class="nf">GetNamespace</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>Watch</code>实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">src</span> <span class="nx">source</span><span class="p">.</span><span class="nx">Source</span><span class="p">,</span> <span class="nx">evthdler</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">,</span> <span class="nx">prct</span> <span class="o">...</span><span class="nx">predicate</span><span class="p">.</span><span class="nx">Predicate</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Inject Cache into arguments
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">src</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">evthdler</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">pr</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">prct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">pr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">Started</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span><span class="p">,</span> <span class="nx">watchDescription</span><span class="p">{</span><span class="nx">src</span><span class="p">:</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">handler</span><span class="p">:</span> <span class="nx">evthdler</span><span class="p">,</span> <span class="nx">predicates</span><span class="p">:</span> <span class="nx">prct</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Starting EventSource&#34;</span><span class="p">,</span> <span class="s">&#34;source&#34;</span><span class="p">,</span> <span class="nx">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">src</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">evthdler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">,</span> <span class="nx">prct</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ks</span> <span class="o">*</span><span class="nx">Kind</span><span class="p">)</span> <span class="nf">InjectCache</span><span class="p">(</span><span class="nx">c</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Cache</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ks</span><span class="p">.</span><span class="nx">cache</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ks</span><span class="p">.</span><span class="nx">cache</span> <span class="p">=</span> <span class="nx">c</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ks</span> <span class="o">*</span><span class="nx">Kind</span><span class="p">)</span> <span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">handler</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">,</span> <span class="nx">queue</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">prct</span> <span class="o">...</span><span class="nx">predicate</span><span class="p">.</span><span class="nx">Predicate</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="nx">i</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ks</span><span class="p">.</span><span class="nx">cache</span><span class="p">.</span><span class="nf">GetInformer</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ks</span><span class="p">.</span><span class="nx">Type</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">kindMatchErr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">meta</span><span class="p">.</span><span class="nx">NoKindMatchError</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;if kind is a CRD, it should be installed before calling Start&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="s">&#34;kind&#34;</span><span class="p">,</span> <span class="nx">kindMatchErr</span><span class="p">.</span><span class="nx">GroupKind</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">i</span><span class="p">.</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">internal</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">{</span><span class="nx">Queue</span><span class="p">:</span> <span class="nx">queue</span><span class="p">,</span> <span class="nx">EventHandler</span><span class="p">:</span> <span class="nx">handler</span><span class="p">,</span> <span class="nx">Predicates</span><span class="p">:</span> <span class="nx">prct</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// informer get 实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">InformersMap</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">gvk</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">,</span> <span class="nx">obj</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="o">*</span><span class="nx">MapEntry</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="nx">obj</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">*</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">unstructured</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">*</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">UnstructuredList</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">unstructured</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">*</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">PartialObjectMetadata</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">metadata</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">*</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">PartialObjectMetadataList</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">metadata</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">structured</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 如果informer不存在则新创建一个，加入到informerMap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ip</span> <span class="o">*</span><span class="nx">specificInformersMap</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">gvk</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">,</span> <span class="nx">obj</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="o">*</span><span class="nx">MapEntry</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Return the informer if it is found
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">i</span><span class="p">,</span> <span class="nx">started</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">MapEntry</span><span class="p">,</span> <span class="kt">bool</span><span class="p">,</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ip</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">i</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">informersByGVK</span><span class="p">[</span><span class="nx">gvk</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">ip</span><span class="p">.</span><span class="nx">started</span><span class="p">,</span> <span class="nx">ok</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">started</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ip</span><span class="p">.</span><span class="nf">addInformerToMap</span><span class="p">(</span><span class="nx">gvk</span><span class="p">,</span> <span class="nx">obj</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">started</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">started</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>Watch</code>通过<code>SetFeilds</code>方法注入<code>cache</code>, 最后添加到<code>controller</code>的<code>startWatches</code>队列，若已启动，调用<code>Start</code>方法配置回调函数<code>EventHandler</code>。</p>
<h3 id="manager启动" class="headerLink">
    <a href="#manager%e5%90%af%e5%8a%a8" class="header-mark"></a>Manager启动</h3><p>最后来看<code>Manager</code>启动流程</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="o">*</span><span class="nx">controllerManager</span><span class="p">)</span> <span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">cluster</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to add cluster to runnables: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nx">internalCtx</span><span class="p">,</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">internalCancel</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">stopComplete</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">stopComplete</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stopErr</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">engageStopProcedure</span><span class="p">(</span><span class="nx">stopComplete</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nx">errChan</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">metricsListener</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">serveMetrics</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Serve health probes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">healthProbeListener</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">serveHealthProbes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">startNonLeaderElectionRunnables</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">resourceLock</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">startLeaderElection</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">cm</span><span class="p">.</span><span class="nx">errChan</span> <span class="o">&lt;-</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Treat not having leader election enabled the same as being elected.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">cm</span><span class="p">.</span><span class="nf">startLeaderElectionRunnables</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nb">close</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">elected</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// We are done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">err</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">cm</span><span class="p">.</span><span class="nx">errChan</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Error starting or running a runnable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要流程包括：</p>
<ol>
<li>启动监控服务</li>
<li>启动健康检查服务</li>
<li>启动非选主服务</li>
<li>启动选主服务</li>
</ol>
<p>对于非选主服务，代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="o">*</span><span class="nx">controllerManager</span><span class="p">)</span> <span class="nf">startNonLeaderElectionRunnables</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nf">waitForCache</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">internalCtx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start the non-leaderelection Runnables after the cache has synced
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">nonLeaderElectionRunnables</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cm</span><span class="p">.</span><span class="nf">startRunnable</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="o">*</span><span class="nx">controllerManager</span><span class="p">)</span> <span class="nf">waitForCache</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">started</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cache</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">caches</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cm</span><span class="p">.</span><span class="nf">startRunnable</span><span class="p">(</span><span class="nx">cache</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cache</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">caches</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cache</span><span class="p">.</span><span class="nf">GetCache</span><span class="p">().</span><span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nx">started</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>启动<code>cache</code>，启动其他服务，对于选主服务也类似，初始化<code>controller</code>时会加入到选主服务队列，即最后启动<code>Controller</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">MakeQueue</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">ShutDown</span><span class="p">()</span> <span class="c1">// needs to be outside the iife so that we shutdown after the stop channel is closed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">watch</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Starting EventSource&#34;</span><span class="p">,</span> <span class="s">&#34;source&#34;</span><span class="p">,</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">src</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">,</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">watch</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">syncingSource</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">src</span><span class="p">.(</span><span class="nx">source</span><span class="p">.</span><span class="nx">SyncingSource</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// use a context with timeout for launching sources and syncing caches.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">sourceStartCtx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">syncingSource</span><span class="p">.</span><span class="nf">WaitForSync</span><span class="p">(</span><span class="nx">sourceStartCtx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">err</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to wait for %s caches to sync: %w&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">c</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Could not wait for Cache to sync&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="p">}();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">...</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">UntilWithContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="nx">c</span><span class="p">.</span><span class="nf">processNextWorkItem</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span> <span class="nx">c</span><span class="p">.</span><span class="nx">JitterPeriod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Started</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Stopping workers&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">processNextWorkItem</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">obj</span><span class="p">,</span> <span class="nx">shutdown</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">Get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nf">reconcileHandler</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">reconcileHandler</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Make sure that the the object is a valid request.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">req</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="nx">reconcile</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Do</span><span class="p">.</span><span class="nf">Reconcile</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">req</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>Controller</code>启动主要包括</p>
<ol>
<li>等待cache同步</li>
<li>启动多个<code>processNextWorkItem</code></li>
<li>每个Worker调用<code>c.Do.Reconcile</code>来进行数据处理
与<code>sample-controller</code>工作流程一致，不断获取工作队列中的数据调用<code>Reconcile</code>进行调谐。</li>
</ol>
<h3 id="流程归纳" class="headerLink">
    <a href="#%e6%b5%81%e7%a8%8b%e5%bd%92%e7%ba%b3" class="header-mark"></a>流程归纳</h3><p>至此，通过<code>kubebuilder</code>生成代码的主要逻辑已经明朗，对比<code>sample-controller</code>其实整体流程类似，只是<code>kubebuilder</code>通过<code>controller-runtime</code>已经帮我们做了很多工作，如<code>client</code>、<code>cache</code>的初始化，<code>controller</code>的运行框架，我们只需要关心<code>Reconcile</code>逻辑即可。</p>
<ol>
<li>初始化<code>manager</code>，创建<code>client</code>与<code>cache</code></li>
<li>创建<code>controller</code>，对于监听资源会创建对应<code>informer</code>并添加回调函数</li>
<li>启动<code>manager</code>，启动<code>cache</code>与<code>controller</code></li>
</ol>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p><code>kubebuilder</code>大大简化了开发<code>Operator</code>的流程，了解其背后的原理有利于我们对<code>Operator</code>进行调优，能更好地应用于生产。</p>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ul>
<li><a href="https://github.com/kubernetes/sample-controller" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/sample-controller</a></li>
<li><a href="https://book.kubebuilder.io/architecture.html" target="_blank" rel="noopener noreffer">https://book.kubebuilder.io/architecture.html</a></li>
<li><a href="https://developer.aliyun.com/article/719215" target="_blank" rel="noopener noreffer">https://developer.aliyun.com/article/719215</a></li>
</ul>]]></description>
</item><item>
    <title>快速实现一个Kubernetes Operator</title>
    <link>https://qingwave.github.io/how-to-write-a-k8s-operator/</link>
    <pubDate>Thu, 12 Aug 2021 02:58:47 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/how-to-write-a-k8s-operator/</guid>
    <description><![CDATA[<p>Kubernetes提供了众多的扩展功能，比如CRD、CRI、CSI等等，强大的扩展功能让k8s迅速占领市场。<a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/operator/" target="_blank" rel="noopener noreffer">Operator</a>模式可以实现CRD并管理自定义资源的生命周期，本文基于<a href="https://kubebuilder.io/" target="_blank" rel="noopener noreffer">kubebuilder</a>快速实现一个Operator，示例源码见<a href="https://github.com/qingwave/mygame" target="_blank" rel="noopener noreffer">mygame</a>。</p>
<h2 id="kubebuilder" class="headerLink">
    <a href="#kubebuilder" class="header-mark"></a>Kubebuilder</h2><p><code>kubebuilder</code>是一个官方提供快速实现Operator的工具包，可快速生成k8s的CRD、Controller、Webhook，用户只需要实现业务逻辑。</p>
<blockquote>
<p>类似工具还有<a href="https://sdk.operatorframework.io/" target="_blank" rel="noopener noreffer">operader-sdk</a>，目前正在与<code>Kubebuilder</code>融合</p>
</blockquote>
<p>kubebuilder封装了<code>controller-runtime</code>与<code>controller-tools</code>，通过<code>controller-gen</code>来生产代码，简化了用户创建Operator的步骤。</p>
<p>一般创建Operator流程如下：</p>
<ol>
<li>创建工作目录，初始化项目</li>
<li>创建API，填充字段</li>
<li>创建Controller，编写核心协调逻辑(Reconcile)</li>
<li>创建Webhook，实现接口，可选</li>
<li>验证测试</li>
<li>发布到集群中</li>
</ol>
<h2 id="示例" class="headerLink">
    <a href="#%e7%a4%ba%e4%be%8b" class="header-mark"></a>示例</h2><p>我们准备创建一个2048的游戏，对外可以提供服务，也能方便地扩缩容。</p>
<h3 id="准备环境" class="headerLink">
    <a href="#%e5%87%86%e5%a4%87%e7%8e%af%e5%a2%83" class="header-mark"></a>准备环境</h3><p>首先你需要有Kubernetes、Docker、Golang相关环境。
Linux下安装kubebuilder</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -L -o kubebuilder https://go.kubebuilder.io/dl/latest/<span class="k">$(</span>go env GOOS<span class="k">)</span>/<span class="k">$(</span>go env GOARCH<span class="k">)</span>
</span></span><span class="line"><span class="cl">chmod +x kubebuilder <span class="o">&amp;&amp;</span> mv kubebuilder /usr/local/bin/
</span></span></code></pre></div><h3 id="创建项目" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae" class="header-mark"></a>创建项目</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mkdir -p ~/work/mygame &amp;&amp; cd $_
</span></span><span class="line"><span class="cl">kubebuilder init --domain qingwave.github.io --repo qingwave.github.io/mygame
</span></span></code></pre></div><h3 id="创建api" class="headerLink">
    <a href="#%e5%88%9b%e5%bb%baapi" class="header-mark"></a>创建API</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubebuilder create api --group myapp --version v1 --kind Game
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Create Resource [y/n]
</span></span><span class="line"><span class="cl">y #生成CR
</span></span><span class="line"><span class="cl">Create Controller [y/n]
</span></span><span class="line"><span class="cl">y #生成Controller
</span></span></code></pre></div><p>目录结构如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">├── api
</span></span><span class="line"><span class="cl">│   └── v1 # CRD定义
</span></span><span class="line"><span class="cl">├── bin
</span></span><span class="line"><span class="cl">│   └── controller-gen
</span></span><span class="line"><span class="cl">├── config
</span></span><span class="line"><span class="cl">│   ├── crd # crd配置
</span></span><span class="line"><span class="cl">│   ├── default
</span></span><span class="line"><span class="cl">│   ├── manager # operator部署文件
</span></span><span class="line"><span class="cl">│   ├── prometheus
</span></span><span class="line"><span class="cl">│   ├── rbac
</span></span><span class="line"><span class="cl">│   └── samples # cr示例
</span></span><span class="line"><span class="cl">├── controllers
</span></span><span class="line"><span class="cl">│   ├── game_controller.go # controller逻辑
</span></span><span class="line"><span class="cl">│   └── suite_test.go
</span></span><span class="line"><span class="cl">├── Dockerfile
</span></span><span class="line"><span class="cl">├── go.mod
</span></span><span class="line"><span class="cl">├── go.sum
</span></span><span class="line"><span class="cl">├── hack
</span></span><span class="line"><span class="cl">│   └── boilerplate.go.txt # 头文件模板
</span></span><span class="line"><span class="cl">├── main.go # 项目主函数
</span></span><span class="line"><span class="cl">├── Makefile 
</span></span><span class="line"><span class="cl">└── PROJECT #项目元数据
</span></span></code></pre></div><h3 id="编写api" class="headerLink">
    <a href="#%e7%bc%96%e5%86%99api" class="header-mark"></a>编写API</h3><p>在<code>mygame/api/v1/game_types.go</code>定义我们需要的字段</p>
<p><code>Spec</code>配置如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">GameSpec</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Number of desired pods. This is a pointer to distinguish between explicit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// zero and not specified. Defaults to 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//+kubebuilder:default:=1 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//+kubebuilder:validation:Minimum:=1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Replicas</span> <span class="o">*</span><span class="kt">int32</span> <span class="s">`json:&#34;replicas,omitempty&#34; protobuf:&#34;varint,1,opt,name=replicas&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Docker image name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Image</span> <span class="kt">string</span> <span class="s">`json:&#34;image,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Ingress Host name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Host</span> <span class="kt">string</span> <span class="s">`json:&#34;host,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p><code>kubebuilder:default</code>可以设置默认值</p>
</blockquote>
<p><code>Status</code>定义如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Running</span>  <span class="p">=</span> <span class="s">&#34;Running&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Pending</span>  <span class="p">=</span> <span class="s">&#34;Pending&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">NotReady</span> <span class="p">=</span> <span class="s">&#34;NotReady&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Failed</span>   <span class="p">=</span> <span class="s">&#34;Failed&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">GameStatus</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Phase is the phase of guestbook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Phase</span> <span class="kt">string</span> <span class="s">`json:&#34;phase,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// replicas is the number of Pods created by the StatefulSet controller.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Replicas</span> <span class="kt">int32</span> <span class="s">`json:&#34;replicas&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ReadyReplicas</span> <span class="kt">int32</span> <span class="s">`json:&#34;readyReplicas&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// LabelSelector is label selectors for query over pods that should match the replica count used by HPA.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LabelSelector</span> <span class="kt">string</span> <span class="s">`json:&#34;labelSelector,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>另外需要添加<code>scale</code>接口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//+kubebuilder:subresource:scale:specpath=.spec.replicas,statuspath=.status.replicas,selectorpath=.status.labelSelector
</span></span></code></pre></div><p>添加<code>kubectl</code>展示参数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//+kubebuilder:printcolumn:name=&#34;Phase&#34;,type=&#34;string&#34;,JSONPath=&#34;.status.phase&#34;,description=&#34;The phase of game.&#34;
</span></span><span class="line"><span class="cl">//+kubebuilder:printcolumn:name=&#34;Host&#34;,type=&#34;string&#34;,JSONPath=&#34;.spec.host&#34;,description=&#34;The Host Address.&#34;
</span></span><span class="line"><span class="cl">//+kubebuilder:printcolumn:name=&#34;DESIRED&#34;,type=&#34;integer&#34;,JSONPath=&#34;.spec.replicas&#34;,description=&#34;The desired number of pods.&#34;
</span></span><span class="line"><span class="cl">//+kubebuilder:printcolumn:name=&#34;CURRENT&#34;,type=&#34;integer&#34;,JSONPath=&#34;.status.replicas&#34;,description=&#34;The number of currently all pods.&#34;
</span></span><span class="line"><span class="cl">//+kubebuilder:printcolumn:name=&#34;READY&#34;,type=&#34;integer&#34;,JSONPath=&#34;.status.readyReplicas&#34;,description=&#34;The number of pods ready.&#34;
</span></span><span class="line"><span class="cl">//+kubebuilder:printcolumn:name=&#34;AGE&#34;,type=&#34;date&#34;,JSONPath=&#34;.metadata.creationTimestamp&#34;,description=&#34;CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.&#34;
</span></span></code></pre></div><h3 id="编写controller逻辑" class="headerLink">
    <a href="#%e7%bc%96%e5%86%99controller%e9%80%bb%e8%be%91" class="header-mark"></a>编写Controller逻辑</h3><p>Controller的核心逻辑在<code>Reconcile</code>中，我们只需要填充自己的业务逻辑</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">GameReconciler</span><span class="p">)</span> <span class="nf">Reconcile</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">req</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="nx">ctrl</span><span class="p">.</span><span class="nx">Result</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span> <span class="o">:=</span> <span class="nx">log</span><span class="p">.</span><span class="nf">FromContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;revice reconcile event&#34;</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取game对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">game</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">myappv1</span><span class="p">.</span><span class="nx">Game</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">NamespacedName</span><span class="p">,</span> <span class="nx">game</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Result</span><span class="p">{},</span> <span class="nx">client</span><span class="p">.</span><span class="nf">IgnoreNotFound</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 如果处在删除中直接跳过
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">game</span><span class="p">.</span><span class="nx">DeletionTimestamp</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;game in deleting&#34;</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Result</span><span class="p">{},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 同步资源，如果资源不存在创建deployment、ingress、service，并更新status
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">syncGame</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">game</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;failed to sync game&#34;</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Result</span><span class="p">{},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Result</span><span class="p">{},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>添加rbac配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//+kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete
</span></span><span class="line"><span class="cl">//+kubebuilder:rbac:groups=apps,resources=deployments/status,verbs=get;update;patch
</span></span><span class="line"><span class="cl">//+kubebuilder:rbac:groups=core,resources=services,verbs=get;list;watch;create;update;patch;delete
</span></span><span class="line"><span class="cl">//+kubebuilder:rbac:groups=networking,resources=ingresses,verbs=get;list;watch;create;update;patch;delete
</span></span></code></pre></div><p>具体<code>syncGame</code>逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">GameReconciler</span><span class="p">)</span> <span class="nf">syncGame</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">obj</span> <span class="o">*</span><span class="nx">myappv1</span><span class="p">.</span><span class="nx">Game</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span> <span class="o">:=</span> <span class="nx">log</span><span class="p">.</span><span class="nf">FromContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">game</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.</span><span class="nf">DeepCopy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="o">:=</span> <span class="nx">types</span><span class="p">.</span><span class="nx">NamespacedName</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Namespace</span><span class="p">:</span> <span class="nx">game</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span>      <span class="nx">game</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 构造owner
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">owner</span> <span class="o">:=</span> <span class="p">[]</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">OwnerReference</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">APIVersion</span><span class="p">:</span>         <span class="nx">game</span><span class="p">.</span><span class="nx">APIVersion</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Kind</span><span class="p">:</span>               <span class="nx">game</span><span class="p">.</span><span class="nx">Kind</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>               <span class="nx">game</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Controller</span><span class="p">:</span>         <span class="nx">pointer</span><span class="p">.</span><span class="nf">BoolPtr</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">BlockOwnerDeletion</span><span class="p">:</span> <span class="nx">pointer</span><span class="p">.</span><span class="nf">BoolPtr</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">UID</span><span class="p">:</span>                <span class="nx">game</span><span class="p">.</span><span class="nx">UID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">labels</span> <span class="o">:=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">Labels</span>
</span></span><span class="line"><span class="cl">	<span class="nx">labels</span><span class="p">[</span><span class="nx">gameLabelName</span><span class="p">]</span> <span class="p">=</span> <span class="nx">game</span><span class="p">.</span><span class="nx">Name</span>
</span></span><span class="line"><span class="cl">	<span class="nx">meta</span> <span class="o">:=</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span>            <span class="nx">game</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Namespace</span><span class="p">:</span>       <span class="nx">game</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Labels</span><span class="p">:</span>          <span class="nx">labels</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">OwnerReferences</span><span class="p">:</span> <span class="nx">owner</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 获取对应deployment, 如不存在则创建
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">deploy</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">deploy</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">IsNotFound</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">deploy</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ObjectMeta</span><span class="p">:</span> <span class="nx">meta</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Spec</span><span class="p">:</span>       <span class="nf">getDeploymentSpec</span><span class="p">(</span><span class="nx">game</span><span class="p">,</span> <span class="nx">labels</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">deploy</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;create deployment success&#34;</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果存在对比和game生成的deployment是否一致，不一致则更新
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">want</span> <span class="o">:=</span> <span class="nf">getDeploymentSpec</span><span class="p">(</span><span class="nx">game</span><span class="p">,</span> <span class="nx">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">get</span> <span class="o">:=</span> <span class="nf">getSpecFromDeployment</span><span class="p">(</span><span class="nx">deploy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">DeepEqual</span><span class="p">(</span><span class="nx">want</span><span class="p">,</span> <span class="nx">get</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">deploy</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">ObjectMeta</span><span class="p">:</span> <span class="nx">meta</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Spec</span><span class="p">:</span>       <span class="nx">want</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">deploy</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;update deployment success&#34;</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">//service创建
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">svc</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">Service</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">svc</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	  <span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// ingress创建
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ing</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">networkingv1</span><span class="p">.</span><span class="nx">Ingress</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">ing</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">newStatus</span> <span class="o">:=</span> <span class="nx">myappv1</span><span class="p">.</span><span class="nx">GameStatus</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Replicas</span><span class="p">:</span>      <span class="o">*</span><span class="nx">game</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Replicas</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ReadyReplicas</span><span class="p">:</span> <span class="nx">deploy</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">ReadyReplicas</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">newStatus</span><span class="p">.</span><span class="nx">Replicas</span> <span class="o">==</span> <span class="nx">newStatus</span><span class="p">.</span><span class="nx">ReadyReplicas</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newStatus</span><span class="p">.</span><span class="nx">Phase</span> <span class="p">=</span> <span class="nx">myappv1</span><span class="p">.</span><span class="nx">Running</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newStatus</span><span class="p">.</span><span class="nx">Phase</span> <span class="p">=</span> <span class="nx">myappv1</span><span class="p">.</span><span class="nx">NotReady</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 更新状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">DeepEqual</span><span class="p">(</span><span class="nx">game</span><span class="p">.</span><span class="nx">Status</span><span class="p">,</span> <span class="nx">newStatus</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">game</span><span class="p">.</span><span class="nx">Status</span> <span class="p">=</span> <span class="nx">newStatus</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;update game status&#34;</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Status</span><span class="p">().</span><span class="nf">Update</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">game</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>默认情况下生成的controller只监听自定义资源，在示例中我们也需要监听<code>game</code>的子资源，如监听<code>deployment</code>是否符合预期</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// SetupWithManager sets up the controller with the Manager.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">GameReconciler</span><span class="p">)</span> <span class="nf">SetupWithManager</span><span class="p">(</span><span class="nx">mgr</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Manager</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建controller
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">controller</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;game-controller&#34;</span><span class="p">,</span> <span class="nx">mgr</span><span class="p">,</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Reconciler</span><span class="p">:</span>              <span class="nx">r</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MaxConcurrentReconciles</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="c1">//controller运行的worker数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//监听自定义资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">myappv1</span><span class="p">.</span><span class="nx">Game</span><span class="p">{}},</span> <span class="o">&amp;</span><span class="nx">handler</span><span class="p">.</span><span class="nx">EnqueueRequestForObject</span><span class="p">{});</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//监听deployment,将owner信息即game namespace/name添加到队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{}},</span> <span class="o">&amp;</span><span class="nx">handler</span><span class="p">.</span><span class="nx">EnqueueRequestForOwner</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">OwnerType</span><span class="p">:</span>    <span class="o">&amp;</span><span class="nx">myappv1</span><span class="p">.</span><span class="nx">Game</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">IsController</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="部署验证" class="headerLink">
    <a href="#%e9%83%a8%e7%bd%b2%e9%aa%8c%e8%af%81" class="header-mark"></a>部署验证</h3><p>安装CRD</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">make install
</span></span></code></pre></div><p>本地运行operator</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">make run
</span></span></code></pre></div><p>修改sample文件<code>config/samples/myapp_v1_game.yaml</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">myapp.qingwave.github.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Game</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">game-sample</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">alexwhen/docker-2048</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">mygame.io</span><span class="w">
</span></span></span></code></pre></div><p>部署<code>game-sample</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubectl apply -f config/samples/myapp_v1_game.yaml
</span></span></code></pre></div><p>查看<code>game</code>自定义资源状态</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看game</span>
</span></span><span class="line"><span class="cl">kubectl get game
</span></span><span class="line"><span class="cl">NAME          PHASE     HOST        DESIRED   CURRENT   READY   AGE
</span></span><span class="line"><span class="cl">game-sample   Running   mygame.io   <span class="m">1</span>         <span class="m">1</span>         <span class="m">1</span>       6m
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看deploy</span>
</span></span><span class="line"><span class="cl">kubectl get deploy game-sample
</span></span><span class="line"><span class="cl">NAME          READY   UP-TO-DATE   AVAILABLE   AGE
</span></span><span class="line"><span class="cl">game-sample   1/1     <span class="m">1</span>            <span class="m">1</span>           6m
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看ingress</span>
</span></span><span class="line"><span class="cl">kubectl get ing game-sample
</span></span><span class="line"><span class="cl">NAME          CLASS    HOSTS       ADDRESS        PORTS   AGE
</span></span><span class="line"><span class="cl">game-sample   &lt;none&gt;   mygame.io   192.168.49.2   <span class="m">80</span>      7m
</span></span></code></pre></div><p>验证应用，在<code>/etc/hosts</code>中添加<code>&lt;Ingress ADDRESS Ip&gt;	mygame.io</code>，访问浏览器如下图所示


</p>
<p>验证扩容</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl scale games.myapp.qingwave.github.io game-sample --replicas <span class="m">2</span>
</span></span><span class="line"><span class="cl">game.myapp.qingwave.github.io/game-sample scaled
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 扩容后</span>
</span></span><span class="line"><span class="cl">kubectl get games.myapp.qingwave.github.io
</span></span><span class="line"><span class="cl">NAME          PHASE     HOST        DESIRED   CURRENT   READY   AGE
</span></span><span class="line"><span class="cl">game-sample   Running   mygame.io   <span class="m">2</span>         <span class="m">2</span>         <span class="m">2</span>       7m
</span></span></code></pre></div><p>如需部署<code>Operator</code>到集群中，可参考官方文档，制作镜像并上传，运行<code>make deploy</code></p>
<h3 id="webhook" class="headerLink">
    <a href="#webhook" class="header-mark"></a>Webhook</h3><p>通常我们需要与CR自定义资源设置部分字段的默认值，或者验证字段是否合法，这就需要自己实现<code>Webhook</code>，<code>Kubebuilder</code>也提供了<code>Webhook</code>的功能。</p>
<p>通过设置<code>--defaulting</code>可创建<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/#mutatingadmissionwebhook" target="_blank" rel="noopener noreffer">mutatingadmissionwebhook</a>类型准入控制器，用来修改传入资源；参数<code>--programmatic-validation</code>可创建<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/#validatingadmissionwebhook" target="_blank" rel="noopener noreffer">validatingadmissionwebhook</a>，用来验证传入资源</p>
<blockquote>
<p>在资源创建、修改时<code>apiserver</code>会通过http调用<code>webhook</code>提供的接口，所以会带来额外开销，简单的验证工作可通过<code>//+kubebuilder:validation</code>注解，直接通过<code>openapi</code>验证，性能更好</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubebuilder create webhook --group myapp --version v1 --kind Game --defaulting --programmatic-validation
</span></span></code></pre></div><p>生成文件在<code>api/v1/game_webhook.go</code></p>
<p><code>Default</code>接口可实现修改资源，根据kubebuilder注释,当<code>game</code>资源<code>create</code>与<code>update</code>时，调用这个接口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//+kubebuilder:webhook:path=/mutate-myapp-qingwave-github-io-v1-game,mutating=true,failurePolicy=fail,sideEffects=None,groups=myapp.qingwave.github.io,resources=games,verbs=create;update,versions=v1,name=mgame.kb.io,admissionReviewVersions={v1,v1beta1}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">defaultImage</span> <span class="p">=</span> <span class="s">`alexwhen/docker-2048`</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Default implements webhook.Defaulter so a webhook will be registered for the type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Game</span><span class="p">)</span> <span class="nf">Default</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gamelog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;default&#34;</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置默认镜像
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Image</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Image</span> <span class="p">=</span> <span class="nx">defaultImage</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置默认Host
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Host</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Host</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s.%s.mygame.io&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>同样的通过<code>ValidateCreate</code>、<code>ValidateUpdate</code>可实现<code>validating webhook</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Game</span><span class="p">)</span> <span class="nf">ValidateCreate</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gamelog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;validate create&#34;</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Host不能包括通配符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Host</span><span class="p">,</span> <span class="s">&#34;*&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;host should not contain *&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>本地验证webhook需要配置证书，在集群中测试更方便点，可参考官方文档。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>至此，我们已经实现了一个功能完全的<code>game-operator</code>，可以管理<code>game</code>资源的生命周期，创建/更新game时会自动创建<code>deployment、service、ingress</code>等资源，当<code>deployment</code>被误删或者误修改时也可以自动回复到期望状态，也实现了<code>scale</code>接口。</p>
<p>通过<code>kubebuiler</code>大大简化了开发<code>operator</code>的成本，我们只需要关心业务逻辑即可，不需要再手动去创建<code>client/controller</code>等，但同时<code>kubebuilder</code>生成的代码中屏蔽了很多细节，比如<code>controller</code>的最大worker数、同步时间、队列类型等参数设置，只有了解<code>operator</code>的原理才更好应用于生产。</p>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ul>
<li><a href="https://book.kubebuilder.io/" target="_blank" rel="noopener noreffer">https://book.kubebuilder.io/</a></li>
</ul>]]></description>
</item><item>
    <title>优化Kubernetes横向扩缩HPA</title>
    <link>https://qingwave.github.io/k8s-hpa-enchance/</link>
    <pubDate>Fri, 02 Apr 2021 13:41:00 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-hpa-enchance/</guid>
    <description><![CDATA[<p>Pod水平自动扩缩（Horizontal Pod Autoscaler, 简称HPA）可以基于 CPU/MEM 利用率自动扩缩Deployment、StatefulSet 中的 Pod 数量，同时也可以基于其他应程序提供的自定义度量指标来执行自动扩缩。默认HPA可以满足一些简单场景，对于生产环境并不一定适合，本文主要分析HPA的不足与优化方式。</p>
<h2 id="hpa-resource类型不足" class="headerLink">
    <a href="#hpa-resource%e7%b1%bb%e5%9e%8b%e4%b8%8d%e8%b6%b3" class="header-mark"></a>HPA Resource类型不足</h2><p>默认HPA提供了Resource类型，通过CPU/MEM使用率指标（由metrics-server提供原始指标）来扩缩应用。</p>
<h3 id="使用率计算方式" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8%e7%8e%87%e8%ae%a1%e7%ae%97%e6%96%b9%e5%bc%8f" class="header-mark"></a>使用率计算方式</h3><p>在Resource类型中，使用率计算是通过<code>request</code>而不是<code>limit</code>，源码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 获取Pod resource request
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">calculatePodRequests</span><span class="p">(</span><span class="nx">pods</span> <span class="p">[]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">resource</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ResourceName</span><span class="p">)</span> <span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">requests</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">pods</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">pods</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">podSum</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">container</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Containers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">containerRequest</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Resources</span><span class="p">.</span><span class="nx">Requests</span><span class="p">[</span><span class="nx">resource</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">podSum</span> <span class="o">+=</span> <span class="nx">containerRequest</span><span class="p">.</span><span class="nf">MilliValue</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;missing request for %s&#34;</span><span class="p">,</span> <span class="nx">resource</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">requests</span><span class="p">[</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">podSum</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">requests</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 计算使用率
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">GetResourceUtilizationRatio</span><span class="p">(</span><span class="nx">metrics</span> <span class="nx">PodMetricsInfo</span><span class="p">,</span> <span class="nx">requests</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int64</span><span class="p">,</span> <span class="nx">targetUtilization</span> <span class="kt">int32</span><span class="p">)</span> <span class="p">(</span><span class="nx">utilizationRatio</span> <span class="kt">float64</span><span class="p">,</span> <span class="nx">currentUtilization</span> <span class="kt">int32</span><span class="p">,</span> <span class="nx">rawAverageValue</span> <span class="kt">int64</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metricsTotal</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">requestsTotal</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">numEntries</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">podName</span><span class="p">,</span> <span class="nx">metric</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">metrics</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">request</span><span class="p">,</span> <span class="nx">hasRequest</span> <span class="o">:=</span> <span class="nx">requests</span><span class="p">[</span><span class="nx">podName</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">hasRequest</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// we check for missing requests elsewhere, so assuming missing requests == extraneous metrics
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">metricsTotal</span> <span class="o">+=</span> <span class="nx">metric</span><span class="p">.</span><span class="nx">Value</span>
</span></span><span class="line"><span class="cl">		<span class="nx">requestsTotal</span> <span class="o">+=</span> <span class="nx">request</span>
</span></span><span class="line"><span class="cl">		<span class="nx">numEntries</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">currentUtilization</span> <span class="p">=</span> <span class="nb">int32</span><span class="p">((</span><span class="nx">metricsTotal</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">/</span> <span class="nx">requestsTotal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">currentUtilization</span><span class="p">)</span> <span class="o">/</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">targetUtilization</span><span class="p">),</span> <span class="nx">currentUtilization</span><span class="p">,</span> <span class="nx">metricsTotal</span> <span class="o">/</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">numEntries</span><span class="p">),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通常在Paas平台中会对资源进行超配，<code>limit</code>即用户请求资源，<code>request</code>即实际分配资源，如果按照request来计算使用率（会超过100%）是不符合预期的。相关issue见<a href="https://github.com/kubernetes/kubernetes/issues/72811" target="_blank" rel="noopener noreffer">72811</a>，目前还存在争论。可以修改源码，或者使用自定义指标来代替。</p>
<h3 id="多容器pod使用率问题" class="headerLink">
    <a href="#%e5%a4%9a%e5%ae%b9%e5%99%a8pod%e4%bd%bf%e7%94%a8%e7%8e%87%e9%97%ae%e9%a2%98" class="header-mark"></a>多容器Pod使用率问题</h3><p>默认提供的<code>Resource</code>类型的HPA，通过上述方式计算资源使用率，核心方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="nx">metricsTotal</span> <span class="p">=</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">pod</span><span class="p">.</span><span class="nx">container</span><span class="p">.</span><span class="nx">metricValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">requestsTotal</span> <span class="p">=</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">pod</span><span class="p">.</span><span class="nx">container</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">currentUtilization</span> <span class="p">=</span> <span class="nb">int32</span><span class="p">((</span><span class="nx">metricsTotal</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">/</span> <span class="nx">requestsTotal</span><span class="p">)</span>
</span></span></code></pre></div><p>计算出所有<code>container</code>的资源使用量再比总的申请量，对于单容器Pod这没影响。但对于多容器Pod，比如Pod包含多个容器con1、con2(request都为1cpu)，con1使用率10%，con2使用率100%，HPA目标使用率60%，按照目前方式得到使用率为55%不会进行扩容，但实际con2已经达到资源瓶颈，势必会影响服务质量。当前系统中，多容器Pod通常都是1个主容器与多个sidecar，依赖主容器的指标更合适点。</p>
<p>好在<em>1.20</em>版本中已经支持了<a href="https://kubernetes.io/zh/docs/tasks/run-application/horizontal-pod-autoscale/#container-resource-metrics" target="_blank" rel="noopener noreffer">ContainerResource</a>可以配置基于某个容器的资源使用率来进行扩缩，如果是之前的版本建议使用自定义指标替换。</p>
<h2 id="性能问题" class="headerLink">
    <a href="#%e6%80%a7%e8%83%bd%e9%97%ae%e9%a2%98" class="header-mark"></a>性能问题</h2><h3 id="单线程架构" class="headerLink">
    <a href="#%e5%8d%95%e7%ba%bf%e7%a8%8b%e6%9e%b6%e6%9e%84" class="header-mark"></a>单线程架构</h3><p>默认的<code>hpa-controller</code>是单个Goroutine执行的，随着集群规模的增多，势必会成为性能瓶颈，目前默认hpa资源同步周期会<code>15s</code>，假设每个metric请求延时为<code>100ms</code>，当前架构只能支持<code>150</code>个HPA资源（保证在15s内同步一次）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">a</span> <span class="o">*</span><span class="nx">HorizontalController</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// start a single worker (we may wish to start more in the future)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">worker</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>可以通过调整<code>worker</code>数量来横向扩展，已提交<a href="https://github.com/kubernetes/kubernetes/pull/99688" target="_blank" rel="noopener noreffer">PR</a>。</p>
<h3 id="调用链路" class="headerLink">
    <a href="#%e8%b0%83%e7%94%a8%e9%93%be%e8%b7%af" class="header-mark"></a>调用链路</h3><p>在<code>hpa controller</code>中一次hpa资源同步，需要调用多次apiserver接口，主要链路如下</p>
<ol>
<li>通过<code>scaleForResourceMappings</code>得到scale资源</li>
<li>调用<code>computeReplicasForMetrics</code>获取metrics value</li>
<li>调用<code>Scales().Update</code>更新计算出的副本数</li>
</ol>
<p>尤其在获取metrics value时，需要先调用apiserver，apiserver调用metrics-server/custom-metrics-server，当集群内存在大量hpa时可能会对apiserver性能产生一定影响。</p>
<h2 id="其他" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96" class="header-mark"></a>其他</h2><p>对于自定义指标用户需要实现<code>custom.metrics.k8s.io</code>或<code>external.metrics.k8s.io</code>，目前已经有部分开源实现见<a href="https://github.com/kubernetes/metrics/blob/master/IMPLEMENTATIONS.md#custom-metrics-api" target="_blank" rel="noopener noreffer">custom-metrics-api</a>。</p>
<p>另外，hpa核心的扩缩算法根据当前指标和期望指标来计算扩缩比例，并不适合所有场景，只使用线性增长的指标。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">期望副本数 = ceil[当前副本数 * (当前指标 / 期望指标)]
</span></span></code></pre></div><p><a href="https://github.com/DataDog/https://github.com/DataDog/watermarkpodautoscaler" target="_blank" rel="noopener noreffer">watermarkpodautoscaler</a>提供了更灵活的扩缩算法，比如平均值、水位线等，可以作为参考。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>Kubernetes提供原生的HPA只能满足一部分场景，如果要上生产环境，必须对其做一些优化，本文总结了当前HPA存在的不足，例如在性能、使用率计算方面，并提供了解决思路。</p>]]></description>
</item><item>
    <title>Prometheus高可用自动分区方案</title>
    <link>https://qingwave.github.io/prometheus-auto-federation/</link>
    <pubDate>Tue, 30 Mar 2021 19:07:20 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/prometheus-auto-federation/</guid>
    <description><![CDATA[<p>在<a href="/prometheus-federation" rel="">Prometheus分区实践</a>中我们介绍了使用集群联邦与远程存储来扩展Prometheus以及监控数据持久化，但之前的分区方案存在一定不足，如分区配置较难维护，全局Prometheus存在性能瓶颈等，本文通过<code>Thanos+Kvass</code>实现更优雅的Prometheus扩展方案。</p>
<h2 id="自动分区" class="headerLink">
    <a href="#%e8%87%aa%e5%8a%a8%e5%88%86%e5%8c%ba" class="header-mark"></a>自动分区</h2><p>之前分区方案依赖Prometheus提供的<code>hashmod</code>方法，通过在配置中指定<code>hash</code>对象与<code>modules</code>进行散列（md5），每个分片只抓取相同job命中的对象，例如我们可以通过对<code>node</code>散列从而对<code>cadvisor</code>、<code>node-exporter</code>等job做分片。</p>
<p>通过这种方式可以简单的扩展Prometheus，降低其抓取压力，但是显而易见<code>hashmod</code>需要指定散列对象，每个job可能需要配置不同的对象如<code>node</code>、<code>pod</code>、<code>ip</code>等，随着采集对象增多，配置难以维护。直到看见了<a href="https://github.com/tkestack/kvass" target="_blank" rel="noopener noreffer">Kvass</a>，Kvass是一个Prometheus横向扩展方案，可以不依赖<code>hashmod</code>动态调整target，支持数千万series规模。</p>
<p>Kvass核心架构如下：


</p>
<ul>
<li><code>Kvass-Coordinator</code>: 加载配置文件并进行服务发现，获取所有target，周期性分配target到<code>kvass-sidecar</code>，以及管理分片负载与扩缩容</li>
<li><code>Kvass-Sidecar</code>: 根据<code>Coordinator</code>分发的target生成配置，以及代理Prometheus请求</li>
</ul>
<p>通过Kvass可实现Prometheus动态横向扩展，而不依赖<code>hashmod</code>，灵活性更高。</p>
<h2 id="全局查询" class="headerLink">
    <a href="#%e5%85%a8%e5%b1%80%e6%9f%a5%e8%af%a2" class="header-mark"></a>全局查询</h2><p>另一个问题是在集群联邦中我们需要一个全局的Prometheus来聚合分区Prometheus的数据，依赖原生的<code>/federate</code>接口，随着数据量增多，全局Prometheus必然会达到性能瓶颈。高可用Prometheus集群解决方案<a href="https://github.com/thanos-io/thanos" target="_blank" rel="noopener noreffer">Thanos</a>中提供了全局查询功能，通过<code>Thanos-Query</code>与<code>Thanos-Sidecar</code>可实现查询多个Prometheus的数据，并支持了去重。</p>
<p>Thanos组件较多，核心架构如下：


</p>
<ul>
<li><code>Thanos Query</code>: 实现了<code>Prometheus API</code>，将来自下游组件提供的数据进行聚合最终返回给查询数据的client (如 grafana)，类似数据库中间件</li>
<li><code>Thanos Sidecar</code>: 连接Prometheus，将其数据提供给<code>Thanos Query</code>查询，并且可将其上传到对象存储，以供长期存储</li>
<li><code>Thanos Store Gateway</code>: 将对象存储的数据暴露给<code>Thanos Query</code>去查询</li>
<li><code>Thanos Ruler</code>: 对监控数据进行评估和告警，还可以计算出新的监控数据，将这些新数据提供给<code>Thanos Query</code>查询并且可上传到对象存储，以供长期存储</li>
<li><code>Thanos Compact</code>: 将对象存储中的数据进行压缩和降低采样率，加速大时间区间监控数据查询的速度</li>
</ul>
<p>借助于Thanos提供的<code>Query</code>与<code>Ruler</code>我们可以实现全局查询与聚合。</p>
<h2 id="最终方案" class="headerLink">
    <a href="#%e6%9c%80%e7%bb%88%e6%96%b9%e6%a1%88" class="header-mark"></a>最终方案</h2><p><code>Kvass+Thanos</code>可实现Prometheus自动扩展、全局查询，再配合<code>Remote Wirite</code>实现数据支持化，通过Grafana展示监控数据


</p>
<h3 id="测试验证" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95%e9%aa%8c%e8%af%81" class="header-mark"></a>测试验证</h3><p>所有部署文件见<a href="https://github.com/qingwave/kube-monitor/tree/master/prometheus-kvass" target="_blank" rel="noopener noreffer">prometheus-kvass</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/qingwave/kube-monitor.git
</span></span><span class="line"><span class="cl">kubectl apply -f kube-monitor/prometheus-kvass
</span></span></code></pre></div><p>结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get po
</span></span><span class="line"><span class="cl">NAME                                 READY   STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">kvass-coordinator-7f65c546d9-vxgxr   2/2     Running   <span class="m">2</span>          29h
</span></span><span class="line"><span class="cl">metrics-774949d94d-4btzh             1/1     Running   <span class="m">0</span>          10s
</span></span><span class="line"><span class="cl">metrics-774949d94d-558gn             1/1     Running   <span class="m">1</span>          29h
</span></span><span class="line"><span class="cl">metrics-774949d94d-gs8kc             1/1     Running   <span class="m">1</span>          29h
</span></span><span class="line"><span class="cl">metrics-774949d94d-r85rc             1/1     Running   <span class="m">1</span>          29h
</span></span><span class="line"><span class="cl">metrics-774949d94d-xhbk9             1/1     Running   <span class="m">0</span>          10s
</span></span><span class="line"><span class="cl">metrics-774949d94d-z5mwk             1/1     Running   <span class="m">1</span>          29h
</span></span><span class="line"><span class="cl">prometheus-rep-0-0                   3/3     Running   <span class="m">0</span>          49s
</span></span><span class="line"><span class="cl">prometheus-rep-0-1                   3/3     Running   <span class="m">0</span>          48s
</span></span><span class="line"><span class="cl">prometheus-rep-0-2                   3/3     Running   <span class="m">0</span>          19s
</span></span><span class="line"><span class="cl">thanos-query-b469b648f-ltxth         1/1     Running   <span class="m">0</span>          60s
</span></span><span class="line"><span class="cl">thanos-rule-0                        1/1     Running   <span class="m">2</span>          25h
</span></span></code></pre></div><p>Deployment <code>metrics</code>有6个副本，每个生成10045 series，<code>kvass-coordinator</code>配置每个分区最大series为30000，以及Prometheus默认的指标，需要3个Prometheus分片。</p>
<p>每个分片包含2个target</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">prometheus_tsdb_head_chunks<span class="o">{</span><span class="nv">instance</span><span class="o">=</span><span class="s2">&#34;127.0.0.1:9090&#34;</span>,job<span class="o">=</span><span class="s2">&#34;prometheus_shards&#34;</span>,replicate<span class="o">=</span><span class="s2">&#34;prometheus-rep-0-0&#34;</span>,shard<span class="o">=</span><span class="s2">&#34;0&#34;</span><span class="o">}</span>	<span class="m">20557</span>
</span></span></code></pre></div><p>通过<code>Thanos Query</code>可以查询到多个Prometheus分片的数据，以及聚合规则<code>metrics_count</code>


</p>
<h3 id="待优化问题" class="headerLink">
    <a href="#%e5%be%85%e4%bc%98%e5%8c%96%e9%97%ae%e9%a2%98" class="header-mark"></a>待优化问题</h3><p>此方案可满足绝大部分场景，用户可通过自己的实际环境配合不同的组件，但也存在一些需要优化确认的问题</p>
<ul>
<li><code>Thanos Ruler</code>不支持远程写接口，只能存储于Thanos提供的对象存储中</li>
<li><code>Thanos Query</code>全局查询依赖多个下游组件，可能只返回部分结果挺好使</li>
<li><code>Coordinator</code>性能需要压测验证</li>
</ul>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p><code>Kvass+Thanos+Remote-write</code>可以实现Prometheus集群的自动分区、全局查询、数据持久化等功能，满足绝大部分场景。虽然有一些问题需要验证优化，但瑕不掩瑜，能够解决原生Prometheus扩展性问题。</p>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ul>
<li><a href="https://qingwave.github.io/prometheus-federation/" target="_blank" rel="noopener noreffer">https://qingwave.github.io/prometheus-federation/</a></li>
<li><a href="https://github.com/tkestack/kvass" target="_blank" rel="noopener noreffer">https://github.com/tkestack/kvass</a></li>
<li><a href="https://github.com/thanos-io/thanos" target="_blank" rel="noopener noreffer">https://github.com/thanos-io/thanos</a></li>
</ul>]]></description>
</item><item>
    <title>k8s中shell脚本启动如何传递信号</title>
    <link>https://qingwave.github.io/docker-shell-signal/</link>
    <pubDate>Wed, 03 Feb 2021 15:13:10 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/docker-shell-signal/</guid>
    <description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>在k8s或docker中，有时候我们需要通过shell来启动程序，但是默认shell不会传递信号（sigterm）给子进程，当在pod终止时应用无法优雅退出，直到最大时间时间后强制退出（<code>kill -9</code>）。</p>
<h2 id="分析" class="headerLink">
    <a href="#%e5%88%86%e6%9e%90" class="header-mark"></a>分析</h2><p>普通情况下，大多业务的启动命令如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">command: <span class="o">[</span><span class="s2">&#34;binary&#34;</span>, <span class="s2">&#34;-flags&#34;</span>, ...<span class="o">]</span>
</span></span></code></pre></div><p>主进程做为1号进程会收到<code>sigterm</code>信号，优雅退出(需要程序捕获信号); 而通过脚本启动时，<code>shell</code>作为1号进程，不会显示传递信号给子进程，造成子进程无法优雅退出，直到最大退出时间后强制终止。</p>
<h2 id="解决方案" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88" class="header-mark"></a>解决方案</h2><h3 id="exec" class="headerLink">
    <a href="#exec" class="header-mark"></a>exec</h3><p>如何只需一个进程收到信号，可通过<code>exec</code>，<code>exec</code>会替换当前shell进程，即<code>pid</code>不变</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#! /bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># do something</span>
</span></span><span class="line"><span class="cl"><span class="nb">exec</span> binay -flags ...
</span></span></code></pre></div><p>正常情况测试命令如下，使用sleep来模拟应用<code>sh -c 'echo &quot;start&quot;; sleep 100'</code>：
<code>pstree</code>展示如下，<code>sleep</code>进程会生成一个子进程</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">bash(28701)───sh(24588)───sleep(24589)
</span></span></code></pre></div><p>通过<code>exec</code>运行后，命令<code>sh -c 'echo &quot;start&quot;; exec sleep 100'</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">bash(28701)───sleep(24664)
</span></span></code></pre></div><p>加入<code>exec</code>后，<code>sleep</code>进程替换了shell进程，没有生成子进程</p>
<p>此种方式可以收到信号，但只适用于一个子进程的情况</p>
<h3 id="trap" class="headerLink">
    <a href="#trap" class="header-mark"></a>trap</h3><p>在shell中可以显示通过<code>trap</code>捕捉信号传递给子进程</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">echo</span> <span class="s2">&#34;start&#34;</span>
</span></span><span class="line"><span class="cl">binary -flags... <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="nv">pid</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$!</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">_kill<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;receive sigterm&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">kill</span> <span class="nv">$pid</span> <span class="c1">#传递给子进程</span>
</span></span><span class="line"><span class="cl">  <span class="nb">wait</span> <span class="nv">$pid</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">trap</span> _kill SIGTERM <span class="c1">#捕获信号</span>
</span></span><span class="line"><span class="cl"><span class="nb">wait</span> <span class="c1">#等待子进程退出</span>
</span></span></code></pre></div><p>此种方式需要改动启动脚本，显示传递信号给子进程</p>
<h2 id="docker-init" class="headerLink">
    <a href="#docker-init" class="header-mark"></a>docker-init</h2><p><a href="https://docs.docker.com/engine/reference/run/#specify-an-init-process" target="_blank" rel="noopener noreffer">docker-init</a>即在docker启动时加入<code>--init</code>参数，docker-int会作为一号进程，会向子进程传递信号并且会回收僵尸进程。</p>
<p>遗憾的是k8s并不支持<code>--init</code>参数，用户可在镜像中声明init进程，更多可参考<a href="./container-init.md" rel="">container-init</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="k">RUN</span> wget -O /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_amd64<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> chmod +x /usr/bin/dumb-init<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;/usr/bin/dumb-init&#34;</span><span class="p">,</span> <span class="s2">&#34;-v&#34;</span><span class="p">,</span> <span class="s2">&#34;--&#34;</span><span class="p">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;nginx&#34;</span><span class="p">,</span> <span class="s2">&#34;-g&#34;</span><span class="p">,</span> <span class="s2">&#34;daemon off;&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></div>]]></description>
</item><item>
    <title>优化Kubernetes集群内DNS</title>
    <link>https://qingwave.github.io/k8s-dns-optimize/</link>
    <pubDate>Mon, 01 Feb 2021 10:17:40 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-dns-optimize/</guid>
    <description><![CDATA[<p>kubernetes集群内置的dns插件<code>kubedns/coredns</code>在高并发情况下可能遇到性能瓶颈，以下从配置与本地缓存方面说明如何减少dns查询失败率，提高性能。</p>
<h2 id="配置优化" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae%e4%bc%98%e5%8c%96" class="header-mark"></a>配置优化</h2><h3 id="dnspolicy" class="headerLink">
    <a href="#dnspolicy" class="header-mark"></a>dnsPolicy</h3><p>k8s 默认的 <code>dnsPolicy</code> 是<code>ClusterFirst</code>，因为 <code>ndots</code> 和 <code>serach domain</code> 在访问外部 dns 会有额外的查询次数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/ <span class="c1"># cat /etc/resolv.conf </span>
</span></span><span class="line"><span class="cl">nameserver 10.254.0.2
</span></span><span class="line"><span class="cl">search default.svc.cluster.local svc.cluster.local cluster.local
</span></span><span class="line"><span class="cl">options ndots:5
</span></span><span class="line"><span class="cl">/ <span class="c1"># </span>
</span></span><span class="line"><span class="cl">/ <span class="c1"># </span>
</span></span><span class="line"><span class="cl">/ <span class="c1">#  host -v mi.com</span>
</span></span><span class="line"><span class="cl">Trying <span class="s2">&#34;mi.com.default.svc.cluster.local&#34;</span>
</span></span><span class="line"><span class="cl">Trying <span class="s2">&#34;mi.com.svc.cluster.local&#34;</span>
</span></span><span class="line"><span class="cl">Trying <span class="s2">&#34;mi.com.cluster.local&#34;</span>
</span></span><span class="line"><span class="cl">Trying <span class="s2">&#34;mi.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> -&gt;&gt;HEADER<span class="s">&lt;&lt;- opco</span>de: QUERY, status: NOERROR, id: <span class="m">38967</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> flags: qr rd ra<span class="p">;</span> QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> QUESTION SECTION:
</span></span><span class="line"><span class="cl"><span class="p">;</span>mi.com.                                IN        A
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> ANSWER SECTION:
</span></span><span class="line"><span class="cl">mi.com.                        <span class="m">30</span>        IN        A        58.83.160.156
</span></span></code></pre></div><p>如果不访问service，调整<code>dnsPolicy</code>为<code>Default</code>，直接走宿主机的dns</p>
<h3 id="ndots" class="headerLink">
    <a href="#ndots" class="header-mark"></a>ndots</h3><p>如需访问service，尽量减少<code>ndots</code>（默认5）即域名中点的个数小于<code>ndots</code>会按照search域（mi.com.default.svc.cluster.local）依次查询，若查询不到再查询原始域名，总共进行8次dns查询（4次ipv4, 4次ipv6）</p>
<p>设置<code>ndots</code>为1后，只有两次查询（1次ipv4, ipv6）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/ <span class="c1">#  host -v mi.com</span>
</span></span><span class="line"><span class="cl">Trying <span class="s2">&#34;mi.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> -&gt;&gt;HEADER<span class="s">&lt;&lt;- opco</span>de: QUERY, status: NOERROR, id: <span class="m">23894</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> flags: qr rd ra<span class="p">;</span> QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> QUESTION SECTION:
</span></span><span class="line"><span class="cl"><span class="p">;</span>mi.com.                                IN        A
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> ANSWER SECTION:
</span></span><span class="line"><span class="cl">mi.com.                        <span class="m">30</span>        IN        A        58.83.160.156
</span></span></code></pre></div><p>但此种方式service域名分割大于等于<code>ndots</code>，则解析不到，需要业务自行判断合适的<code>ndots</code>值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/ <span class="c1">#  host -v prometheus.kube-system</span>
</span></span><span class="line"><span class="cl">Trying <span class="s2">&#34;prometheus.kube-system&#34;</span>
</span></span><span class="line"><span class="cl">Host prometheus.kube-system not found: 3<span class="o">(</span>NXDOMAIN<span class="o">)</span>
</span></span><span class="line"><span class="cl">Received <span class="m">115</span> bytes from 10.254.0.2#53 in <span class="m">8</span> ms
</span></span><span class="line"><span class="cl">Received <span class="m">115</span> bytes from 10.254.0.2#53 in <span class="m">8</span> ms
</span></span></code></pre></div><h3 id="coredns优化" class="headerLink">
    <a href="#coredns%e4%bc%98%e5%8c%96" class="header-mark"></a>coredns优化</h3><p>调整合理的副本数，阿里建议<code>coredns:node=1:8</code>，启动<code>AutoPath</code>插件减少查询次数，见<a href="2" rel="">DNS性能优化</a></p>
<h2 id="dns缓存" class="headerLink">
    <a href="#dns%e7%bc%93%e5%ad%98" class="header-mark"></a>DNS缓存</h2><h3 id="nodelocaldns" class="headerLink">
    <a href="#nodelocaldns" class="header-mark"></a>NodeLocalDNS</h3><p>NodeLocal DNSCache 通过在集群节点上作为 DaemonSet 运行 dns 缓存代理来提高集群 DNS 性能，
借助这种新架构，Pods 将可以访问在同一节点上运行的 dns 缓存代理，从而避免了 iptables DNAT 规则和连接跟踪。</p>
<p>架构如下:


</p>
<p>NodeLocalDNS的设计提案见（<a href="3" rel="">nodelocal-dns-cache</a>）</p>
<h4 id="验证" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81" class="header-mark"></a>验证</h4><p>官方安装方式见<a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns/nodelocaldns" target="_blank" rel="noopener noreffer">nodelocaldns</a>，需要自行替换变量</p>
<p>可通过如下脚本，一键安装（注意设置kubedns svc ClusterIP）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/nodelocaldns/nodelocaldns.yaml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># registery</span>
</span></span><span class="line"><span class="cl"><span class="nv">docker_registery</span><span class="o">=</span>k8s.gcr.io/dns/k8s-dns-node-cache
</span></span><span class="line"><span class="cl"><span class="c1"># kube-dns svc clusterip</span>
</span></span><span class="line"><span class="cl"><span class="nv">kubedns_svc</span><span class="o">=</span>10.254.0.2
</span></span><span class="line"><span class="cl"><span class="c1"># nodelocaldns ip</span>
</span></span><span class="line"><span class="cl"><span class="nv">nodelocaldns_ip</span><span class="o">=</span>169.254.20.10
</span></span><span class="line"><span class="cl"><span class="c1"># kube-proxy mode, iptables or ipvs</span>
</span></span><span class="line"><span class="cl"><span class="nv">kubeproxy_mode</span><span class="o">=</span>iptables
</span></span><span class="line"><span class="cl"><span class="nv">result</span><span class="o">=</span>result.yaml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="si">${</span><span class="nv">kubeproxy_mode</span><span class="si">}</span> <span class="o">==</span> <span class="s2">&#34;ipvs&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    sed -e <span class="s2">&#34;s|k8s.gcr.io/dns/k8s-dns-node-cache|</span><span class="nv">$docker_registery</span><span class="s2">|g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -e <span class="s2">&#34;s/__PILLAR__CLUSTER__DNS__/</span><span class="nv">$kubedns_svc</span><span class="s2">/g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -e <span class="s2">&#34;s/__PILLAR__LOCAL__DNS__/</span><span class="nv">$nodelocaldns_ip</span><span class="s2">/g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -e <span class="s1">&#39;s/[ |,]__PILLAR__DNS__SERVER__//g&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -e <span class="s2">&#34;s/__PILLAR__DNS__DOMAIN__/cluster.local/g&#34;</span> nodelocaldns.yaml &gt;<span class="nv">$result</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">    sed -e <span class="s2">&#34;s|k8s.gcr.io/dns/k8s-dns-node-cache|</span><span class="nv">$docker_registery</span><span class="s2">|g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -e <span class="s2">&#34;s/__PILLAR__DNS__SERVER__/</span><span class="nv">$kubedns_svc</span><span class="s2">/g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -e <span class="s2">&#34;s/__PILLAR__LOCAL__DNS__/</span><span class="nv">$nodelocaldns_ip</span><span class="s2">/g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -e <span class="s2">&#34;s/__PILLAR__DNS__DOMAIN__/cluster.local/g&#34;</span> nodelocaldns.yaml &gt;<span class="nv">$result</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl apply -f <span class="nv">$result</span>
</span></span></code></pre></div><p>创建完成后，每个节点运行一个pod，查看pod(个别节点ingress-nginx占用8080端口，导致nodelocaldns启动失败)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># kubectl  get po -n kube-system -l k8s-app=node-local-dns -o wide</span>
</span></span><span class="line"><span class="cl">NAME                   READY   STATUS             RESTARTS   AGE    IP              NODE                            NOMINATED NODE   READINESS GATES
</span></span><span class="line"><span class="cl">node-local-dns-2fvxb   0/1     CrashLoopBackOff   <span class="m">4</span>          103s   10.38.200.195   node04          &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">node-local-dns-4zmcd   1/1     Running            <span class="m">0</span>          54d    10.38.201.55    node06   &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">node-local-dns-55tzg   1/1     Running            <span class="m">0</span>          60d    10.38.200.186   node02          &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">node-local-dns-cctg7   1/1     Running            <span class="m">0</span>          54d    10.38.200.242   node07   &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">node-local-dns-khgmm   1/1     Running            <span class="m">0</span>          54d    10.38.201.36    node08   &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">node-local-dns-mbr64   1/1     Running            <span class="m">0</span>          60d    10.38.200.187   node05          &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">node-local-dns-t67vw   1/1     Running            <span class="m">0</span>          60d    10.38.200.188   node03          &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">node-local-dns-tmm92   1/1     Running            <span class="m">14</span>         54d    10.38.200.57    node09   &lt;none&gt;           &lt;none&gt;
</span></span></code></pre></div><p>默认配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cluster.local:53 <span class="o">{</span>
</span></span><span class="line"><span class="cl">    errors
</span></span><span class="line"><span class="cl">    cache <span class="o">{</span>
</span></span><span class="line"><span class="cl">            success <span class="m">9984</span> <span class="m">30</span> <span class="c1"># 默认成功缓存30s</span>
</span></span><span class="line"><span class="cl">            denial <span class="m">9984</span> <span class="m">5</span> <span class="c1">#失败缓存5s</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    reload
</span></span><span class="line"><span class="cl">    loop
</span></span><span class="line"><span class="cl">    <span class="nb">bind</span> 169.254.20.10 10.254.0.2 <span class="c1">#本地监听ip</span>
</span></span><span class="line"><span class="cl">    forward . 10.254.132.95 <span class="o">{</span> <span class="c1">#转发到kubedns-upstream</span>
</span></span><span class="line"><span class="cl">            force_tcp
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    prometheus :9253 <span class="c1">#监控接口</span>
</span></span><span class="line"><span class="cl">    health 169.254.20.10:8080 <span class="c1">#健康检测端口</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">in-addr.arpa:53 <span class="o">{</span>
</span></span><span class="line"><span class="cl">    errors
</span></span><span class="line"><span class="cl">    cache <span class="m">30</span>
</span></span><span class="line"><span class="cl">    reload
</span></span><span class="line"><span class="cl">    loop
</span></span><span class="line"><span class="cl">    <span class="nb">bind</span> 169.254.20.10 10.254.0.2
</span></span><span class="line"><span class="cl">    forward . 10.254.132.95 <span class="o">{</span>
</span></span><span class="line"><span class="cl">            force_tcp
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    prometheus :9253
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">ip6.arpa:53 <span class="o">{</span>
</span></span><span class="line"><span class="cl">    errors
</span></span><span class="line"><span class="cl">    cache <span class="m">30</span>
</span></span><span class="line"><span class="cl">    reload
</span></span><span class="line"><span class="cl">    loop
</span></span><span class="line"><span class="cl">    <span class="nb">bind</span> 169.254.20.10 10.254.0.2
</span></span><span class="line"><span class="cl">    forward . 10.254.132.95 <span class="o">{</span>
</span></span><span class="line"><span class="cl">            force_tcp
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    prometheus :9253
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">.:53 <span class="o">{</span>
</span></span><span class="line"><span class="cl">    errors
</span></span><span class="line"><span class="cl">    cache <span class="m">30</span>
</span></span><span class="line"><span class="cl">    reload
</span></span><span class="line"><span class="cl">    loop
</span></span><span class="line"><span class="cl">    <span class="nb">bind</span> 169.254.20.10 10.254.0.2
</span></span><span class="line"><span class="cl">    forward . /etc/resolv.conf
</span></span><span class="line"><span class="cl">    prometheus :9253
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>节点上查看localdns的网卡，本地将监听<code>169.254.20.10</code>与<code>10.254.0.2</code>两个地址，拦截kubedns((默认<code>10.254.0.2</code>)的请求，命中后直接返回，若未命中转发到kubedns(对应service <code>kube-dns-upstream</code>，kube-dns-upstream由localdns创建绑定kubedns pod)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># ip addr show nodelocaldns</span>
</span></span><span class="line"><span class="cl">182232: nodelocaldns: &lt;BROADCAST,NOARP&gt; mtu <span class="m">1500</span> qdisc noop state DOWN 
</span></span><span class="line"><span class="cl">    link/ether 4e:62:1c:fd:56:12 brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 169.254.20.10/32 brd 169.254.20.10 scope global nodelocaldns
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet 10.254.0.2/32 brd 10.254.0.2 scope global nodelocaldns
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span></code></pre></div><p>iptables规则，使用<code>NOTRACK</code>跳过其它表处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">iptables-save <span class="p">|</span> egrep <span class="s2">&#34;10.254.0.2|169.254.20.10&#34;</span>
</span></span><span class="line"><span class="cl">-A PREROUTING -d 10.254.0.2/32 -p udp -m udp --dport <span class="m">53</span> -j NOTRACK
</span></span><span class="line"><span class="cl">-A PREROUTING -d 10.254.0.2/32 -p tcp -m tcp --dport <span class="m">53</span> -j NOTRACK
</span></span><span class="line"><span class="cl">-A PREROUTING -d 169.254.20.10/32 -p udp -m udp --dport <span class="m">53</span> -j NOTRACK
</span></span><span class="line"><span class="cl">-A PREROUTING -d 169.254.20.10/32 -p tcp -m tcp --dport <span class="m">53</span> -j NOTRACK
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-A OUTPUT -d 10.254.0.2/32 -p udp -m udp --dport <span class="m">53</span> -j NOTRACK
</span></span><span class="line"><span class="cl">-A OUTPUT -d 10.254.0.2/32 -p tcp -m tcp --dport <span class="m">53</span> -j NOTRACK
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-A INPUT -d 10.254.0.2/32 -p udp -m udp --dport <span class="m">53</span> -j ACCEPT
</span></span><span class="line"><span class="cl">-A INPUT -d 10.254.0.2/32 -p tcp -m tcp --dport <span class="m">53</span> -j ACCEPT
</span></span><span class="line"><span class="cl">-A OUTPUT -s 10.254.0.2/32 -p udp -m udp --sport <span class="m">53</span> -j ACCEPT
</span></span><span class="line"><span class="cl">-A OUTPUT -s 10.254.0.2/32 -p tcp -m tcp --sport <span class="m">53</span> -j ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">-A KUBE-SERVICES -d 10.254.0.2/32 -p tcp -m comment --comment <span class="s2">&#34;kube-system/kube-dns:dns-tcp cluster IP&#34;</span> -m tcp --dport <span class="m">53</span> -j KUBE-SVC-ERIFXISQEP7F7OF4
</span></span><span class="line"><span class="cl">-A KUBE-SERVICES -d 10.254.0.2/32 -p tcp -m comment --comment <span class="s2">&#34;kube-system/kube-dns:metrics cluster IP&#34;</span> -m tcp --dport <span class="m">9153</span> -j KUBE-SVC-JD5MR3NA4I4DYORP
</span></span><span class="line"><span class="cl">-A KUBE-SERVICES -d 10.254.0.2/32 -p udp -m comment --comment <span class="s2">&#34;kube-system/kube-dns:dns cluster IP&#34;</span> -m udp --dport <span class="m">53</span> -j KUBE-SVC-TCOU7JCQXEZGVUNU
</span></span></code></pre></div><p>在pod通过localdns解析域名</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># kubectl  exec -it dns-perf-client-64cfb49f9-9c5hg sh</span>
</span></span><span class="line"><span class="cl">/ <span class="c1"># nslookup kubernetes 169.254.20.10</span>
</span></span><span class="line"><span class="cl">Server:                169.254.20.10
</span></span><span class="line"><span class="cl">Address:        169.254.20.10#53
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Name:        kubernetes.default.svc.cluster.local
</span></span><span class="line"><span class="cl">Address: 10.254.0.1
</span></span></code></pre></div><h4 id="压测" class="headerLink">
    <a href="#%e5%8e%8b%e6%b5%8b" class="header-mark"></a>压测</h4><p>通过<code>dnsperf</code>进行压测</p>
<p>测试域名列表如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># cat records.txt </span>
</span></span><span class="line"><span class="cl">mi.com A
</span></span><span class="line"><span class="cl">github.com A
</span></span><span class="line"><span class="cl">www.microsoft.com A
</span></span><span class="line"><span class="cl">www.aliyun.com A
</span></span><span class="line"><span class="cl">kubernetes.io A
</span></span><span class="line"><span class="cl">nginx A
</span></span><span class="line"><span class="cl">nginx.default A
</span></span><span class="line"><span class="cl">kubernetes A
</span></span><span class="line"><span class="cl">kubernetes.default.svc.cluster.local A
</span></span><span class="line"><span class="cl">kube-dns.kube-system.svc.cluster.local A
</span></span></code></pre></div><p>测试命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dnsperf -l <span class="m">120</span> -s 10.254.0.2 -d records.txt
</span></span></code></pre></div><p>结果如下</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">client number</th>
<th style="text-align:left">qps</th>
<th style="text-align:left">avg-lantency(ms)</th>
<th style="text-align:left">stddev(ms)</th>
<th style="text-align:left">lost</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">kubedns(1 pod)</td>
<td style="text-align:left">1</td>
<td style="text-align:left">53910</td>
<td style="text-align:left">1.83</td>
<td style="text-align:left">6.07</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">kubedns(2 pod)</td>
<td style="text-align:left">2</td>
<td style="text-align:left">110000</td>
<td style="text-align:left">1.83</td>
<td style="text-align:left">1.94</td>
<td style="text-align:left">9%</td>
</tr>
<tr>
<td style="text-align:left">kubedns(4 pod)</td>
<td style="text-align:left">4</td>
<td style="text-align:left">120000</td>
<td style="text-align:left">3.2</td>
<td style="text-align:left">0.8</td>
<td style="text-align:left">24%</td>
</tr>
<tr>
<td style="text-align:left">nodelocaldns</td>
<td style="text-align:left">1</td>
<td style="text-align:left">71494</td>
<td style="text-align:left">1.39</td>
<td style="text-align:left">1.66</td>
<td style="text-align:left">0%</td>
</tr>
<tr>
<td style="text-align:left">nodelocaldns</td>
<td style="text-align:left">2</td>
<td style="text-align:left">142000</td>
<td style="text-align:left">1.37</td>
<td style="text-align:left">1.55</td>
<td style="text-align:left">0%</td>
</tr>
</tbody>
</table>
<p>相比<code>nodelocaldns</code>，<code>localdns</code>查询性能提高了33%，而且延时相对更小，由于<code>localdns</code>是分布式的整体qps相对kubedns有较大优势。当前测试相对简单，大部分请求会命中缓存，完整的测试结果待进一步验证。</p>
<h4 id="优缺点" class="headerLink">
    <a href="#%e4%bc%98%e7%bc%ba%e7%82%b9" class="header-mark"></a>优缺点</h4><p>优点：</p>
<ul>
<li>大幅减少dns查询延时</li>
<li>提高dns qps</li>
<li>不经过<code>iptables</code>与<code>conntrack</code></li>
<li>默认使用tcp查询dns，避免 dns 5秒延时</li>
</ul>
<p>缺点：</p>
<ul>
<li>单点故障（OOM/Evicted/Config Error/Upgrade），社区通过起一个探测daemonset监听localdns状态，如果localdns异常将去掉iptables规则</li>
<li><code>hostnetwork</code>, 占用多个端口（8080, 9253等）</li>
<li>ipvs模式下，需要改动kubelet默认dns配置（<code>NOTRACK</code>将对<code>ipvs</code>无效，除非service后端实例为0）</li>
</ul>
<p>注意事项</p>
<ul>
<li>低版本dns存在tcp请求内存泄露</li>
<li>安装时<code>iptables</code>与<code>ipvs</code>配置不同</li>
</ul>
<h4 id="ha" class="headerLink">
    <a href="#ha" class="header-mark"></a>HA</h4><ul>
<li>社区提案将<code>iptables</code>写入规则从<code>nodelocaldns</code>拆分为单独的daemonset，通过监听<code>localdns</code>地址来判断是否写入或删除<code>iptables</code>规则（ipvs默认下无效）</li>
<li>在<code>/etc/resolv.conf</code>配置多个<code>nameservers</code>(不推荐，不同基础库表现不同，如<code>glibc 2.16+</code>查询dns时会向多个<code>nameservers</code>发送请求，反而造成了请求激增)</li>
</ul>
<h4 id="灰度方式" class="headerLink">
    <a href="#%e7%81%b0%e5%ba%a6%e6%96%b9%e5%bc%8f" class="header-mark"></a>灰度方式</h4><ul>
<li>通过<code>dnsConfi</code>g配置Pod级别dns（需要配置启动参数localip）</li>
<li>通过设置<code>nodeselector</code>灰度Node级别dns策略</li>
</ul>
<h3 id="本地dns缓存" class="headerLink">
    <a href="#%e6%9c%ac%e5%9c%b0dns%e7%bc%93%e5%ad%98" class="header-mark"></a>本地DNS缓存</h3><p>除了nodelocaldns，用户还可以在容器内或者添加sidecar来启用dns缓存</p>
<ol>
<li>
<p>通过在镜像中加入nscd进程，缓存dns，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">FROM ubuntu
</span></span><span class="line"><span class="cl">RUN apt-get update <span class="o">&amp;&amp;</span> apt-get install -y nscd <span class="o">&amp;&amp;</span> rm -rf /var/lib/apt/lists/*
</span></span><span class="line"><span class="cl">CMD service nscd start<span class="p">;</span> bash -c <span class="s2">&#34;sleep 3600&#34;</span>
</span></span></code></pre></div><p>此种方式需要用户改动镜像，或者加入额外脚本配置<code>nscd</code></p>
</li>
<li>
<p>另外可以配置可配置dns缓存 sidecar（如<code>coredns</code>, <code>dnsmasq</code>）来提高性能，此种方式灵活性高，但需要改动pod配置，而且较<code>nodelocaldns</code>浪费资源</p>
</li>
</ol>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/nodelocaldns/" target="_blank" rel="noopener noreffer">https://kubernetes.io/zh/docs/tasks/administer-cluster/nodelocaldns/</a></li>
<li><a href="https://help.aliyun.com/document_detail/172339.html" target="_blank" rel="noopener noreffer">https://help.aliyun.com/document_detail/172339.html</a></li>
<li><a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/0030-nodelocal-dns-cache.md" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/0030-nodelocal-dns-cache.md</a></li>
<li><a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/1024-nodelocal-cache-dns/README.md" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/1024-nodelocal-cache-dns/README.md</a></li>
<li><a href="https://lework.github.io/2020/11/09/node-local-dns/" target="_blank" rel="noopener noreffer">https://lework.github.io/2020/11/09/node-local-dns/</a></li>
</ul>]]></description>
</item><item>
    <title>kubernetes apiserver限流方案</title>
    <link>https://qingwave.github.io/k8s-rate-limit/</link>
    <pubDate>Wed, 11 Nov 2020 13:17:00 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-rate-limit/</guid>
    <description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>为了防止突发流量影响apiserver可用性，k8s支持多种限流配置，包括：</p>
<ul>
<li>MaxInFlightLimit，server级别整体限流</li>
<li>Client限流</li>
<li>EventRateLimit, 限制event</li>
<li>APF，更细力度的限制配置</li>
</ul>
<h3 id="maxinflightlimit" class="headerLink">
    <a href="#maxinflightlimit" class="header-mark"></a>MaxInFlightLimit</h3><p>MaxInFlightLimit限流，apiserver默认可设置最大并发量（集群级别，区分只读与修改操作），通过参数<code>--max-requests-inflight</code>和 <code>--max-mutating-requests-inflight</code>， 可以简单实现限流。</p>
<h3 id="client限流" class="headerLink">
    <a href="#client%e9%99%90%e6%b5%81" class="header-mark"></a>Client限流</h3><p>例如client-go默认的qps为5，但是只支持客户端限流，集群管理员无法控制用户行为。</p>
<h3 id="eventratelimit" class="headerLink">
    <a href="#eventratelimit" class="header-mark"></a>EventRateLimit</h3><p>EventRateLimit在1.13之后支持，只限制event请求，集成在apiserver内部webhoook中，可配置某个用户、namespace、server等event操作限制，通过webhook形式实现。</p>
<p>具体原理可以参考<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/#eventratelimit" target="_blank" rel="noopener noreffer">提案</a>，每个eventratelimit 配置使用一个单独的令牌桶限速器，每次event操作，遍历每个匹配的限速器检查是否能获取令牌，如果可以允许请求，否则返回<code>429</code>。</p>
<p><strong>优点</strong></p>
<ul>
<li>实现简单，允许一定量的并发</li>
<li>可支持server/namespace/user等级别的限流</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>仅支持event，通过webhook实现只能拦截修改类请求</li>
<li>所有namespace的限流相同，没有优先级</li>
</ul>
<h3 id="api-优先级和公平性" class="headerLink">
    <a href="#api-%e4%bc%98%e5%85%88%e7%ba%a7%e5%92%8c%e5%85%ac%e5%b9%b3%e6%80%a7" class="header-mark"></a>API 优先级和公平性</h3><p>apiserver默认的限流方式太过简单，一个错误的客户端发送大量请求可能造成其他客户端请求异常，也不支持突发流量。</p>
<p>API 优先级和公平性（APF）是MaxInFlightLimit限流的一种替代方案，设计文档见<a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-api-machinery/1040-priority-and-fairness" target="_blank" rel="noopener noreffer">提案</a>。</p>
<p>API 优先级和公平性（1.15以上，alpha版本）， 以更细粒度（byUser，byNamespace）对请求进行分类和隔离。 支持突发流量，通过使用公平排队技术从队列中分发请求从而避免饥饿。</p>
<p>APF限流通过两种资源，<code>PriorityLevelConfigurations</code>定义隔离类型和可处理的并发预算量，还可以调整排队行为。 <code>FlowSchemas</code>用于对每个入站请求进行分类，并与一个 <code>PriorityLevelConfigurations</code>相匹配。</p>
<p>可对用户或用户组或全局进行某些资源某些请求的限制，如限制default namespace写services put/patch请求。</p>
<p><strong>优点</strong></p>
<ul>
<li>考虑情况较全面，支持优先级，白名单等</li>
<li>可支持server/namespace/user/resource等细粒度级别的限流</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>配置复杂，不直观，需要对APF原理深入了解</li>
<li>功能较新，缺少生产环境验证</li>
</ul>
<p><strong>APF测试</strong>
开启APF，需要在apiserver配置<code>--feature-gates=APIPriorityAndFairness=true --runtime-config=flowcontrol.apiserver.k8s.io/v1alpha1=true</code></p>
<p>开启后，获取默认的FlowSchemas</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get flowschemas.flowcontrol.apiserver.k8s.io 
</span></span><span class="line"><span class="cl">NAME                           PRIORITYLEVEL     MATCHINGPRECEDENCE   DISTINGUISHERMETHOD   AGE    MISSINGPL
</span></span><span class="line"><span class="cl">system-leader-election         leader-election   <span class="m">100</span>                  ByUser                152m   False
</span></span><span class="line"><span class="cl">workload-leader-election       leader-election   <span class="m">200</span>                  ByUser                152m   False
</span></span><span class="line"><span class="cl">system-nodes                   system            <span class="m">500</span>                  ByUser                152m   False
</span></span><span class="line"><span class="cl">kube-controller-manager        workload-high     <span class="m">800</span>                  ByNamespace           152m   False
</span></span><span class="line"><span class="cl">kube-scheduler                 workload-high     <span class="m">800</span>                  ByNamespace           152m   False
</span></span><span class="line"><span class="cl">kube-system-service-accounts   workload-high     <span class="m">900</span>                  ByNamespace           152m   False
</span></span><span class="line"><span class="cl">health-for-strangers           exempt            <span class="m">1000</span>                 &lt;none&gt;                151m   False
</span></span><span class="line"><span class="cl">service-accounts               workload-low      <span class="m">9000</span>                 ByUser                152m   False
</span></span><span class="line"><span class="cl">global-default                 global-default    <span class="m">9900</span>                 ByUser                152m   False
</span></span><span class="line"><span class="cl">catch-all                      catch-all         <span class="m">10000</span>                ByUser                152m   False
</span></span></code></pre></div><p>FlowShema配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">flowcontrol.apiserver.k8s.io/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">FlowSchema</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">health-for-strangers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">matchingPrecedence</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w"> </span><span class="c">#匹配优先级，1~1000，越小优先级越高</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">priorityLevelConfiguration</span><span class="p">:</span><span class="w"> </span><span class="c">#关联的PriorityLevelConfigurations</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">exempt</span><span class="w"> </span><span class="c">#排除rules，即不限制当前flowshema的rules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w"> </span><span class="c">#请求规则</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">nonResourceRules</span><span class="p">:</span><span class="w"> </span><span class="c">#非资源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">nonResourceURLs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;/healthz&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;/livez&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;/readyz&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">verbs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;*&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">subjects</span><span class="p">:</span><span class="w"> </span><span class="c">#对应的用户或用户组</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">group</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">system:unauthenticated</span><span class="w">
</span></span></span></code></pre></div><p>PriorityLevelConfiguration配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">flowcontrol.apiserver.k8s.io/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PriorityLevelConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">leader-election</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">limited</span><span class="p">:</span><span class="w"> </span><span class="c">#限制策略</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">assuredConcurrencyShares</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">limitResponse</span><span class="p">:</span><span class="w"> </span><span class="c">#如何处理被限制的请求</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">queuing</span><span class="p">:</span><span class="w"> </span><span class="c">#类型为Queue时，列队的设置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">handSize</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w"> </span><span class="c">#队列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">queueLengthLimit</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w"> </span><span class="c">#队列长度</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">queues</span><span class="p">:</span><span class="w"> </span><span class="m">16</span><span class="w"> </span><span class="c">#队列数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Queue</span><span class="w"> </span><span class="c">#Queue或者Reject，Reject直接返回429，Queue将请求加入队列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Limited</span><span class="w"> </span><span class="c">#类型，Limited或Exempt， Exempt即不限制</span><span class="w">
</span></span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>以上是k8s相关的限流策略，通过多种策略来保证集群的稳定性。</p>
<p>目前MaxInFlightLimit可以轻松开启，但是限制策略不精细，而APF功能较新，实现较复杂，在充分验证后，可通过APF对全集群进行限流。</p>
]]></description>
</item><item>
    <title>Kubernetes中Sidecar生命周期管理</title>
    <link>https://qingwave.github.io/k8s-sideccar-lifecycle/</link>
    <pubDate>Mon, 21 Sep 2020 11:45:00 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-sideccar-lifecycle/</guid>
    <description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>在多个容器的Pod中，通常业务容器需要依赖sidecar。启动时sidecar需要先启动，退出时sidecar需要在业务容器退出后再退出。k8s目前对于sidecar的生命周期比较有争议，见<a href="https://github.com/kubernetes/enhancements/issues/753" target="_blank" rel="noopener noreffer">issue</a>、<a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/0753-sidecarcontainers.md" target="_blank" rel="noopener noreffer">sidecarcontainers</a>。</p>
<p>Kubernetes Pod 内有两种容器: 初始化容器(init container)和应用容器(app container)。</p>
<p>其中初始化容器的执行先于应用容器，按顺序启动，执行成功启动下一个：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">container</span> <span class="o">:=</span> <span class="nx">podContainerChanges</span><span class="p">.</span><span class="nx">NextInitContainerToStart</span><span class="p">;</span> <span class="nx">container</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Start the next init container.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">start</span><span class="p">(</span><span class="s">&#34;init container&#34;</span><span class="p">,</span> <span class="nf">containerStartSpec</span><span class="p">(</span><span class="nx">container</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Successfully started the container; clear the entry in the failure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Completed init container %q for pod %q&#34;</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">format</span><span class="p">.</span><span class="nf">Pod</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>而对于应用容器，无法保证容器ready顺序，启动代码如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">    <span class="c1">// Step 7: start containers in podContainerChanges.ContainersToStart.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">idx</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">podContainerChanges</span><span class="p">.</span><span class="nx">ContainersToStart</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// start函数向docker发请求启动容器，这里没有检测函数返回而且不确定ENTRYPOINT是否成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nf">start</span><span class="p">(</span><span class="s">&#34;container&#34;</span><span class="p">,</span> <span class="nf">containerStartSpec</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Containers</span><span class="p">[</span><span class="nx">idx</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>在删除时，同样无法保证删除顺序，代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">container</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">runningPod</span><span class="p">.</span><span class="nx">Containers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">container</span> <span class="o">*</span><span class="nx">kubecontainer</span><span class="p">.</span><span class="nx">Container</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">killContainerResult</span> <span class="o">:=</span> <span class="nx">kubecontainer</span><span class="p">.</span><span class="nf">NewSyncResult</span><span class="p">(</span><span class="nx">kubecontainer</span><span class="p">.</span><span class="nx">KillContainer</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 每一个容器起goroutine执行删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">killContainer</span><span class="p">(</span><span class="nx">pod</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">ID</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">gracePeriodOverride</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">               <span class="o">...</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">containerResults</span> <span class="o">&lt;-</span> <span class="nx">killContainerResult</span>
</span></span><span class="line"><span class="cl">        <span class="p">}(</span><span class="nx">container</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><h2 id="启动顺序" class="headerLink">
    <a href="#%e5%90%af%e5%8a%a8%e9%a1%ba%e5%ba%8f" class="header-mark"></a>启动顺序</h2><p>k8s原生方式，对于pod中一个容器依赖另一个容器，目前需要业务进程判断依赖服务是否启动或者sleep 10s，这种方式可以工作，但不太优雅。需要业务更改启动脚本。</p>
<p>那么，有没有其他的解决办法？</p>
<h3 id="源码分析" class="headerLink">
    <a href="#%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90" class="header-mark"></a>源码分析</h3><p>在启动时，start函数调用startContainer来创建容器，主要代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">kubeGenericRuntimeManager</span><span class="p">)</span> <span class="nf">startContainer</span><span class="p">(</span><span class="nx">podSandboxID</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">podSandboxConfig</span> <span class="o">*</span><span class="nx">runtimeapi</span><span class="p">.</span><span class="nx">PodSandboxConfig</span><span class="p">,</span> <span class="nx">spec</span> <span class="o">*</span><span class="nx">startSpec</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">podStatus</span> <span class="o">*</span><span class="nx">kubecontainer</span><span class="p">.</span><span class="nx">PodStatus</span><span class="p">,</span> <span class="nx">pullSecrets</span> <span class="p">[]</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Secret</span><span class="p">,</span> <span class="nx">podIP</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">podIPs</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">container</span> <span class="o">:=</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">container</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Step 1: 拉镜像.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">imageRef</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">imagePuller</span><span class="p">.</span><span class="nf">EnsureImageExists</span><span class="p">(</span><span class="nx">pod</span><span class="p">,</span> <span class="nx">container</span><span class="p">,</span> <span class="nx">pullSecrets</span><span class="p">,</span> <span class="nx">podSandboxConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Step 2: 调用cri创建容器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// For a new container, the RestartCount should be 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">containerID</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">runtimeService</span><span class="p">.</span><span class="nf">CreateContainer</span><span class="p">(</span><span class="nx">podSandboxID</span><span class="p">,</span> <span class="nx">containerConfig</span><span class="p">,</span> <span class="nx">podSandboxConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Step 3: 启动容器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">runtimeService</span><span class="p">.</span><span class="nf">StartContainer</span><span class="p">(</span><span class="nx">containerID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Step 4: 执行 post start hook.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Lifecycle</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Lifecycle</span><span class="p">.</span><span class="nx">PostStart</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">kubeContainerID</span> <span class="o">:=</span> <span class="nx">kubecontainer</span><span class="p">.</span><span class="nx">ContainerID</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Type</span><span class="p">:</span> <span class="nx">m</span><span class="p">.</span><span class="nx">runtimeName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">ID</span><span class="p">:</span>   <span class="nx">containerID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用Run来执行hook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">msg</span><span class="p">,</span> <span class="nx">handlerErr</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">runner</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">kubeContainerID</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">container</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Lifecycle</span><span class="p">.</span><span class="nx">PostStart</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>步骤如下：</p>
<ol>
<li>拉取镜像</li>
<li>创建容器</li>
<li>启动容器</li>
<li>执行hook</li>
</ol>
<p>一个Pod中容器的启动是有顺序的，排在前面容器的先启动。同时第一个容器执行完ENTRYPOINT和PostStart之后（异步执行，无法确定顺序），k8s才会创建第二个容器（这样的话就可以保证第一个容器创建多长时间后再启动第二个容器）</p>
<p>如果我们PostStart阶段去检测容器是否ready，那么只有在ready后才去执行下一个容器。</p>
<p>

</p>
<h3 id="测试" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95" class="header-mark"></a>测试</h3><p>配置如下，sidecar模拟需要依赖的容器，main为业务容器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-start</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sidecar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/bin/sh&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;-c&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;sleep 3600&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lifecycle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">postStart</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/bin/sh&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;-c&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;sleep 20&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/bin/sh&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;-c&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;sleep 3600&#34;</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p>得到结果如下，可以看到sidecar启动21s后才开始启动main容器，满足需求</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Events:
</span></span><span class="line"><span class="cl">  Type    Reason     Age   From                                          Message
</span></span><span class="line"><span class="cl">  ----    ------     ----  ----                                          -------
</span></span><span class="line"><span class="cl">  Normal  Scheduled  54s   default-scheduler                             Successfully assigned default/test-start to tj1-staging-k8s-slave95-202008.kscn
</span></span><span class="line"><span class="cl">  Normal  Pulling    53s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Pulling image <span class="s2">&#34;busybox&#34;</span>
</span></span><span class="line"><span class="cl">  Normal  Pulled     44s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Successfully pulled image <span class="s2">&#34;busybox&#34;</span>
</span></span><span class="line"><span class="cl">  Normal  Created    44s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Created container sidecar
</span></span><span class="line"><span class="cl">  Normal  Started    44s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Started container sidecar
</span></span><span class="line"><span class="cl">  Normal  Pulling    23s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Pulling image <span class="s2">&#34;busybox&#34;</span>
</span></span><span class="line"><span class="cl">  Normal  Pulled     19s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Successfully pulled image <span class="s2">&#34;busybox&#34;</span>
</span></span><span class="line"><span class="cl">  Normal  Created    18s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Created container main
</span></span><span class="line"><span class="cl">  Normal  Started    18s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Started container main
</span></span></code></pre></div><p>此方案可能存在的缺点：</p>
<ol>
<li>如果sidecar启动失败或者hook失败，其他容器会立即启动</li>
</ol>
<h2 id="退出顺序" class="headerLink">
    <a href="#%e9%80%80%e5%87%ba%e9%a1%ba%e5%ba%8f" class="header-mark"></a>退出顺序</h2><p>容器启动顺序比较好解决，退出顺序则是按照相反的顺序，业务容器先退出，之后sidecar再退出。</p>
<p>目前，在kubelet删除pod步骤如下;</p>
<ol>
<li>遍历容器，每个容器起一个goroutine删除</li>
<li>删除时，先执行pre stop hook，得到gracePeriod=DeletionGracePeriodSeconds-period(stophook)</li>
<li>再调用cri删除接口m.runtimeService.StopContainer(containerID.ID, gracePeriod)</li>
</ol>
<p>如果在sidecar的pre stop hook检测业务容器状态，那么可以延迟退出。</p>
<h3 id="测试-1" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95-1" class="header-mark"></a>测试</h3><p>业务容器main退出时，创建文件；sidecar通过post-stop检测到文件后，执行退出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-stop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sidecar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s2">&#34;/bin/sh&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s2">&#34;-c&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      trap &#34;touch /lifecycle/sidecar-terminated&#34; 15
</span></span></span><span class="line"><span class="cl"><span class="sd">      until [ -f &#34;/lifecycle/sidecar-terminated&#34; ];do
</span></span></span><span class="line"><span class="cl"><span class="sd">        date
</span></span></span><span class="line"><span class="cl"><span class="sd">        sleep 1
</span></span></span><span class="line"><span class="cl"><span class="sd">      done
</span></span></span><span class="line"><span class="cl"><span class="sd">      sleep 5
</span></span></span><span class="line"><span class="cl"><span class="sd">      cat /lifecycle/main-terminated
</span></span></span><span class="line"><span class="cl"><span class="sd">      t=$(date)
</span></span></span><span class="line"><span class="cl"><span class="sd">      echo &#34;sidecar exit at $t&#34;</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lifecycle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">preStop</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="s2">&#34;/bin/sh&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="s2">&#34;-c&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            until [ -f &#34;/lifecycle/main-terminated&#34; ];do
</span></span></span><span class="line"><span class="cl"><span class="sd">              sleep 1
</span></span></span><span class="line"><span class="cl"><span class="sd">            done
</span></span></span><span class="line"><span class="cl"><span class="sd">            t=$(date)
</span></span></span><span class="line"><span class="cl"><span class="sd">            echo &#34;main exit at $t&#34; &gt; /lifecycle/main-terminated</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s2">&#34;/bin/sh&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s2">&#34;-c&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      trap &#34;touch /lifecycle/main-terminated&#34; 15
</span></span></span><span class="line"><span class="cl"><span class="sd">      until [ -f &#34;/lifecycle/main-terminated&#34; ];do
</span></span></span><span class="line"><span class="cl"><span class="sd">        date
</span></span></span><span class="line"><span class="cl"><span class="sd">        sleep 1
</span></span></span><span class="line"><span class="cl"><span class="sd">      done</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">emptyDir</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></div><p>在日志中看到，main容器先结束，sidecar检测到main-terminated文件后，执行完post-stop-hook，sidecar主进程开始退出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl  logs -f test-stop main
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">Tue Sep  <span class="m">8</span> 03:14:20 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl">Tue Sep  <span class="m">8</span> 03:14:21 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl">Tue Sep  <span class="m">8</span> 03:14:22 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ kubectl  logs -f test-stop sidecar
</span></span><span class="line"><span class="cl">Tue Sep  <span class="m">8</span> 03:14:22 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl">Tue Sep  <span class="m">8</span> 03:14:23 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl"><span class="c1"># post stop hook 检测到main容器退出，记录日志</span>
</span></span><span class="line"><span class="cl">main <span class="nb">exit</span> at Tue Sep  <span class="m">8</span> 03:14:23 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl"><span class="c1"># sidecar主进程退出</span>
</span></span><span class="line"><span class="cl">sidecar <span class="nb">exit</span> at Tue Sep  <span class="m">8</span> 03:14:29 UTC <span class="m">2020</span>
</span></span></code></pre></div><p>通过测试，使用postStopHook可以达到sidecar延迟退出的目的，但这种方式也有一些缺点</p>
<ol>
<li>配置复杂，多个sidecar都需要配置postStop监听业务容器状态</li>
<li>业务容器需要有可观察性（提供特定形式的健康检测）</li>
<li>poststop执行异常，会等到最大优雅退出时间（默认30s）后才终止</li>
</ol>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>目前对于sidecar生命周期的支持方案对比如下：</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>启动顺序</th>
<th>退出顺序</th>
<th>job sidecar</th>
<th>是否需要用户修改代码</th>
<th>是否需要修改k8s代码</th>
<th>缺点</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户控制</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
<td>需要</td>
<td>不需要</td>
<td>需要用户更改启动脚本;退出支持难度大，需要同时修改业务容器与sidecar启动脚本；大部分情况不支持</td>
<td>启动时需要检测sidecar服务状态</td>
</tr>
<tr>
<td>Lifecycle Hooks</td>
<td>支持</td>
<td>支持</td>
<td>不支持</td>
<td>不需要</td>
<td>不需要</td>
<td>配置hook复杂度高;在hook执行异常情况下不能确保顺序</td>
<td></td>
</tr>
<tr>
<td>富容器</td>
<td>支持</td>
<td>部分支持</td>
<td>部分支持</td>
<td>不需要</td>
<td>需要（更改镜像或启动命令）</td>
<td>所有功能集成在一个容器中，对于外部sidecar如istio envoy等，不可控;</td>
<td></td>
</tr>
<tr>
<td>修改源码</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>不需要</td>
<td>需要</td>
<td>需要满足各种情况，实现难度较大</td>
<td>社区有计划支持</td>
</tr>
</tbody>
</table>
<p>在k8s提供此类功能前，目前没有完善的方案。Lifecycle Hooks不需要更改用户启动代码以及k8s相关代码，相对于其他方式不失为一种解决思路。</p>
]]></description>
</item><item>
    <title>开启shareProcessNamespace后容器异常</title>
    <link>https://qingwave.github.io/cotainer-init/</link>
    <pubDate>Tue, 28 Jul 2020 17:35:49 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/cotainer-init/</guid>
    <description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>目前k8s不支持容器启动顺序，部分业务通过开启<code>shareProcessNamespace</code>监控某些进程状态。当开启共享pid后，有用户反馈某个容器主进程退出，但是容器并没有重启，执行<code>exec</code>会卡住，现象参考<a href="3" rel="">issue</a></p>
<h2 id="复现" class="headerLink">
    <a href="#%e5%a4%8d%e7%8e%b0" class="header-mark"></a>复现</h2><ol>
<li>创建deployment</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">shareProcessNamespace</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span></code></pre></div><ol start="2">
<li>查看进程信息
由于开启了<code>shareProcessNamespace</code>, <code>pause</code>变为<code>pid 1</code>, <code>nginx daemon</code>pid为<code>6</code>, ppid为<code>containerd-shim</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看容器内进程</span>
</span></span><span class="line"><span class="cl">/ <span class="c1"># ps -efo &#34;pid,ppid,comm,args&#34;</span>
</span></span><span class="line"><span class="cl">PID   PPID  COMMAND          COMMAND
</span></span><span class="line"><span class="cl">    <span class="m">1</span>     <span class="m">0</span> pause            /pause
</span></span><span class="line"><span class="cl">    <span class="m">6</span>     <span class="m">0</span> nginx            nginx: master process nginx -g daemon off<span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="m">11</span>     <span class="m">6</span> nginx            nginx: worker process
</span></span><span class="line"><span class="cl">   <span class="m">12</span>     <span class="m">6</span> nginx            nginx: worker process
</span></span><span class="line"><span class="cl">   <span class="m">13</span>     <span class="m">6</span> nginx            nginx: worker process
</span></span><span class="line"><span class="cl">   <span class="m">14</span>     <span class="m">6</span> nginx            nginx: worker process
</span></span><span class="line"><span class="cl">   <span class="m">15</span>     <span class="m">0</span> sh               sh
</span></span><span class="line"><span class="cl">   <span class="m">47</span>    <span class="m">15</span> ps               ps -efo pid,ppid,comm,args
</span></span></code></pre></div><ol start="3">
<li>删除主进程
子进程被<code>pid 1</code>回收, 有时也会被<code>containerd-shim</code>回收</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/ <span class="c1"># kill -9 6</span>
</span></span><span class="line"><span class="cl">/ <span class="c1"># </span>
</span></span><span class="line"><span class="cl">/ <span class="c1"># ps -efo &#34;pid,ppid,comm,args&#34;</span>
</span></span><span class="line"><span class="cl">PID   PPID  COMMAND          COMMAND
</span></span><span class="line"><span class="cl">    <span class="m">1</span>     <span class="m">0</span> pause            /pause
</span></span><span class="line"><span class="cl">   <span class="m">11</span>     <span class="m">1</span> nginx            nginx: worker process
</span></span><span class="line"><span class="cl">   <span class="m">12</span>     <span class="m">1</span> nginx            nginx: worker process
</span></span><span class="line"><span class="cl">   <span class="m">13</span>     <span class="m">1</span> nginx            nginx: worker process
</span></span><span class="line"><span class="cl">   <span class="m">14</span>     <span class="m">1</span> nginx            nginx: worker process
</span></span><span class="line"><span class="cl">   <span class="m">15</span>     <span class="m">0</span> sh               sh
</span></span><span class="line"><span class="cl">   <span class="m">48</span>    <span class="m">15</span> ps               ps -efo pid,ppid,comm,args
</span></span></code></pre></div><ol start="4">
<li>docker hang
此时对此容器执行docker命令(<code>inspect, logs, exec</code>)将卡住， 同样通过<code>kubectl</code>执行会超时。</li>
</ol>
<h2 id="分析" class="headerLink">
    <a href="#%e5%88%86%e6%9e%90" class="header-mark"></a>分析</h2><p>在未开启<code>shareProcessNamespace</code>的容器中，主进程退出<code>pid 1</code>, 此pid namespace销毁，系统会<code>kill</code>其下的所有进程。开启后，<code>pid 1</code>为<code>pause</code>进程，容器主进程退出，由于共享pid namespace，其他进程没有退出变成孤儿进程。此时调用docker相关接口去操作容器，docker首先去找主进程，但主进程已经不存在了，导致异常(待确认)。</p>
<p>清理掉这些孤儿进程容器便会正常退出，可以<code>kill</code>掉这些进程或者<code>kill</code>pause进程，即可恢复。</p>
<h2 id="方案" class="headerLink">
    <a href="#%e6%96%b9%e6%a1%88" class="header-mark"></a>方案</h2><p>有没有优雅的方式解决此种问题，如果主进程退出子进程也一起退出便符合预期，这就需要进程管理工具来实现，在宿主机中有<code>systemd</code>、<code>god</code>，容器中也有类似的工具即<code>init进程</code>(传递信息，回收子进程)，常见的有</p>
<ol>
<li><code>docker init</code>, docker自带的init进程(即<code>tini</code>)</li>
<li><a href="https://github.com/krallin/tini" target="_blank" rel="noopener noreffer"><code>tini</code></a>, 可回收孤儿进程/僵尸进程，<code>kill</code>进程组等</li>
<li><a href="https://github.com/Yelp/dumb-init" target="_blank" rel="noopener noreffer"><code>dumb-init</code></a>, 可管理进程，重写信号等</li>
</ol>
<p>经过测试，<code>tini</code>进程只能回收前台程序，对于后台程序则无能为力(例如<code>nohup</code>, <code>&amp;</code>启动的程序)，<code>dumb-init</code>在主进程退出时，会传递信号给子进程，符合预期。</p>
<p>开启<code>dumb-init</code>进程的<code>dockerfile</code>如下，<code>tini</code>也类似</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> nginx:alpine</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># tini</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># RUN apk add --no-cache tini</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># ENTRYPOINT [&#34;/sbin/tini&#34;, &#34;-s&#34;, &#34;-g&#34;, &#34;--&#34;]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># dumb-init</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> wget -O /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_amd64<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> chmod +x /usr/bin/dumb-init<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;/usr/bin/dumb-init&#34;</span><span class="p">,</span> <span class="s2">&#34;-v&#34;</span><span class="p">,</span> <span class="s2">&#34;--&#34;</span><span class="p">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;nginx&#34;</span><span class="p">,</span> <span class="s2">&#34;-g&#34;</span><span class="p">,</span> <span class="s2">&#34;daemon off;&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></div><p>init方式对于此问题是一种临时的解决方案，需要docker从根本上解决此种情况。容器推荐单进程运行，但某些情况必须要运行多进程，如果不想处理处理传递回收进程等，可以通过<code>init</code>进程，无需更改代码即可实现。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/Yelp/dumb-init" target="_blank" rel="noopener noreffer">https://github.com/Yelp/dumb-init</a></li>
<li><a href="https://github.com/krallin/tini" target="_blank" rel="noopener noreffer">https://github.com/krallin/tini</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/92214" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/issues/92214</a></li>
</ul>]]></description>
</item><item>
    <title>Prometheus最佳实践-聚合函数</title>
    <link>https://qingwave.github.io/prometheus-best-practice-operation/</link>
    <pubDate>Thu, 16 Jul 2020 15:28:39 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/prometheus-best-practice-operation/</guid>
    <description><![CDATA[<h2 id="rate" class="headerLink">
    <a href="#rate" class="header-mark"></a>rate</h2><p>prometheus中<code>rate</code>只能用于<code>counter</code>类型，对于需要聚合的数据需要先<code>rate</code>再<code>sum</code>，而不是<code>rate(sum)</code></p>
<h2 id="数据准确性" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e5%87%86%e7%a1%ae%e6%80%a7" class="header-mark"></a>数据准确性</h2><p><code>rate/increase/delta</code>等操作对于原始值进行了外推（类似线性插件），得到的不是准确值</p>
<p>如<code>rate(http_requests_total[2m])</code>指两分钟内每秒平均请求量，通过<code>2m</code>内首尾两个数据外推得到差值，比120s得到；
同理<code>increase(http_requests_total[2m])</code>指的不是首尾两个值的增长量，而是外推后计算出<code>2m</code>内的增长量。</p>
<h2 id="absent" class="headerLink">
    <a href="#absent" class="header-mark"></a>absent</h2><p>通常报警中，我们需要对某个对象是不是有数据进行监控（即<code>nodata</code>监控），<code>absent</code>用来验证指标是不是有数据很有用</p>
<h2 id="predict_linear" class="headerLink">
    <a href="#predict_linear" class="header-mark"></a>predict_linear</h2><p>线性回归预测，适合线性数据的预测，如预测etcd的未来4小时文件描述符使用量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">predict_linear(cluster:etcd:fd_utilization[1h], 3600 * 4)
</span></span></code></pre></div><h2 id="quantile_over_time" class="headerLink">
    <a href="#quantile_over_time" class="header-mark"></a>quantile_over_time</h2><p>一段时间内统计分位数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">quantile_over_time(0.9, http_requests_total[1d]) # 一天内请求量的90分位
</span></span></code></pre></div><h2 id="bool" class="headerLink">
    <a href="#bool" class="header-mark"></a>bool</h2><p>某些情况的需要比较两个标量（通常用来报警），可以使用bool</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">http_requests_total &gt; bool 100 
</span></span></code></pre></div>]]></description>
</item><item>
    <title>k8s如何优雅升级应用</title>
    <link>https://qingwave.github.io/k8s-graceful-update-app/</link>
    <pubDate>Fri, 19 Jun 2020 18:28:50 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-graceful-update-app/</guid>
    <description><![CDATA[<p>在k8s中通常用户通过<code>ingress</code>接入流量，转发到后端实例(<code>ingress → pod</code>)，在后端应用更新过程中，<code>ingress</code>是否能做到优雅升级，本文将通过分析升级流程与实验验证，说明在k8s中如何实现优化升级。</p>
<h2 id="ingress原理" class="headerLink">
    <a href="#ingress%e5%8e%9f%e7%90%86" class="header-mark"></a>Ingress原理</h2><p>用户创建ingress资源后，<code>ingress-nginx</code>通过<code>service</code>获取到对应的<code>endpoint</code>，监听到<code>endpoint</code>变化后将动态更新<code>upstream</code>。</p>
<p><code>endpoint</code>每次变化后会通过<code>selector</code>匹配的<code>pod</code>列表中<code>ready pod</code>（不包括待删除的<code>pod</code>, 及<code>DeletionTimestamp</code>不为空）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pod <span class="nv">ready</span> <span class="o">=</span> 所有container ready<span class="o">(</span>启动成功, 健康检查通过<span class="o">)</span> + 所有rediness gateway执行成功
</span></span></code></pre></div><p>那么<code>endpoint</code>在什么状况下会发生变化：</p>
<ul>
<li>service变化（一般不会）</li>
<li>扩缩容</li>
<li>升级</li>
<li>删除pod</li>
</ul>
<p>不管是什么操作，可归结于启动、删除、退出</p>
<ul>
<li><strong>启动</strong>，只要确保<code>pod ready</code>时能服务能正常接受流量，不会影响影响服务</li>
<li><strong>退出</strong>, 如果是应用异常退出，不能处理已接受的流量，此种状况是应用本身行为，不在讨论范围</li>
<li><strong>删除</strong>, 由于k8s所有组件都采用监听机制，无法保证<code>pod</code>删除时<code>ingress-nginx</code>的后端已经更新</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 大约在2s内</span>
</span></span><span class="line"><span class="cl">ingress-nginx 生效时间 <span class="o">=</span> endpoint 生效时间 + upstream更新时间
</span></span></code></pre></div><p>如果要保证pod删除时不丢流量，需要做到</p>
<ul>
<li>已接受的请求需要处理完，可监听TERM信号，处理完再退出， 可参考https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods</li>
<li>删除时不接受新的请求，这部分无法保证，只能保证#1</li>
</ul>
<h2 id="ingress-nginx-重试机制" class="headerLink">
    <a href="#ingress-nginx-%e9%87%8d%e8%af%95%e6%9c%ba%e5%88%b6" class="header-mark"></a>ingress-nginx 重试机制</h2><p>ingress-nginx默认开启了proxy_next_upstream，配置如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># In case of errors try the next upstream server before returning an error</span>
</span></span><span class="line"><span class="cl">proxy_next_upstream error timeout<span class="p">;</span>
</span></span><span class="line"><span class="cl">proxy_next_upstream_timeout 0<span class="p">;</span>
</span></span><span class="line"><span class="cl">proxy_next_upstream_tries 3<span class="p">;</span>
</span></span></code></pre></div><p>如果一次请求中，<code>upstream server</code> 出错或超时将通过rr算法重试下一个server，最多尝试三次。如果后端大于三个实例，一个实例异常不会影响服务。</p>
<h2 id="升级策略" class="headerLink">
    <a href="#%e5%8d%87%e7%ba%a7%e7%ad%96%e7%95%a5" class="header-mark"></a>升级策略</h2><p>对于<code>Deployment</code>有两种升级策略， <code>Recreate</code>与<code>RollingUpdate</code></p>
<ul>
<li><strong>Recreate</strong>, 先将旧版缩到0再将新版扩到期望值，不建议使用</li>
<li><strong>RollingUpdate</strong>，默认策略，滚动更新</li>
</ul>
<p>在滚动升级时主要依据<code>maxSurge</code>与<code>maxUnavailable</code>对新旧版本进行扩缩</p>
<ul>
<li><strong>maxSurge</strong>， 升级中最多有多少pod超过期望值</li>
<li><strong>maxUnavailable</strong>， 此值用来计算升级中最小可用的实例数，最大不可用的实例数表示不准确</li>
</ul>
<p>举个例子，比如10个副本的Deployment， 采用默认值<code>maxSurge</code>与<code>maxUnavaiable</code>都为25%</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">// 向上取整为 <span class="m">3</span> 
</span></span><span class="line"><span class="cl"><span class="nv">maxSurge</span> <span class="o">=</span> replicas * deployment.spec.strategy.rollingUpdate.maxSurge<span class="o">(</span>25%<span class="o">)=</span> 2.5
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">// 向下取整为 <span class="m">2</span> 
</span></span><span class="line"><span class="cl"><span class="nv">maxUnavailable</span> <span class="o">=</span> replicas * deployment.spec.strategy.rollingUpdate.maxUnavailable<span class="o">(</span>25%<span class="o">)=</span> 2.5
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="nv">maxAvailable</span> <span class="o">=</span> replicas<span class="o">(</span>10<span class="o">)</span> + MaxSurge（3） <span class="o">=</span> <span class="m">13</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">minAvailable :<span class="o">=</span> *<span class="o">(</span>deployment.Spec.Replicas<span class="o">)</span>（10） - maxUnavailable（2）<span class="o">=</span> <span class="m">8</span>
</span></span></code></pre></div><p>在升级过程中，首先创建 newRS，然后为其设定 replicas，此时计算出 replicas 结果为 3。等到下一个 syncLoop 时，所有 rs 的 replicas 已经达到最大值 10 + 3 = 13，此时需要 scale down oldRSs 了，scale down 的数量是通过以下公式得到的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">// <span class="nv">13</span> <span class="o">=</span> <span class="m">10</span> + <span class="m">3</span> 
</span></span><span class="line"><span class="cl">allPodsCount :<span class="o">=</span> newRS<span class="o">(</span>10<span class="o">)</span> + oldRS<span class="o">(</span>3<span class="o">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">// ??? 
</span></span><span class="line"><span class="cl">newRSUnavailablePodCount :<span class="o">=</span> *<span class="o">(</span>newRS.Spec.Replicas<span class="o">)</span> - newRS.Status.AvailableReplicas
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">// <span class="m">13</span> - <span class="m">8</span> - ??? 
</span></span><span class="line"><span class="cl">maxScaledDown :<span class="o">=</span> allPodsCount - minAvailable - newRSUnavailablePodCount
</span></span><span class="line"><span class="cl">newRSUnavailablePodCount 此时不确定，但是值在 <span class="o">[</span>0,3<span class="o">]</span> 中，此时假设 newRS 的三个 pod 还处于 containerCreating 状态，则newRSUnavailablePodCount 为 3，根据以上公式计算所知 maxScaledDown 为 2。如果有个新版本pod已经ready，则maxScaledDown 为 4。
</span></span></code></pre></div><p> 
特殊情况，当只有一个副本，<code>maxSurge</code>与<code>maxUnavaiable</code>都为1时，按照以上公式，先扩容1个新版pod，再缩一个旧版的，如果旧版已经删除了而新版还没有起来可能会丟流量，可以将<code>maxUnavaiable</code>设置为0可避免以上情况。</p>
<h2 id="实验验证" class="headerLink">
    <a href="#%e5%ae%9e%e9%aa%8c%e9%aa%8c%e8%af%81" class="header-mark"></a>实验验证</h2><p>滚动升级终于也是通过扩缩新旧版本来实现的，我们只需要分析扩缩容过程中会不会丢流量即可。</p>
<h3 id="实验环境" class="headerLink">
    <a href="#%e5%ae%9e%e9%aa%8c%e7%8e%af%e5%a2%83" class="header-mark"></a>实验环境</h3><p>image: nginx
tool:  <code>wrk -c 2 -d 120 -H &quot;Connection:Close&quot; http://my.nginx.svc</code></p>
<h3 id="扩容" class="headerLink">
    <a href="#%e6%89%a9%e5%ae%b9" class="header-mark"></a>扩容</h3><ol>
<li>从1扩到10个</li>
</ol>
<p>不丢流量，nginx启动很快不需要额外的初始化工作，正常情况需要配置健康检查</p>
<h3 id="缩容" class="headerLink">
    <a href="#%e7%bc%a9%e5%ae%b9" class="header-mark"></a>缩容</h3><p><strong>1) 10 → 1</strong></p>
<p>缩容时会有502错误</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Running 2m <span class="nb">test</span> @ http://my.nginx.svc
</span></span><span class="line"><span class="cl">  <span class="m">2</span> threads and <span class="m">2</span> connections
</span></span><span class="line"><span class="cl">  Thread Stats   Avg      Stdev     Max   +/- Stdev
</span></span><span class="line"><span class="cl">    Latency    11.73ms   27.02ms 229.17ms   95.14%
</span></span><span class="line"><span class="cl">    Req/Sec   162.91     45.77   232.00     74.13%
</span></span><span class="line"><span class="cl">  <span class="m">8969</span> requests in 28.24s, 2.40MB <span class="nb">read</span>
</span></span><span class="line"><span class="cl">  Non-2xx or 3xx responses: <span class="m">366</span>
</span></span><span class="line"><span class="cl">Requests/sec:    317.62
</span></span><span class="line"><span class="cl">Transfer/sec:     86.93KB
</span></span></code></pre></div><p>查看ingress日志</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2020/06/19 08:12:28 <span class="o">[</span>error<span class="o">]</span> 9533#9533: *197916788 connect<span class="o">()</span> failed <span class="o">(</span>111: Connection refused<span class="o">)</span> <span class="k">while</span> connecting to upstream, client: 10.232.41.102, server: my.nginx.svc, request: <span class="s2">&#34;GET / HTTP/1.1&#34;</span>, upstream: <span class="s2">&#34;http://10.126.110.3:80/&#34;</span>, host: <span class="s2">&#34;my.nginx.svc&#34;</span>
</span></span><span class="line"><span class="cl">2020/06/19 08:12:33 <span class="o">[</span>error<span class="o">]</span> 8935#8935: *197916707 upstream timed out <span class="o">(</span>110: Operation timed out<span class="o">)</span> <span class="k">while</span> connecting to upstream, client: 10.232.41.102, server: my.nginx.svc, request: <span class="s2">&#34;GET / HTTP/1.1&#34;</span>, upstream: <span class="s2">&#34;http://10.126.69.136:80/&#34;</span>, host: <span class="s2">&#34;my.nginx.svc&#34;</span>
</span></span><span class="line"><span class="cl">2020/06/19 08:12:33 <span class="o">[</span>error<span class="o">]</span> 9533#9533: *197916788 upstream timed out <span class="o">(</span>110: Operation timed out<span class="o">)</span> <span class="k">while</span> connecting to upstream, client: 10.232.41.102, server: my.nginx.svc, request: <span class="s2">&#34;GET / HTTP/1.1&#34;</span>, upstream: <span class="s2">&#34;http://10.126.69.136:80/&#34;</span>, host: <span class="s2">&#34;my.nginx.svc
</span></span></span><span class="line"><span class="cl"><span class="s2">10.232.41.102 - - [18/Jun/2020:09:14:35 +0000] &#34;</span>GET / HTTP/1.1<span class="s2">&#34; 502 157 &#34;</span>-<span class="s2">&#34; &#34;</span>-<span class="s2">&#34; 38 0.001 [default-my-nginx-80] [] 10.46.12.80:80, 10.46.12.79:80, 10.46.12.80:80 0, 0, 0 0.000, 0.000, 0.000 502, 502, 502 5cfc063dbe7daf1db953a0e16891f100
</span></span></span></code></pre></div><p><strong>2) 4→1</strong></p>
<p>会丟流量</p>
<p><strong>3）3→1</strong></p>
<p>测试多次，偶现过丢流量的情况，这与ingress重试算法有关系</p>
<p><strong>4） 10→1</strong>, 忽略term信号, 不丢流量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Running 2m <span class="nb">test</span> @ http://my.nginx.svc
</span></span><span class="line"><span class="cl">  <span class="m">2</span> threads and <span class="m">2</span> connections
</span></span><span class="line"><span class="cl">Thread Stats   Avg      Stdev     Max   +/- Stdev
</span></span><span class="line"><span class="cl">    Latency    12.12ms   16.66ms 214.89ms   88.39%
</span></span><span class="line"><span class="cl">    Req/Sec   129.75     74.05   250.00     62.35%
</span></span><span class="line"><span class="cl">  <span class="m">8811</span> requests in 34.24s, 2.35MB <span class="nb">read</span>
</span></span><span class="line"><span class="cl">Requests/sec:    257.35
</span></span><span class="line"><span class="cl">Transfer/sec:     70.41KB
</span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>通过分析及实验，在pod启动时可配置健康检查避免请求异常；同一时刻大于2个pod终止可能会丢失流量，通过监听退出信号可避免此种情况。综上，应用的优化升级需要做到以下几点：</p>
<ul>
<li>健康检测，<code>pod ready</code>时能够正常接受流量</li>
<li>优雅停止，保证处理完请求再退出，在这段时间内实例ip可从ingress后端摘除</li>
<li>滚动升级配置，若只有1个实例需设置maxsurge=0，更建议副本数设置多个</li>
</ul>]]></description>
</item><item>
    <title>Ingress获取真实IP</title>
    <link>https://qingwave.github.io/ingress-real-ip/</link>
    <pubDate>Fri, 05 Jun 2020 14:40:08 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/ingress-real-ip/</guid>
    <description><![CDATA[<p>一般情况下，经过ingress的请求会携带header<code>X-Real-IP</code>，用户可根据header解析出真实访问IP。</p>
<p>特殊情况，用户请求可能经过多个nginx才达到ingress, 通过上述方法得到的并不是用户的真实IP。</p>
<blockquote>
<p>request -&gt; nginx -&gt; &hellip; -&gt; ingress-nginx -&gt; backend</p>
</blockquote>
<h2 id="方案1-use-forwarded-headers" class="headerLink">
    <a href="#%e6%96%b9%e6%a1%881-use-forwarded-headers" class="header-mark"></a>方案1 use-forwarded-headers</h2><p>nginx-ingress官方的建议是开启<a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#forwarded-for-header" target="_blank" rel="noopener noreffer">use-forwarded-headers</a>, 配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-configuration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">compute-full-forwarded-for</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">use-forwarded-headers</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span></code></pre></div><h2 id="方案2-real_ip_header" class="headerLink">
    <a href="#%e6%96%b9%e6%a1%882-real_ip_header" class="header-mark"></a>方案2 real_ip_header</h2><p>这种方式确实可以起作用，但是有用户反馈开启后访问ingres后端服务一直报<code>308</code>，检查了ingress的代码开启<code>use-forwarded-headers</code>后会同时开启<code>ssl-redirect</code>导致308。</p>
<p>那么我们只需要开启nginx配置中的相关real-ip的配置，如下在<code>http-snippet</code>添加<code>real_ip_header X-Forwarded-For;</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-configuration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">http-snippet</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    real_ip_header X-Forwarded-For;</span><span class="w">    
</span></span></span></code></pre></div><h2 id="golang中获取真实ip" class="headerLink">
    <a href="#golang%e4%b8%ad%e8%8e%b7%e5%8f%96%e7%9c%9f%e5%ae%9eip" class="header-mark"></a>golang中获取真实ip</h2><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">RemoteIP</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ingress 行为，将真实ip放到header `X-Original-Forwarded-For`, 普通nginx可去掉此条
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ip</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;X-Original-Forwarded-For&#34;</span><span class="p">),</span> <span class="s">&#34;,&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ip</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ip</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ip</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;X-Forwarded-For&#34;</span><span class="p">),</span> <span class="s">&#34;,&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ip</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ip</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ip</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;X-Real-Ip&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ip</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ip</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ip</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">SplitHostPort</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">RemoteAddr</span><span class="p">));</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ip</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="注意" class="headerLink">
    <a href="#%e6%b3%a8%e6%84%8f" class="header-mark"></a>注意</h2><p>nginx-ingress configmap中的配置会是全局生效的，上线前需要严格测试。</p>
]]></description>
</item><item>
    <title>Ingress Header Too Large</title>
    <link>https://qingwave.github.io/ingress-header-too-large/</link>
    <pubDate>Fri, 05 Jun 2020 14:17:08 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/ingress-header-too-large/</guid>
    <description><![CDATA[<p>线上遇到多次由ingress header过大引起的请求失败, 可能返回502/400，解决方案如下。</p>
<h2 id="502--too-big-header" class="headerLink">
    <a href="#502--too-big-header" class="header-mark"></a>502 – too big header</h2><p>502错误一般是后端服务不可用，但这里是nginx-ingress返回的，在nginx-ingress可看到如下日志：
<code>upstream sent too big header while reading response header from upstream, client...</code></p>
<p>需要在ingress配置如下参数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">extensions/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/proxy-buffer-size</span><span class="p">:</span><span class="w"> </span><span class="l">128k</span><span class="w"> </span><span class="c">#根据实际情况配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/proxy-buffering</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;on&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/server-snippet</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      large_client_header_buffers 16 128K;
</span></span></span><span class="line"><span class="cl"><span class="sd">      client_header_buffer_size 128k;</span><span class="w">      
</span></span></span></code></pre></div><h2 id="431400--too-big-header" class="headerLink">
    <a href="#431400--too-big-header" class="header-mark"></a>431/400 – too big header</h2><p>http header过大也有可能返回400/431, 可按照上述调整，如果还是有问题需要检查后端服务的header设置，比如golang http header默认是<code>1M</code>;
springboot应用需要在<code>application.properties</code>加上<code>server.max-http-header-size=32KB</code>等</p>
<h2 id="413--too-large-body" class="headerLink">
    <a href="#413--too-large-body" class="header-mark"></a>413 – too large body</h2><p>如果返回413，则超过了body size的限制（默认<code>1M</code>）, 可在ingress annotation添加
<code>nginx.ingress.kubernetes.io/proxy-body-size: 8m</code></p>
]]></description>
</item><item>
    <title>ingress nginx benchmark</title>
    <link>https://qingwave.github.io/ingress-benchmark/</link>
    <pubDate>Thu, 21 May 2020 19:16:04 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/ingress-benchmark/</guid>
    <description><![CDATA[<p>Ingress是目前Kubernetes集群流量接入的重要入口，了解其性能指标有助于用户选用合适的网络方案。</p>
<h2 id="测试方案" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95%e6%96%b9%e6%a1%88" class="header-mark"></a>测试方案</h2><p>通过wrk压测后端nginx服务，对比ingress-nginx, 原生nginx，以及直连后端性能的差异，如下图:


</p>
<ul>
<li>方案1，经过ingress</li>
<li>方案2，经过nginx</li>
<li>方案3，直连ip</li>
</ul>
<h3 id="硬件环境" class="headerLink">
    <a href="#%e7%a1%ac%e4%bb%b6%e7%8e%af%e5%a2%83" class="header-mark"></a>硬件环境</h3><ul>
<li>CPU： 2x  Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz, 32 cores</li>
<li>Network： 10-Gigabit</li>
<li>Memory： 128 GB</li>
</ul>
<h3 id="测试工具" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95%e5%b7%a5%e5%85%b7" class="header-mark"></a>测试工具</h3><ul>
<li>wrk, 4.1.0, 在k8s master测试，减少网络影响</li>
<li>ingress-nginx, 0.30.0, <a href="https://github.com/kubernetes/ingress-nginx" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/ingress-nginx</a></li>
<li>nginx, 1.13.5</li>
<li>k8s, v1.14.9</li>
<li>centos, 7.3.1611(Linux 4.9.2)</li>
</ul>
<h3 id="测试方法" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95%e6%96%b9%e6%b3%95" class="header-mark"></a>测试方法</h3><p>ingress-nginx主要工作是转发请求到后端pod, 我们着重对其RPS（每秒请求量）进行测试</p>
<p>通过以下命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">wrk -t4 -c1000 -d120s --latency http://my.nginx.svc/1kb.bin</span><span class="w">
</span></span></span></code></pre></div><h2 id="测试结果" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95%e7%bb%93%e6%9e%9c" class="header-mark"></a>测试结果</h2><h3 id="不同cpu下的性能" class="headerLink">
    <a href="#%e4%b8%8d%e5%90%8ccpu%e4%b8%8b%e7%9a%84%e6%80%a7%e8%83%bd" class="header-mark"></a>不同cpu下的性能</h3><p>对比不同ingress-nginx启动不同worker数量的性能差异，以下测试ingress-nginx开启了keepalive等特性</p>
<table>
<thead>
<tr>
<th>CPU</th>
<th>RPS</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>5534</td>
</tr>
<tr>
<td>2</td>
<td>11203</td>
</tr>
<tr>
<td>4</td>
<td>22890</td>
</tr>
<tr>
<td>8</td>
<td>47025</td>
</tr>
<tr>
<td>16</td>
<td>93644</td>
</tr>
<tr>
<td>24</td>
<td>125990</td>
</tr>
<tr>
<td>32</td>
<td>153473</td>
</tr>
</tbody>
</table>
<p>

</p>
<p>如图所示，不同cpu下，ingress的rps与cpu成正比，cpu在16核之后增长趋势放缓。</p>
<h3 id="不同方案的性能对比" class="headerLink">
    <a href="#%e4%b8%8d%e5%90%8c%e6%96%b9%e6%a1%88%e7%9a%84%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94" class="header-mark"></a>不同方案的性能对比</h3><table>
<thead>
<tr>
<th>方案</th>
<th>RPS</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>ingress-nginx(原始)</td>
<td>69171</td>
<td></td>
</tr>
<tr>
<td>ingress-nginx(配置优化)</td>
<td>153473</td>
<td>调整worker，access-log, keepalive等</td>
</tr>
<tr>
<td>nginx</td>
<td>336769</td>
<td>开启keepalive, 关闭log</td>
</tr>
<tr>
<td>直连ip</td>
<td>340748</td>
<td>测试中的pod ip为真实ip</td>
</tr>
</tbody>
</table>
<p>通过实验可以看到，使用nginx代理和直连ip，rps相差不大；原始ingress-nginx rps很低，优化后rps提升一倍，但对比nginx还是有较大的性能差异。</p>
<h2 id="结论" class="headerLink">
    <a href="#%e7%bb%93%e8%ae%ba" class="header-mark"></a>结论</h2><p>默认ingress-nginx性能较差，配置优化后也只有15w RPS，对比原生nginx（33W) 差距较大。经过分析主要瓶颈在于ingress-nginx的lua过滤脚本，具体原因需要进一步分析。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ol>
<li><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#upstream-keepalive-connections" target="_blank" rel="noopener noreffer">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#upstream-keepalive-connections</a></li>
<li><a href="https://www.nginx.com/blog/testing-performance-nginx-ingress-controller-kubernetes/" target="_blank" rel="noopener noreffer">https://www.nginx.com/blog/testing-performance-nginx-ingress-controller-kubernetes/</a></li>
</ol>
<h2 id="配置文件" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>配置文件</h2><p>本测试所有配置见<a href="https://github.com/qingwave/ingress-nginx-benchmark" target="_blank" rel="noopener noreffer">qingwave/ingress-nginx-benchmark</a></p>]]></description>
</item><item>
    <title>可能是史上最全的Kubernetes证书解析</title>
    <link>https://qingwave.github.io/k8s-tls/</link>
    <pubDate>Sat, 25 Apr 2020 08:53:03 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-tls/</guid>
    <description><![CDATA[<p>为了避免广告法，题目还是加个可能吧。</p>
<p>想要安全就必须复杂起来，证书是少不了的。在Kubernetes中提供了非常丰富的证书类型，满足各种不同场景的需求，今天我们就来看一看Kubernetes中的证书。</p>
<h2 id="k8s证书分类" class="headerLink">
    <a href="#k8s%e8%af%81%e4%b9%a6%e5%88%86%e7%b1%bb" class="header-mark"></a>k8s证书分类</h2><p>在说证书之前，先想想作为集群的入口apiserver需要提供那些服务，与那些组件通信，通信的两方可能需要配置证书。
与apiserver通信的组件大体可以分为以下几类：</p>
<ul>
<li>client(kubectl，restapi等)：普通用户与apiserver之间的通信，对各类资源进行操作</li>
<li>kubelet，kubeproxy：master与node之间的通信</li>
<li>etcd：k8s的存储库</li>
<li>webhook：这里指apiserver提供的admission-webhook，在数据持久化前调用webhook</li>
<li>aggregation layer：扩展apiserver, 需要将自定义的api注册到k8s中，相比CRD性能更新</li>
<li>pod: 在pod中调用apiserver(一般调用为10.254.0.1:433)</li>
</ul>
<p>居然有这么多种，除了在pod中通过serviceacount认证（当然pod需要认证apiserver的证书），其他几种都需要配置证书。</p>
<p>其他集群内组件与apiserver通信的，kubelet/etcd/kube-proxy对应的也可以配置证书。</p>
<h2 id="apiserver证书" class="headerLink">
    <a href="#apiserver%e8%af%81%e4%b9%a6" class="header-mark"></a>apiserver证书</h2><p>简单列举下apiserver证书相关的启动参数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--cert-dir string                           The directory where the TLS certs are located. If --tls-cert-file and --tls-private-key-file are provided, this flag will be ignored. (default &#34;/var/run/kubernetes&#34;)
</span></span><span class="line"><span class="cl">--client-ca-file string                     If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.
</span></span><span class="line"><span class="cl">--etcd-certfile string                      SSL certification file used to secure etcd communication.
</span></span><span class="line"><span class="cl">--etcd-keyfile string                       SSL key file used to secure etcd communication.
</span></span><span class="line"><span class="cl">--kubelet-certificate-authority string      Path to a cert file for the certificate authority.
</span></span><span class="line"><span class="cl">--kubelet-client-certificate string         Path to a client cert file for TLS.
</span></span><span class="line"><span class="cl">--kubelet-client-key string                 Path to a client key file for TLS.
</span></span><span class="line"><span class="cl">--proxy-client-cert-file string             Client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins. It is expected that this cert includes a signature from the CA in the --requestheader-client-ca-file flag. That CA is published in the &#39;extension-apiserver-authentication&#39; configmap in the kube-system namespace. Components recieving calls from kube-aggregator should use that CA to perform their half of the mutual TLS verification.
</span></span><span class="line"><span class="cl">--proxy-client-key-file string              Private key for the client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins.
</span></span><span class="line"><span class="cl">--requestheader-allowed-names stringSlice   List of client certificate common names to allow to provide usernames in headers specified by --requestheader-username-headers. If empty, any client certificate validated by the authorities in --requestheader-client-ca-file is allowed.
</span></span><span class="line"><span class="cl">--requestheader-client-ca-file string       Root certificate bundle to use to verify client certificates on incoming requests before trusting usernames in headers specified by --requestheader-username-headers
</span></span><span class="line"><span class="cl">--service-account-key-file stringArray      File containing PEM-encoded x509 RSA or ECDSA private or public keys, used to verify ServiceAccount tokens. If unspecified, --tls-private-key-file is used. The specified file can contain multiple keys, and the flag can be specified multiple times with different files.
</span></span><span class="line"><span class="cl">--ssh-keyfile string                        If non-empty, use secure SSH proxy to the nodes, using this user keyfile
</span></span><span class="line"><span class="cl">--tls-ca-file string                        If set, this certificate authority will used for secure access from Admission Controllers. This must be a valid PEM-encoded CA bundle. Alternatively, the certificate authority can be appended to the certificate provided by --tls-cert-file.
</span></span><span class="line"><span class="cl">--tls-cert-file string                      File containing the default x509 Certificate for HTTPS. (CA cert, if any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to /var/run/kubernetes.
</span></span><span class="line"><span class="cl">--tls-private-key-file string               File containing the default x509 private key matching --tls-cert-file.
</span></span><span class="line"><span class="cl">--tls-sni-cert-key namedCertKey             A pair of x509 certificate and private key file paths, optionally suffixed with a list of domain patterns which are fully qualified domain names, possibly with prefixed wildcard segments. If no domain patterns are provided, the names of the certificate are extracted. Non-wildcard matches trump over wildcard matches, explicit domain patterns trump over extracted names. For multiple key/certificate pairs, use the --tls-sni-cert-key multiple times. Examples: &#34;example.crt,example.key&#34; or &#34;foo.crt,foo.key:*.foo.com,foo.com&#34;. (default [])
</span></span><span class="line"><span class="cl">--oidc-ca-file string                       If set, the OpenID server&#39;s certificate will be verified by one of the authorities in the oidc-ca-file, otherwise the host&#39;s root CA set will be used.
</span></span><span class="line"><span class="cl">--tls-sni-cert-key namedCertKey             A pair of x509 certificate and private key file paths, optionally suffixed with a list of domain patterns which are fully qualified domain names, possibly with prefixed wildcard segments. If no domain patterns are provided, the names of the certificate are extracted. Non-wildcard matches trump over wildcard matches, explicit domain patterns trump over extracted names. For multiple key/certificate pairs, use the --tls-sni-cert-key multiple times. Examples: &#34;example.crt,example.key&#34; or &#34;foo.crt,foo.key:*.foo.com,foo.com&#34;. (default [])
</span></span></code></pre></div><p>不要害怕，咱们一个个看。</p>
<h3 id="tls证书" class="headerLink">
    <a href="#tls%e8%af%81%e4%b9%a6" class="header-mark"></a>tls证书</h3><p>首先，apiserver本身是一个http服务器，需要tls证书</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--tls-cert-file string
</span></span><span class="line"><span class="cl">    File containing the default x509 Certificate for HTTPS. (CA cert, if any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory specified by --cert-dir.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--tls-private-key-file string
</span></span><span class="line"><span class="cl">    File containing the default x509 private key matching --tls-cert-file.
</span></span><span class="line"><span class="cl">其他client验证apiserver时可以通过签署这两个证书的CA，我们称为`tls-ca`
</span></span></code></pre></div><h3 id="client证书" class="headerLink">
    <a href="#client%e8%af%81%e4%b9%a6" class="header-mark"></a>client证书</h3><p>apiserver提供了tls证书，同样也需要验证client的配置，但是client太多了(kubectl,各种restapi调用的), 这些client需要统一用一个CA签发，我们称为<code>client-ca</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--client-ca-file string
</span></span><span class="line"><span class="cl">    If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.
</span></span></code></pre></div><p>需要注意的是，在apiserver认证中，通过<code>CN</code>和<code>O</code>来识别用户，开启RBAC的用户要配置<code>CN</code>和<code>O</code>做一些授权：</p>
<ul>
<li>CN：Common Name，kube-apiserver 从证书中提取作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</li>
<li>O：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)</li>
</ul>
<p>如kube-proxy的证书申请, User为<code>system:kube-proxy</code>, Group为<code>k8s</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;CN&#34;</span><span class="p">:</span> <span class="s2">&#34;system:kube-proxy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;hosts&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;algo&#34;</span><span class="p">:</span> <span class="s2">&#34;rsa&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">2048</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;names&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;C&#34;</span><span class="p">:</span> <span class="s2">&#34;CN&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;ST&#34;</span><span class="p">:</span> <span class="s2">&#34;BeiJing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;L&#34;</span><span class="p">:</span> <span class="s2">&#34;BeiJing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;O&#34;</span><span class="p">:</span> <span class="s2">&#34;k8s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;OU&#34;</span><span class="p">:</span> <span class="s2">&#34;System&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="requestheader证书" class="headerLink">
    <a href="#requestheader%e8%af%81%e4%b9%a6" class="header-mark"></a>requestheader证书</h3><p>apiserver可以使用HTTP请求头中的指定字段来进行认证，相关配置如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--requestheader-allowed-names stringSlice
</span></span><span class="line"><span class="cl">    List of client certificate common names to allow to provide usernames in headers specified by --requestheader-username-headers. If empty, any client certificate validated by the authorities in --requestheader-client-ca-file is allowed.
</span></span><span class="line"><span class="cl">--requestheader-client-ca-file string
</span></span><span class="line"><span class="cl">    Root certificate bundle to use to verify client certificates on incoming requests before trusting usernames in headers specified by --requestheader-username-headers. WARNING: generally do not depend on authorization being already done for incoming requests.
</span></span><span class="line"><span class="cl">--requestheader-extra-headers-prefix strings        
</span></span><span class="line"><span class="cl">    List of request header prefixes to inspect. X-Remote-Extra- is suggested.
</span></span><span class="line"><span class="cl">--requestheader-group-headers strings               
</span></span><span class="line"><span class="cl">    List of request headers to inspect for groups. X-Remote-Group is suggested.
</span></span><span class="line"><span class="cl">--requestheader-username-headers strings            
</span></span><span class="line"><span class="cl">    List of request headers to inspect for usernames. X-Remote-User is common.
</span></span></code></pre></div><p>收到请求时，apiserver会首先认证<code>requsetheader-ca</code>，验证成功并且<code>CN</code>在<code>requestheader-allowed-names</code>（默认全部需求）中，然后通过Http header中的<code>X-Remote-User, X-Remote-Group</code>去得到用户；如果匹配不成功回去验证<code>client-ca</code>。</p>
<p>如上，<code>requestheader</code>证书与<code>client-ca</code>不能是同一个。</p>
<h3 id="proxy证书" class="headerLink">
    <a href="#proxy%e8%af%81%e4%b9%a6" class="header-mark"></a>proxy证书</h3><p>k8s提供了丰富的扩展机制，CRD与[API Aggregation][https://kubernetes.io/zh/docs/tasks/access-kubernetes-api/configure-aggregation-layer/]。
对于API Aggregation(例如metrics-server提供了metrics.k8s.io api), apiserver接受到请求后经过一系列验证过滤，会将请求转发到扩展API，这里apisever作为代理服务器，需要配置配置证书。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--proxy-client-cert-file string             
</span></span><span class="line"><span class="cl">    Client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins. It is expected that this cert includes a signature from the CA in the --requestheader-client-ca-file flag. That CA is published in the &#39;extension-apiserver-authentication&#39; configmap in the kube-system namespace. Components recieving calls from kube-aggregator should use that CA to perform their half of the mutual TLS verification.
</span></span><span class="line"><span class="cl">--proxy-client-key-file string              
</span></span><span class="line"><span class="cl">    Private key for the client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins.
</span></span></code></pre></div><p>需要注意的是对证书需要通过<code>requestheader-ca</code>签发，扩展api会通过requestheader证书去验证，具体流程后面会写一篇，下图为官方提供的流程


</p>
<h3 id="kubelet证书" class="headerLink">
    <a href="#kubelet%e8%af%81%e4%b9%a6" class="header-mark"></a>kubelet证书</h3><p>对于kubelet，apiserver单独提供了证书配置选项，同时kubelet组件也提供了反向设置的相关选项:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># API Server
</span></span><span class="line"><span class="cl">--kubelet-certificate-authority string
</span></span><span class="line"><span class="cl">    Path to a cert file for the certificate authority.
</span></span><span class="line"><span class="cl">--kubelet-client-certificate string
</span></span><span class="line"><span class="cl">    Path to a client cert file for TLS.
</span></span><span class="line"><span class="cl">--kubelet-client-key string
</span></span><span class="line"><span class="cl">    Path to a client key file for TLS.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># kubelet
</span></span><span class="line"><span class="cl">--client-ca-file string
</span></span><span class="line"><span class="cl">    If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.
</span></span><span class="line"><span class="cl">--tls-cert-file string 
</span></span><span class="line"><span class="cl">    File containing x509 Certificate used for serving HTTPS (with intermediate certs, if any, concatenated after server cert). If --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory passed to --cert-dir.
</span></span><span class="line"><span class="cl">--tls-private-key-file string
</span></span><span class="line"><span class="cl">    File containing x509 private key matching --tls-cert-file.
</span></span></code></pre></div><p>kubelet也是即作为server也作为client, 需要提供tls证书和client-ca, 我们称这个CA为<code>kubelet-ca</code>, 可以是单独的CA。</p>
<h3 id="etcd证书" class="headerLink">
    <a href="#etcd%e8%af%81%e4%b9%a6" class="header-mark"></a>etcd证书</h3><p>这个也不用多说，用来连接etcd，由<code>etcd-ca</code>签发</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--etcd-certfile string                      SSL certification file used to secure etcd communication.
</span></span><span class="line"><span class="cl">--etcd-keyfile string                       SSL key file used to secure etcd communication.
</span></span></code></pre></div><h3 id="serviceaccount证书" class="headerLink">
    <a href="#serviceaccount%e8%af%81%e4%b9%a6" class="header-mark"></a>serviceaccount证书</h3><p>在k8s中，通过<code>JWT</code>认证<code>serviecaccount</code>，同样有两个证书配置:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># apiserver
</span></span><span class="line"><span class="cl">--service-account-key-file stringArray # 用于验证sa
</span></span><span class="line"><span class="cl">    File containing PEM-encoded x509 RSA or ECDSA private or public keys, used to verify ServiceAccount tokens. The specified file can contain multiple keys, and the flag can be specified multiple times with different files. If unspecified, --tls-private-key-file is used. Must be specified when --service-account-signing-key is provided
</span></span><span class="line"><span class="cl">--service-account-signing-key-file string
</span></span><span class="line"><span class="cl">    Path to the file that contains the current private key of the service account token issuer. The issuer will sign issued ID tokens with this private key. (Requires the &#39;TokenRequest&#39; feature gate.)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># controller-manager
</span></span><span class="line"><span class="cl">–service-account-private-key-file #用于签署sa
</span></span></code></pre></div><p>这两个配置描述了对<code>serviceaccount</code>进行签名验证时所使用的证书；可以是单独的生成，我们称为<code>sa-key</code>。</p>
<h2 id="其他证书" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96%e8%af%81%e4%b9%a6" class="header-mark"></a>其他证书</h2><p>其他还有<code>oidc</code>证书，用于OpenID认证；<code>ssh</code>证书，用来连接node，目前以及废弃。</p>
<p>etcd与kubelet证书上面已经提过了，需要双方都配置。</p>
<p>k8s中也支持证书申请，用户可以创建<code>CertificateSigningRequest</code>来申请证书，需要在controller-manager配置下面的证书，用于签发证书称为<code>sing-ca</code>，多用于webhook的证书配置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--cluster-signing-cert-file string          Filename containing a PEM-encoded X509 CA certificate used to issue cluster-scoped certificates (default &#34;/etc/kubernetes/ca/ca.pem&#34;)
</span></span><span class="line"><span class="cl">--cluster-signing-key-file string           Filename containing a PEM-encoded RSA or ECDSA private key used to sign cluster-scoped certificates (default &#34;/etc/kubernetes/ca/ca.key&#34;)
</span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>k8s提供了强大的功能，需要考虑到各个场景的安全问题，上面我们梳理了遍目前常用的证书</p>
<ul>
<li>tls-ca</li>
<li>client-ca</li>
<li>requestheader-ca</li>
<li>proxy-ca</li>
<li>kubelet-ca</li>
<li>etcd-ca</li>
<li>sa-key</li>
<li>sign-ca</li>
</ul>
<p>上面除了<code>proxy-ca</code>必须使用<code>requestheader-ca</code>签发，其他所有的都可以是单独的CA，可以根据安全性评估是使用一个CA还是多个CA，我们建议下面的CA尽量是独立的</p>
<ul>
<li>client-ca</li>
<li>requestheader-ca</li>
<li>etcd-ca</li>
<li>kubelet-ca</li>
<li>sign-ca</li>
</ul>
<p>终于理完了，可以起床啦。</p>
]]></description>
</item></channel>
</rss>
