<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>tool - 分类 - Qingwave</title>
        <link>https://qingwave.github.io/categories/tool/</link>
        <description>tool - 分类 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Fri, 12 Nov 2021 09:17:35 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/categories/tool/" rel="self" type="application/rss+xml" /><item>
    <title>Kubernetes调试利器Nsenter</title>
    <link>https://qingwave.github.io/k8s-debug-nsenter/</link>
    <pubDate>Fri, 12 Nov 2021 09:17:35 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-debug-nsenter/</guid>
    <description><![CDATA[<p>在k8s云环境中，我们需要在容器内抓包进行Debug, 但通常大多容器都没有安装tcpdump以及其他网络工具；在托管k8s中我们想登录node，不是没权限就是步骤太麻烦。本文的主角<code>nsenter</code>正是很擅长解决这些问题，<code>nsenter</code>可以进入指定<code>namespace</code>的工具，一般用来在容器环境中进行调试。</p>
<h2 id="调试容器网络" class="headerLink">
    <a href="#%e8%b0%83%e8%af%95%e5%ae%b9%e5%99%a8%e7%bd%91%e7%bb%9c" class="header-mark"></a>调试容器网络</h2><p>通过<code>nsenter</code>可以轻松在宿主机进入容器的网络命令空间，命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 设置containerid</span>
</span></span><span class="line"><span class="cl"><span class="nv">containerid</span><span class="o">=</span>xxx 
</span></span><span class="line"><span class="cl"><span class="c1"># 获取容器主进程</span>
</span></span><span class="line"><span class="cl"><span class="nv">pid</span><span class="o">=</span><span class="k">$(</span>docker inspect -f <span class="o">{{</span>.State.Pid<span class="o">}}</span> <span class="nv">$containerid</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 进入容器networker namespace</span>
</span></span><span class="line"><span class="cl">nsenter -n --target <span class="nv">$pid</span>
</span></span></code></pre></div><p>之后便可以使用宿主机各种工具<code>tcpdump</code>, <code>netstat</code>等命令</p>
<h2 id="登录k8s节点" class="headerLink">
    <a href="#%e7%99%bb%e5%bd%95k8s%e8%8a%82%e7%82%b9" class="header-mark"></a>登录k8s节点</h2><p>如果只有<code>Apiserver</code>权限，登录k8s节点也可以使用<code>nsenter</code></p>
<p>临时登录某个节点可以使用如下脚本:</p>
<blockquote>
<p>前提是需要拥有一些特殊权限<code>privileded</code>，<code>hostPID</code>等</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">node</span><span class="o">=</span>xxx
</span></span><span class="line"><span class="cl"><span class="nv">cmd</span><span class="o">=</span><span class="s1">&#39;[ &#34;nsenter&#34;, &#34;--target&#34;, &#34;1&#34;, &#34;--mount&#34;, &#34;--uts&#34;, &#34;--ipc&#34;, &#34;--net&#34;, &#34;--pid&#34;, &#34;--&#34;]&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">overrides</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOT
</span></span></span><span class="line"><span class="cl"><span class="s">{
</span></span></span><span class="line"><span class="cl"><span class="s">  &#34;spec&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;nodeName&#34;: &#34;$node&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;hostPID&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;hostNetwork&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;containers&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="s">      {
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;securityContext&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="s">          &#34;privileged&#34;: true
</span></span></span><span class="line"><span class="cl"><span class="s">        },
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;image&#34;: &#34;alpine&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;name&#34;: &#34;nsenter&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;stdin&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;stdinOnce&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;tty&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;command&#34;: $cmd
</span></span></span><span class="line"><span class="cl"><span class="s">      }
</span></span></span><span class="line"><span class="cl"><span class="s">    ],
</span></span></span><span class="line"><span class="cl"><span class="s">    &#34;tolerations&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="s">      {
</span></span></span><span class="line"><span class="cl"><span class="s">        &#34;operator&#34;: &#34;Exists&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">      }
</span></span></span><span class="line"><span class="cl"><span class="s">    ]
</span></span></span><span class="line"><span class="cl"><span class="s">  }
</span></span></span><span class="line"><span class="cl"><span class="s">}
</span></span></span><span class="line"><span class="cl"><span class="s">EOT</span>
</span></span><span class="line"><span class="cl"><span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">pod</span><span class="o">=</span><span class="s2">&#34;kube-nodeshell-</span><span class="k">$(</span>env <span class="nv">LC_ALL</span><span class="o">=</span>C tr -dc a-z0-9 &lt;/dev/urandom <span class="p">|</span> head -c 6<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">kubectl run --image<span class="o">=</span>alpine --restart<span class="o">=</span>Never --rm --overrides<span class="o">=</span><span class="s2">&#34;</span><span class="nv">$overrides</span><span class="s2">&#34;</span> -it <span class="nv">$pod</span>
</span></span></code></pre></div><p>原理是通过共享pid方式<code>hostPID=true</code>，在容器中看到宿主机的所有进程，然后使用<code>nsenter</code>进入宿主机1号进程（宿主机根进程）的<code>mount、uts、ipc、net、pid</code>等namespace，从而可以获取类似宿主机的shell。</p>
<p>如果需要经常使用，可以部署个<code>DaemonSet</code>，使用时登录对应节点的pod即可（建议只在测试环境使用，具有一定风险）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">DaemonSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tolerations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Exists&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kube-nodehsell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">nsenter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">target</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="s2">&#34;1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">mount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">uts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">ipc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">net</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="l">pid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- --<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">sleep</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">infinity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">privileged</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostIPC</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostPID</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostNetwork</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">priorityClassName</span><span class="p">:</span><span class="w"> </span><span class="l">system-node-critical</span><span class="w">
</span></span></span></code></pre></div><p>本文所有文件见<a href="https://github.com/qingwave/kube-nodeshell" target="_blank" rel="noopener noreffer">kube-nodeshell</a></p>
<h2 id="临时容器" class="headerLink">
    <a href="#%e4%b8%b4%e6%97%b6%e5%ae%b9%e5%99%a8" class="header-mark"></a>临时容器</h2><p>kubernetes 1.18之后启用了临时容器，用户可以通过<code>kubectl debug</code>命令来添加临时容器到pod，也可以登录到node shell，一些简单的调试工作可以使用这种方法， 见<a href="https://kubernetes.io/zh/docs/tasks/debug-application-cluster/debug-running-pod/" target="_blank" rel="noopener noreffer">调试运行中的Pod</a>。</p>
<p>对比<code>nsenter</code>方法，<code>kubectl debug</code>通过shell登录节点时只是共享了<code>pid</code>、<code>hostNetwork</code>，<code>nsenter</code>则更灵活可以使用宿主机的相关工具以及执行特权操作。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://man7.org/linux/man-pages/man1/nsenter.1.html" target="_blank" rel="noopener noreffer">https://man7.org/linux/man-pages/man1/nsenter.1.html</a></li>
<li><a href="https://github.com/kvaps/kubectl-node-shell" target="_blank" rel="noopener noreffer">https://github.com/kvaps/kubectl-node-shell</a></li>
<li><a href="https://kubernetes.io/zh/docs/tasks/debug-application-cluster/debug-running-pod/" target="_blank" rel="noopener noreffer">https://kubernetes.io/zh/docs/tasks/debug-application-cluster/debug-running-pod/</a></li>
</ul>]]></description>
</item><item>
    <title>WSL2&#43;VSCode&#43;Zsh打造Windows下Linux开发环境</title>
    <link>https://qingwave.github.io/wsl2-vscode/</link>
    <pubDate>Tue, 11 Feb 2020 23:51:51 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/wsl2-vscode/</guid>
    <description><![CDATA[<p>一直以来使用Ubuntu开发，前两天Ubuntu桌面环境崩了，一些工作软件在Ubuntu下很不好用，恰好WSL2(Windows Linux子系统)发布已经有一段日子，而且支持了Docker，上手看看可用性如何。</p>
<h2 id="配置wsl2" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%aewsl2" class="header-mark"></a>配置WSL2</h2><h3 id="必要条件" class="headerLink">
    <a href="#%e5%bf%85%e8%a6%81%e6%9d%a1%e4%bb%b6" class="header-mark"></a>必要条件</h3><ul>
<li>Windows 10 Build 18917或更新版本</li>
<li>启用虚拟化</li>
</ul>
<h3 id="安装步骤" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85%e6%ad%a5%e9%aa%a4" class="header-mark"></a>安装步骤</h3><ul>
<li>启用“虚拟机平台”可选组件，以管理员身份打开 PowerShell 并运行：
<code>Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</code></li>
<li>启用安装子系统
<code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code>
启用这些更改后，你需要重新启动计算机。</li>
<li>应用商店安装ubuntu，如<code>Ubuntu-18.04</code></li>
<li>使用命令行设置要由 WSL 2 支持的发行版，在 PowerShell 中运行：
<code>wsl --set-version &lt;Distro&gt; 2</code></li>
</ul>
<h3 id="配置ubuntu" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%aeubuntu" class="header-mark"></a>配置Ubuntu</h3><p>配置源，配置Sudo免密码，安装必要软件Python、Git、Docker等，终端美化可通过安装Zsh&hellip;</p>
<h2 id="安装vscode-wsl插件" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85vscode-wsl%e6%8f%92%e4%bb%b6" class="header-mark"></a>安装VSCode WSL插件</h2><p>VSCode已经支持了<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl" target="_blank" rel="noopener noreffer">WSL插件</a></p>
<p>最终界面如下：


</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>可以愉快的使用VSCode开发，目前也发现了几点小问题：</p>
<ul>
<li>Vscode Terminal改为WSL后，启动会有1-2秒延时</li>
<li>WSL2中的软件配置开机自启比较麻烦，网上有方案，我是通过快捷命令如启动 Docker <code>alias sds=&quot;sudo service docker start&quot;</code></li>
<li>WSL2本质是个虚拟机，网络方式和本地有一定差异，对我来说影响不大</li>
</ul>
<p>目前在家办公已两周，此方案感觉良好。</p>]]></description>
</item><item>
    <title>openssl常用命令</title>
    <link>https://qingwave.github.io/openssl-cmd/</link>
    <pubDate>Fri, 10 May 2019 22:45:12 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/openssl-cmd/</guid>
    <description><![CDATA[<h3 id="输出x509证书信息" class="headerLink">
    <a href="#%e8%be%93%e5%87%bax509%e8%af%81%e4%b9%a6%e4%bf%a1%e6%81%af" class="header-mark"></a>输出x509证书信息</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">openssl x509 -noout -text  -in ca.pem
</span></span></code></pre></div><p>结果如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Certificate:
</span></span><span class="line"><span class="cl">    Data:
</span></span><span class="line"><span class="cl">        Version: <span class="m">3</span> <span class="o">(</span>0x2<span class="o">)</span>
</span></span><span class="line"><span class="cl">        Serial Number:
</span></span><span class="line"><span class="cl">            5f:11:aa:b3:70:18:fd:89:b0:25:7a:9e:36:c5:e7:ce:33:5a:cc:b7
</span></span><span class="line"><span class="cl">    Signature Algorithm: sha256WithRSAEncryption
</span></span><span class="line"><span class="cl">        Issuer: <span class="nv">C</span><span class="o">=</span>CN, <span class="nv">ST</span><span class="o">=</span>BeiJing, <span class="nv">L</span><span class="o">=</span>BeiJing, <span class="nv">O</span><span class="o">=</span>xx, <span class="nv">OU</span><span class="o">=</span>xx, <span class="nv">CN</span><span class="o">=</span>xx
</span></span><span class="line"><span class="cl">        Validity
</span></span><span class="line"><span class="cl">            Not Before: Dec <span class="m">26</span> 06:17:00 <span class="m">2019</span> GMT
</span></span><span class="line"><span class="cl">            Not After : Dec  <span class="m">2</span> 06:17:00 <span class="m">2119</span> GMT <span class="c1">#过期时间</span>
</span></span><span class="line"><span class="cl">        Subject: <span class="nv">C</span><span class="o">=</span>CN, <span class="nv">ST</span><span class="o">=</span>BeiJing, <span class="nv">L</span><span class="o">=</span>BeiJing, <span class="nv">O</span><span class="o">=</span>xx, <span class="nv">OU</span><span class="o">=</span>xx, <span class="nv">CN</span><span class="o">=</span>xx
</span></span><span class="line"><span class="cl">        Subject Public Key Info:
</span></span><span class="line"><span class="cl">        ...
</span></span></code></pre></div><h3 id="验证公钥私钥是否匹配" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e5%85%ac%e9%92%a5%e7%a7%81%e9%92%a5%e6%98%af%e5%90%a6%e5%8c%b9%e9%85%8d" class="header-mark"></a>验证公钥私钥是否匹配</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">diff -eq &lt;<span class="o">(</span>openssl x509 -pubkey -noout -in cert.crt<span class="o">)</span> &lt;<span class="o">(</span>openssl rsa -pubout -in cert.key<span class="o">)</span>
</span></span></code></pre></div><p>正常会输出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">writing RSA key
</span></span></code></pre></div><h3 id="验证证书ca" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e8%af%81%e4%b9%a6ca" class="header-mark"></a>验证证书CA</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">openssl verify -CAfile ca.pem client.pem
</span></span></code></pre></div><p>正常输出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">client.pem: OK
</span></span></code></pre></div>]]></description>
</item></channel>
</rss>
