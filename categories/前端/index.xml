<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>前端 - 分类 - Qingwave</title>
        <link>https://qingwave.github.io/categories/%E5%89%8D%E7%AB%AF/</link>
        <description>前端 - 分类 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Tue, 06 Sep 2022 14:30:30 &#43;0800</lastBuildDate><atom:link href="https://qingwave.github.io/categories/%E5%89%8D%E7%AB%AF/" rel="self" type="application/rss+xml" /><item>
    <title>程序员的浪漫: 婚礼邀请函小程序</title>
    <link>https://qingwave.github.io/wedding-invitation/</link>
    <pubDate>Tue, 06 Sep 2022 14:30:30 &#43;0800</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/wedding-invitation/</guid>
    <description><![CDATA[<p>婚礼将近，作为一个<del>有能耐</del>好折腾的程序员怎么能不趁机展示下，着手开发个婚礼邀请函微信小程序。</p>
<h2 id="总体设计" class="headerLink">
    <a href="#%e6%80%bb%e4%bd%93%e8%ae%be%e8%ae%a1" class="header-mark"></a>总体设计</h2><p>选用微信小程序，传播方便，相对公众号定制性也更强。原本打算Github找一个改改，无奈不是太繁杂、就是审美不过关，还是自己开头开始吧。</p>
<p>主要功能：</p>
<ul>
<li>长页展示，不花里胡哨</li>
<li>照片展示，需要各种排版，避免单调</li>
<li>婚礼信息展示，日历、地点等</li>
<li>背景音乐，没有音乐就好比吃面不就蒜，总是少点味道</li>
<li>支持转发、分享</li>
</ul>
<p>其它锦上添花的功能，比如点赞，评论，需要有数据库的支持，看自己需求了。</p>
<p>小程序地址：
</p>
<p>效果如下：</p>
<table>
  <tr>
     <td></td>
     <td></td>
  </tr>
  <tr>
     <td></td>
     <td></td>
  </tr>
</table>
<h2 id="开发过程" class="headerLink">
    <a href="#%e5%bc%80%e5%8f%91%e8%bf%87%e7%a8%8b" class="header-mark"></a>开发过程</h2><p>首先是大体过下<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener noreffer">开发文档</a>，熟悉前端的应该都比较好上手，一些用法和Vue比较相似，就是容易写混，经常把<code>wx:if</code>写成<code>v-if</code>之类的。</p>
<h3 id="背景音乐" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af%e9%9f%b3%e4%b9%90" class="header-mark"></a>背景音乐</h3><p>通过BackgroundAudioManager实现背景音乐，暂停、续播都比较方便。</p>
<p>获取实例后，设置对应的标题、音乐链接即可直接播放</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">bgm</span> <span class="o">=</span> <span class="nx">wx</span><span class="p">.</span><span class="nx">getBackgroundAudioManager</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">bgmName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">coverImgUrl</span> <span class="o">=</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">share</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">bgm</span><span class="p">;</span>
</span></span></code></pre></div><p>暂停与播放可以绑定到对应的音乐图标上了，点击切换，主要逻辑如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">onStop</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span> <span class="nx">playing</span><span class="o">:</span> <span class="kc">false</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">onEnded</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span> <span class="nx">playing</span><span class="o">:</span> <span class="kc">false</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">onPause</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span> <span class="nx">playing</span><span class="o">:</span> <span class="kc">false</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">bgm</span><span class="p">.</span><span class="nx">onPlay</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span> <span class="nx">playing</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>将音乐图标与事件绑定，当播放时展示rotate动画，暂停时停止动画<code>animation-play-state: paused</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">image</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;player-img {{playing ? &#39;&#39;: &#39;player-stop&#39;}}&#34;</span> <span class="na">lazyLoad</span><span class="o">=</span><span class="s">&#34;false&#34;</span>  <span class="na">mode</span><span class="o">=</span><span class="s">&#34;aspectFit&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;{{static}}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">image</span><span class="p">&gt;</span>
</span></span></code></pre></div><h3 id="图片展示" class="headerLink">
    <a href="#%e5%9b%be%e7%89%87%e5%b1%95%e7%a4%ba" class="header-mark"></a>图片展示</h3><p>图片主要是要考虑到各种排版，避免审美疲劳，可以参考一些婚礼应用的排版设计，比如婚礼乎、婚礼纪之类的，这里大量参考了小程序我的婚礼邀请的设计。</p>
<p><strong>圆形图片</strong></p>
<p>展示新郎新娘名称时可以用到，通过设置<code>border-radius: 50%;</code>来实现</p>
<p><strong>排版</strong></p>
<p>横版照片可以直接填充，竖版照片填充过大，可以一行两张或三张，如果直接对齐太严肃，可以通过margin-top来设置落差，下面设置为三等分的图片设置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">triple-img</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">10</span><span class="n">rpx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">height</span><span class="p">:</span> <span class="mi">300</span><span class="n">rpx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">width</span><span class="p">:</span> <span class="mi">30</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">img-1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">-100</span><span class="n">rpx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">img-2</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">img-3</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">100</span><span class="n">rpx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>设置相框</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">border</span><span class="p">:</span> <span class="mi">6</span><span class="n">rpx</span> <span class="kc">solid</span> <span class="mh">#cbd5e1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>照片周围装饰线，可通过伪元素设置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">img</span><span class="p">::</span><span class="nd">before</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border</span><span class="p">:</span> <span class="mi">4</span><span class="n">rpx</span> <span class="kc">solid</span> <span class="mh">#cbd5e1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-bottom</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-right</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后就是组合这些排列，添加对应的文字标题</p>
<p><strong>图片预览</strong>
微信提供了图片预览的API，可以直接使用，将方法绑定到对应图片或图片组上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">viewImg</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">wx</span><span class="p">.</span><span class="nx">previewImage</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">urls</span><span class="o">:</span> <span class="nx">imgs</span><span class="p">,</span> <span class="c1">// 预览的图片列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">current</span><span class="o">:</span> <span class="nx">src</span><span class="p">,</span> <span class="c1">// 初始预览的图片url
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fail</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">complete</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>图片开发可以先使用本地图片，开发完成后可以将图片压缩后（我使用的是图压）上传到对象存储或者云开发的存储中。</p>
<h3 id="地图展示" class="headerLink">
    <a href="#%e5%9c%b0%e5%9b%be%e5%b1%95%e7%a4%ba" class="header-mark"></a>地图展示</h3><p>小程序提供了原生组件map，在<a href="https://lbs.qq.com/getPoint/" target="_blank" rel="noopener noreffer">腾讯地图</a>上选取所在酒店的经纬度，填充到markers中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">map</span> <span class="na">bindtap</span><span class="o">=</span><span class="s">&#34;openMap&#34;</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;width: 100%; height: 400rpx;&#34;</span> <span class="na">data-info</span><span class="o">=</span><span class="s">&#34;{{item}}&#34;</span> <span class="na">enablePoi</span><span class="o">=</span><span class="s">&#34;true&#34;</span> <span class="na">scale</span><span class="o">=</span><span class="s">&#34;16&#34;</span> <span class="na">enableRotate</span><span class="o">=</span><span class="s">&#34;true&#34;</span> <span class="na">latitude</span><span class="o">=</span><span class="s">&#34;{{item.latitude}}&#34;</span> <span class="na">longitude</span><span class="o">=</span><span class="s">&#34;{{item.longitude}}&#34;</span> <span class="na">markers</span><span class="o">=</span><span class="s">&#34;{{item.markers}}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">map</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>其中openMap用来打开地图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kd">let</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">info</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">wx</span><span class="p">.</span><span class="nx">openLocation</span><span class="p">({</span> <span class="c1">// 填充对应的信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">name</span><span class="o">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">address</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="nx">address</span><span class="o">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">address</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">latitude</span><span class="o">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">latitude</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">longitude</span><span class="o">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">longitude</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fail</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;failed to open location&#34;</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="锦上添花" class="headerLink">
    <a href="#%e9%94%a6%e4%b8%8a%e6%b7%bb%e8%8a%b1" class="header-mark"></a>锦上添花</h3><p>通过上面的步骤已经完成了邀请函，如果需要添加一些交互功能，就需要使用到服务器，或者直接使用云开发更简单点。</p>
<p><strong>点赞实现</strong></p>
<p>点赞很简单，数据库中设置一个likes字段，当用户点击时加1，如果点赞过再点击减1，可以通过云开发提供的原子操作实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">      <span class="kd">var</span> <span class="nx">likes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">likes</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">liked</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">num</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1">// 未点赞，加1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">likes</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">num</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="c1">// 已点赞，减1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">likes</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">_</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">command</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">liked</span><span class="o">:</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">liked</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">likes</span><span class="o">:</span> <span class="nx">likes</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;wedding&#39;</span><span class="p">).</span><span class="nx">doc</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">).</span><span class="nx">update</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">likes</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">inc</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="c1">// 原子操作，更新点赞值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fail</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;set failed&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>如果需要记录点赞的用户，首先需要用户登录，相对不太友好，点赞后可以记录用户OpenID到对应表。</p>
<p><strong>发送通知</strong></p>
<p>首先要申请消息模板，在小程序管理界面可申请，记录模板id和内容key值。</p>
<p>这里通过云函数实现发送婚礼邀请的通知，只是当用户点击时，实时出发。如果需要延时触发（比如婚礼一天前提醒），则需要服务器支持，通过延时任务或者定期轮询来实现。</p>
<p>云函数实现通知</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cloud</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;wx-server-sdk&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">cloud</span><span class="p">.</span><span class="nx">init</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 云函数入口函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">wxContext</span> <span class="o">=</span> <span class="nx">cloud</span><span class="p">.</span><span class="nx">getWXContext</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">cloud</span><span class="p">.</span><span class="nx">openapi</span><span class="p">.</span><span class="nx">subscribeMessage</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">touser</span><span class="o">:</span> <span class="nx">wxContext</span><span class="p">.</span><span class="nx">OPENID</span><span class="p">,</span> <span class="c1">// 获取用户id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">page</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">page</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="c1">// 添加对应的数据，值要与模板中的对应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">templateId</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">templateId</span> <span class="c1">// 模板id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">result</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在小程序中调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">cloudEnable</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="kd">let</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">info</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">wx</span><span class="p">.</span><span class="nx">requestSubscribeMessage</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">tmplIds</span><span class="o">:</span> <span class="p">[</span><span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">msgId</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">wx</span><span class="p">.</span><span class="nx">cloud</span><span class="p">.</span><span class="nx">callFunction</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">            <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;sendMsg&#34;</span><span class="p">,</span> <span class="c1">// 云函数名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nx">page</span><span class="o">:</span> <span class="nx">indexPage</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nx">templateId</span><span class="o">:</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">msgId</span><span class="p">,</span> <span class="c1">// 模板id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// 对应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="s2">&#34;time2&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">info</span><span class="p">.</span><span class="nx">year</span><span class="si">}</span><span class="sb">年</span><span class="si">${</span><span class="nx">info</span><span class="p">.</span><span class="nx">month</span><span class="si">}</span><span class="sb">月</span><span class="si">${</span><span class="nx">info</span><span class="p">.</span><span class="nx">day</span><span class="si">}</span><span class="sb">日 12:00`</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;thing5&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">conf</span><span class="p">.</span><span class="nx">BASE</span><span class="p">.</span><span class="nx">msgTitle</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;thing6&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">info</span><span class="p">.</span><span class="nx">city</span><span class="si">}${</span><span class="nx">info</span><span class="p">.</span><span class="nx">address</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;thing7&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="s2">&#34;value&#34;</span><span class="o">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">room</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="一些坑" class="headerLink">
    <a href="#%e4%b8%80%e4%ba%9b%e5%9d%91" class="header-mark"></a>一些坑</h2><ul>
<li>小程序的双向绑定，必须通过this.setData来设置，否则页面不会更新</li>
<li>部分功能在IOS与安卓上表现不一致，需要真机测试下</li>
<li>云开发的权限问题，会造成小程序的操作失败</li>
<li>分享到朋友圈中的小程序，直接打开会进入到单页模式，一些功能会受限比如更新云数据库，需要配置云开发权限设置</li>
</ul>
<h2 id="后记" class="headerLink">
    <a href="#%e5%90%8e%e8%ae%b0" class="header-mark"></a>后记</h2><p>前前后后小一周时间，算是搞定了，效果也符合预期。不过终究怎么展现只是个形式，内容更重要。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang&#43;Vue轻松构建Web应用</title>
    <link>https://qingwave.github.io/golang-vue-starter/</link>
    <pubDate>Thu, 20 Jan 2022 02:33:38 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-vue-starter/</guid>
    <description><![CDATA[<p>最近疫情在家，空闲时间比较多，整理下之前写的Golang项目<a href="https://github.com/qingwave/weave" target="_blank" rel="noopener noreffer">Weave</a>，补充了一些功能，加了前端实现。作为一个Web应用模板，也算是功能比较齐全了，现将开发过程中遇到的一些问题、项目特性总结下。</p>
<h2 id="介绍" class="headerLink">
    <a href="#%e4%bb%8b%e7%bb%8d" class="header-mark"></a>介绍</h2><p>Weave是一个基于<code>Go+Vue</code>实现的Web应用模板，支持前后端，拥有完整的认证、存储、Restful API等功能。</p>
<p>后端基于Golang开发，主要特性如下：</p>
<ul>
<li>Restful API，通过<code>gin</code>实现，支持<code>swagger</code></li>
<li>MVC架构</li>
<li>支持Postgres存储，可以轻松替换为MySQL，使用<code>gorm</code>接入</li>
<li>Redis缓存</li>
<li>基于<code>JWT</code>认证</li>
<li>服务优雅终止</li>
<li>请求限速</li>
<li>Docker容器管理，<code>Websocket</code>支持</li>
<li>RBAC认证，由<code>Casbin</code>支持</li>
<li>其他支持<code>Prometheus</code>监控、格式化日志、<code>PProf</code>等</li>
</ul>
<p>前端基于<code>Vue</code>开发，使用<code>ElementPlus</code>组件库</p>
<ul>
<li>Vue3开发，使用组合式API</li>
<li>使用<code>vite</code>快速编译</li>
<li>支持<code>WebShell</code>，基于<code>xtermjs</code></li>
<li>图表功能，基于<code>echarts</code></li>
<li>支持<code>WindiCSS</code>，减少CSS编写</li>
</ul>
<p>主要界面如下：</p>
<ul>
<li>登录界面


</li>
<li>Dashboard界面


</li>
<li>应用界面


</li>
<li>WebShell界面


</li>
</ul>
<h2 id="项目结构" class="headerLink">
    <a href="#%e9%a1%b9%e7%9b%ae%e7%bb%93%e6%9e%84" class="header-mark"></a>项目结构</h2><p>项目组织如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">├── Dockerfile
</span></span><span class="line"><span class="cl">├── Makefile
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── bin
</span></span><span class="line"><span class="cl">├── config <span class="c1"># server配置</span>
</span></span><span class="line"><span class="cl">├── docs <span class="c1"># swagger 生成文件</span>
</span></span><span class="line"><span class="cl">├── document <span class="c1"># 文档</span>
</span></span><span class="line"><span class="cl">├── go.mod
</span></span><span class="line"><span class="cl">├── go.sum
</span></span><span class="line"><span class="cl">├── main.go <span class="c1"># server入口</span>
</span></span><span class="line"><span class="cl">├── pkg <span class="c1"># server业务代码</span>
</span></span><span class="line"><span class="cl">├── scripts <span class="c1"># 脚本</span>
</span></span><span class="line"><span class="cl">├── static <span class="c1"># 静态文件</span>
</span></span><span class="line"><span class="cl">└── web <span class="c1"># 前端目录</span>
</span></span></code></pre></div><h3 id="后端结构" class="headerLink">
    <a href="#%e5%90%8e%e7%ab%af%e7%bb%93%e6%9e%84" class="header-mark"></a>后端结构</h3><p>后端按照<code>MVC</code>架构实现，参考了社区一些最佳实践，具体如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">├── pkg
</span></span><span class="line"><span class="cl">│   ├── common <span class="c1"># 通用包</span>
</span></span><span class="line"><span class="cl">│   ├── config <span class="c1"># 配置相关</span>
</span></span><span class="line"><span class="cl">│   ├── container <span class="c1"># 容器库</span>
</span></span><span class="line"><span class="cl">│   ├── controller <span class="c1"># 控制器层，处理HTTP请求</span>
</span></span><span class="line"><span class="cl">│   ├── database <span class="c1"># 数据库初始化，封装</span>
</span></span><span class="line"><span class="cl">│   ├── metrics <span class="c1"># 监控相关</span>
</span></span><span class="line"><span class="cl">│   ├── middleware <span class="c1"># http中间件</span>
</span></span><span class="line"><span class="cl">│   ├── model <span class="c1"># 模型层</span>
</span></span><span class="line"><span class="cl">│   ├── repository <span class="c1"># 存储层，数据持久化</span>
</span></span><span class="line"><span class="cl">│   ├── server <span class="c1"># server入口，创建router</span>
</span></span><span class="line"><span class="cl">│   └── service <span class="c1"># 逻辑层，处理业务</span>
</span></span></code></pre></div><h3 id="前端结构" class="headerLink">
    <a href="#%e5%89%8d%e7%ab%af%e7%bb%93%e6%9e%84" class="header-mark"></a>前端结构</h3><p>前端实现<code>Vue3</code>实现，与一般Vue项目类似</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">web
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── index.html
</span></span><span class="line"><span class="cl">├── node_modules
</span></span><span class="line"><span class="cl">├── package-lock.json
</span></span><span class="line"><span class="cl">├── package.json
</span></span><span class="line"><span class="cl">├── public
</span></span><span class="line"><span class="cl">│   └── favicon.ico
</span></span><span class="line"><span class="cl">├── src <span class="c1"># 所有代码位于src</span>
</span></span><span class="line"><span class="cl">│   ├── App.vue <span class="c1"># Vue项目入口</span>
</span></span><span class="line"><span class="cl">│   ├── assets <span class="c1"># 静态文件</span>
</span></span><span class="line"><span class="cl">│   ├── axios <span class="c1"># http请求封装</span>
</span></span><span class="line"><span class="cl">│   ├── components <span class="c1"># Vue组件</span>
</span></span><span class="line"><span class="cl">│   ├── main.js
</span></span><span class="line"><span class="cl">│   ├── router <span class="c1"># 路由</span>
</span></span><span class="line"><span class="cl">│   ├── utils <span class="c1"># 工具包</span>
</span></span><span class="line"><span class="cl">│   └── views <span class="c1"># 所有页面</span>
</span></span><span class="line"><span class="cl">└── vite.config.js <span class="c1"># vite配置</span>
</span></span></code></pre></div><h2 id="一些细节" class="headerLink">
    <a href="#%e4%b8%80%e4%ba%9b%e7%bb%86%e8%8a%82" class="header-mark"></a>一些细节</h2><h3 id="为什么使用jwt" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bd%bf%e7%94%a8jwt" class="header-mark"></a>为什么使用JWT</h3><p>主要是为了方便服务横向扩展，如果基于<code>Cookie+Session</code>，<code>Session</code>只能保存在服务端，无法进行负载均衡。另外通过api访问，jwt可以放在HTTP Header的<code>Bearer Token</code>中。</p>
<p>当使用Websocket时，不支持HTTP Header，由于认证统一在中间件中进行，可以通过简单通过<code>cookie</code>存储，也可以单独为Websocket配置认证。</p>
<p>JWT不支持取消，可以通过在redis存入黑名单实现。</p>
<h3 id="缓存实现" class="headerLink">
    <a href="#%e7%bc%93%e5%ad%98%e5%ae%9e%e7%8e%b0" class="header-mark"></a>缓存实现</h3><p>加入了缓存便引入了数据一致性问题，经典的解决办法是先写数据库再写缓存（Cache-Aside模式），实现最终一致性，业务简单的项目可以使用这种方法。</p>
<p>那先写缓存行不行？如果同时有一个写请求一读请求，写请求会先删除缓存，读请求缓慢未命中会将DB中的旧数据载入，可能会造成数据不一致。先写数据库则不会有这样的问题，如果要实现先写缓存，可以使用双删的办法，即写前后分别操作一次缓存，这样处理逻辑会更复杂。如果不想侵入业务代码，可以通过监听Binlog来异步更新缓存。</p>
<h3 id="请求限流" class="headerLink">
    <a href="#%e8%af%b7%e6%b1%82%e9%99%90%e6%b5%81" class="header-mark"></a>请求限流</h3><p>限流使用了<code>golang.org/x/time/rate</code>提供的令牌桶算法，以应对突发流量，可以对单个IP以及Server层面实现请求控制。</p>
<p>需要特别注意的是限流应当区别长连接与短连接，比如<code>Weave</code>中实现了容器<code>exec</code>接口，通过Websocket登录到容器，不应该影响其他正常请求。</p>
<h3 id="从零开发前端" class="headerLink">
    <a href="#%e4%bb%8e%e9%9b%b6%e5%bc%80%e5%8f%91%e5%89%8d%e7%ab%af" class="header-mark"></a>从零开发前端</h3><p>前端而言完全是毫无经验，选用了<code>Vue3</code>，主要是文档比较全面适合新手。UI基于了<code>ElementPlus</code>，目前还是Beta版本，使用过程了也遇到了一些Bug，生产过程中不建议用，无奈的是目前<code>Vue3</code>好像也没有比较成熟的UI库。</p>
<p>Vue文档以及示例很详细，上手也挺快。主要是CCS不熟悉，调整样式上花了不少功夫，后来引入了<a href="https://windicss.org/" target="_blank" rel="noopener noreffer">WindiCSS</a>, 只编写了少量的样式，其他全部依赖WindiCSS实现。其他路由、请求、图表参考对应的文档实现起来也很容易。</p>
<p>搭建了一个比较完整的管理平台，自己还是挺满意的，后面会不断优化，加一些其他特性。</p>
<h2 id="运行" class="headerLink">
    <a href="#%e8%bf%90%e8%a1%8c" class="header-mark"></a>运行</h2><p>后端本地运行，需要依赖Docker，Makefile文件只在Linux下有效，其他平台请自行尝试</p>
<ol>
<li>安装数据库postgres与redis，初始化库</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make init
</span></span></code></pre></div><ol start="2">
<li>本地运行</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make run
</span></span></code></pre></div><p>前端使用<code>vite</code>编译</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> web
</span></span><span class="line"><span class="cl">npm i
</span></span><span class="line"><span class="cl">npm run dev
</span></span></code></pre></div><p>更多见<a href="https://github.com/qingwave/weave#readme" target="_blank" rel="noopener noreffer">ReadMe</a></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文总结了<code>Weave</code>的架构与特性，以及开发过程中遇到的一些问题，从零开始实现一个完整的前后端Web应用，其他功能后面会不断优化。</p>
<p>项目链接见</p>
<ul>
<li><a href="https://github.com/qingwave/weave" target="_blank" rel="noopener noreffer">https://github.com/qingwave/weave</a></li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item></channel>
</rss>
