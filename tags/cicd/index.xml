<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>cicd - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/cicd/</link>
        <description>cicd - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Tue, 11 Feb 2020 22:45:54 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/tags/cicd/" rel="self" type="application/rss+xml" /><item>
    <title>k8s&#43;gitlab实现cicd</title>
    <link>https://qingwave.github.io/k8s-gitlab-cicd/</link>
    <pubDate>Tue, 11 Feb 2020 22:45:54 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-gitlab-cicd/</guid>
    <description><![CDATA[<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>目前Gitlab11已经支持了Kubernetes Runner, 任务可以跑在Pod中。本文介绍如何通过CICD接入Kubernetes，开始前需要以下必备条件：</p>
<ul>
<li>Kubernetes集群</li>
<li>配置Kubernetes Runner, 网上有很多教程，若是生产环境或是多租户k8s集群，建议通过yaml手动配置；默认通过helm安装权限比较大，而且配置不灵活</li>
</ul>
<h2 id="ci过程" class="headerLink">
    <a href="#ci%e8%bf%87%e7%a8%8b" class="header-mark"></a>CI过程</h2><p>通常编译镜像有三种方式：</p>
<ul>
<li>docker in docker：与物理方式类似，需要权限多，性能较差</li>
<li>kaniko：镜像编译工具，性能好</li>
</ul>
<p>我们使用kaniko编译镜像，push到镜像仓库，过程如下：</p>
<ol>
<li>配置变量
配置镜像相关变量，仓库的账户密码，推送的镜像名称<code>CI_REGISTRY_IMAGE</code>等


</li>
<li>gitlab-ci配置如下</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">stage</span><span class="p">:</span><span class="w"> </span><span class="l">build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">image</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gcr.io/kaniko-project/executor:debug</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entrypoint</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">echo &#34;{\&#34;auths\&#34;:{\&#34;$CI_REGISTRY\&#34;:{\&#34;username\&#34;:\&#34;$CI_REGISTRY_USER\&#34;,\&#34;password\&#34;:\&#34;$CI_REGISTRY_PASSWORD\&#34;}}}&#34; &gt; /kaniko/.docker/config.json</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">/kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">after_script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">echo &#34;build completed&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">only</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">tags</span><span class="w"> </span><span class="c"># 打tag才会执行，测试可去掉</span><span class="w">
</span></span></span></code></pre></div><h2 id="cd过程" class="headerLink">
    <a href="#cd%e8%bf%87%e7%a8%8b" class="header-mark"></a>CD过程</h2><p>CD即需要将生成的镜像更新到Kubernetes集群中，有如下几种方式：</p>
<ul>
<li>k8s restful api：需要对api较了解，更新过程需要调用<code>PATH</code>方法，不推荐</li>
<li>kubectl: 常规方式</li>
<li>helm: 如有可用的helm仓库，也可使用helm进行更新</li>
</ul>
<p>我们以kubectl为例，CD配置如下：</p>
<ol>
<li>配置变量
配置必须的集群地址，token，需要更新服务的namespace, container等</li>
<li>CD配置
配置与物理环境类似，首先配置kubectl token、集群等，最后调用<code>set image</code>更新服务</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">image</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubectl:1.17</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entrypoint</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">before_script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">IMAGE=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">kubectl config set-credentials $CD_USER --token $CD_APP_AK </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">kubectl config set-cluster $CD_CLUSTER --server https://$CD_SERVER</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">kubectl config set-context $CD_USER@$CD_CLUSTER/$CD_NAMESPACE --user $CD_USER --cluster $CD_CLUSTER --namespace $CD_NAMESPACE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">kubectl config use-context $CD_USER@$CD_CLUSTER/$CD_NAMESPACE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">kubectl set image -n $CD_NAMESPACE $CD_APP_TYPE/$CD_APP_NAME $CD_CONTAINER=$IMAGE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">only</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">tags</span><span class="w">
</span></span></span></code></pre></div><ol start="3">
<li>运行结果</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl <span class="nb">set</span> image -n <span class="nv">$CD_NAMESPACE</span> <span class="nv">$CD_APP_TYPE</span>/<span class="nv">$CD_APP_NAME</span> <span class="nv">$CD_CONTAINER</span><span class="o">=</span><span class="nv">$IMAGE</span>
</span></span><span class="line"><span class="cl">deployment.extensions/helloworld image updated
</span></span><span class="line"><span class="cl">Job succeeded
</span></span></code></pre></div><h2 id="备注" class="headerLink">
    <a href="#%e5%a4%87%e6%b3%a8" class="header-mark"></a>备注</h2><p>本文所列举的CICD过程较简单，可以使用CICD完成服务的多集群部署，更新结果检查等功能。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ol>
<li><a href="https://docs.gitlab.com/ee/ci/docker/using_kaniko.html" target="_blank" rel="noopener noreffer">https://docs.gitlab.com/ee/ci/docker/using_kaniko.html</a></li>
<li><a href="https://docs.gitlab.com/runner/executors/kubernetes.html" target="_blank" rel="noopener noreffer">https://docs.gitlab.com/runner/executors/kubernetes.html</a></li>
</ol>
]]></description>
</item></channel>
</rss>
