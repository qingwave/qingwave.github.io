<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>vue - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/vue/</link>
        <description>vue - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Thu, 20 Jan 2022 02:33:38 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/tags/vue/" rel="self" type="application/rss+xml" /><item>
    <title>Golang&#43;Vue轻松构建Web应用</title>
    <link>https://qingwave.github.io/golang-vue-starter/</link>
    <pubDate>Thu, 20 Jan 2022 02:33:38 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-vue-starter/</guid>
    <description><![CDATA[<p>最近疫情在家，空闲时间比较多，整理下之前写的Golang项目<a href="https://github.com/qingwave/weave" target="_blank" rel="noopener noreffer">Weave</a>，补充了一些功能，加了前端实现。作为一个Web应用模板，也算是功能比较齐全了，现将开发过程中遇到的一些问题、项目特性总结下。</p>
<h2 id="介绍" class="headerLink">
    <a href="#%e4%bb%8b%e7%bb%8d" class="header-mark"></a>介绍</h2><p>Weave是一个基于<code>Go+Vue</code>实现的Web应用模板，支持前后端，拥有完整的认证、存储、Restful API等功能。</p>
<p>后端基于Golang开发，主要特性如下：</p>
<ul>
<li>Restful API，通过<code>gin</code>实现，支持<code>swagger</code></li>
<li>MVC架构</li>
<li>支持Postgres存储，可以轻松替换为MySQL，使用<code>gorm</code>接入</li>
<li>Redis缓存</li>
<li>基于<code>JWT</code>认证</li>
<li>服务优雅终止</li>
<li>请求限速</li>
<li>Docker容器管理，<code>Websocket</code>支持</li>
<li>RBAC认证，由<code>Casbin</code>支持</li>
<li>其他支持<code>Prometheus</code>监控、格式化日志、<code>PProf</code>等</li>
</ul>
<p>前端基于<code>Vue</code>开发，使用<code>ElementPlus</code>组件库</p>
<ul>
<li>Vue3开发，使用组合式API</li>
<li>使用<code>vite</code>快速编译</li>
<li>支持<code>WebShell</code>，基于<code>xtermjs</code></li>
<li>图表功能，基于<code>echarts</code></li>
<li>支持<code>WindiCSS</code>，减少CSS编写</li>
</ul>
<p>主要界面如下：</p>
<ul>
<li>登录界面


</li>
<li>Dashboard界面


</li>
<li>应用界面


</li>
<li>WebShell界面


</li>
</ul>
<h2 id="项目结构" class="headerLink">
    <a href="#%e9%a1%b9%e7%9b%ae%e7%bb%93%e6%9e%84" class="header-mark"></a>项目结构</h2><p>项目组织如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">├── Dockerfile
</span></span><span class="line"><span class="cl">├── Makefile
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── bin
</span></span><span class="line"><span class="cl">├── config <span class="c1"># server配置</span>
</span></span><span class="line"><span class="cl">├── docs <span class="c1"># swagger 生成文件</span>
</span></span><span class="line"><span class="cl">├── document <span class="c1"># 文档</span>
</span></span><span class="line"><span class="cl">├── go.mod
</span></span><span class="line"><span class="cl">├── go.sum
</span></span><span class="line"><span class="cl">├── main.go <span class="c1"># server入口</span>
</span></span><span class="line"><span class="cl">├── pkg <span class="c1"># server业务代码</span>
</span></span><span class="line"><span class="cl">├── scripts <span class="c1"># 脚本</span>
</span></span><span class="line"><span class="cl">├── static <span class="c1"># 静态文件</span>
</span></span><span class="line"><span class="cl">└── web <span class="c1"># 前端目录</span>
</span></span></code></pre></div><h3 id="后端结构" class="headerLink">
    <a href="#%e5%90%8e%e7%ab%af%e7%bb%93%e6%9e%84" class="header-mark"></a>后端结构</h3><p>后端按照<code>MVC</code>架构实现，参考了社区一些最佳实践，具体如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">├── pkg
</span></span><span class="line"><span class="cl">│   ├── common <span class="c1"># 通用包</span>
</span></span><span class="line"><span class="cl">│   ├── config <span class="c1"># 配置相关</span>
</span></span><span class="line"><span class="cl">│   ├── container <span class="c1"># 容器库</span>
</span></span><span class="line"><span class="cl">│   ├── controller <span class="c1"># 控制器层，处理HTTP请求</span>
</span></span><span class="line"><span class="cl">│   ├── database <span class="c1"># 数据库初始化，封装</span>
</span></span><span class="line"><span class="cl">│   ├── metrics <span class="c1"># 监控相关</span>
</span></span><span class="line"><span class="cl">│   ├── middleware <span class="c1"># http中间件</span>
</span></span><span class="line"><span class="cl">│   ├── model <span class="c1"># 模型层</span>
</span></span><span class="line"><span class="cl">│   ├── repository <span class="c1"># 存储层，数据持久化</span>
</span></span><span class="line"><span class="cl">│   ├── server <span class="c1"># server入口，创建router</span>
</span></span><span class="line"><span class="cl">│   └── service <span class="c1"># 逻辑层，处理业务</span>
</span></span></code></pre></div><h3 id="前端结构" class="headerLink">
    <a href="#%e5%89%8d%e7%ab%af%e7%bb%93%e6%9e%84" class="header-mark"></a>前端结构</h3><p>前端实现<code>Vue3</code>实现，与一般Vue项目类似</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">web
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── index.html
</span></span><span class="line"><span class="cl">├── node_modules
</span></span><span class="line"><span class="cl">├── package-lock.json
</span></span><span class="line"><span class="cl">├── package.json
</span></span><span class="line"><span class="cl">├── public
</span></span><span class="line"><span class="cl">│   └── favicon.ico
</span></span><span class="line"><span class="cl">├── src <span class="c1"># 所有代码位于src</span>
</span></span><span class="line"><span class="cl">│   ├── App.vue <span class="c1"># Vue项目入口</span>
</span></span><span class="line"><span class="cl">│   ├── assets <span class="c1"># 静态文件</span>
</span></span><span class="line"><span class="cl">│   ├── axios <span class="c1"># http请求封装</span>
</span></span><span class="line"><span class="cl">│   ├── components <span class="c1"># Vue组件</span>
</span></span><span class="line"><span class="cl">│   ├── main.js
</span></span><span class="line"><span class="cl">│   ├── router <span class="c1"># 路由</span>
</span></span><span class="line"><span class="cl">│   ├── utils <span class="c1"># 工具包</span>
</span></span><span class="line"><span class="cl">│   └── views <span class="c1"># 所有页面</span>
</span></span><span class="line"><span class="cl">└── vite.config.js <span class="c1"># vite配置</span>
</span></span></code></pre></div><h2 id="一些细节" class="headerLink">
    <a href="#%e4%b8%80%e4%ba%9b%e7%bb%86%e8%8a%82" class="header-mark"></a>一些细节</h2><h3 id="为什么使用jwt" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bd%bf%e7%94%a8jwt" class="header-mark"></a>为什么使用JWT</h3><p>主要是为了方便服务横向扩展，如果基于<code>Cookie+Session</code>，<code>Session</code>只能保存在服务端，无法进行负载均衡。另外通过api访问，jwt可以放在HTTP Header的<code>Bearer Token</code>中。</p>
<p>当使用Websocket时，不支持HTTP Header，由于认证统一在中间件中进行，可以通过简单通过<code>cookie</code>存储，也可以单独为Websocket配置认证。</p>
<p>JWT不支持取消，可以通过在redis存入黑名单实现。</p>
<h3 id="缓存实现" class="headerLink">
    <a href="#%e7%bc%93%e5%ad%98%e5%ae%9e%e7%8e%b0" class="header-mark"></a>缓存实现</h3><p>加入了缓存便引入了数据一致性问题，经典的解决办法是先写数据库再写缓存（Cache-Aside模式），实现最终一致性，业务简单的项目可以使用这种方法。</p>
<p>那先写缓存行不行？如果同时有一个写请求一读请求，写请求会先删除缓存，读请求缓慢未命中会将DB中的旧数据载入，可能会造成数据不一致。先写数据库则不会有这样的问题，如果要实现先写缓存，可以使用双删的办法，即写前后分别操作一次缓存，这样处理逻辑会更复杂。如果不想侵入业务代码，可以通过监听Binlog来异步更新缓存。</p>
<h3 id="请求限流" class="headerLink">
    <a href="#%e8%af%b7%e6%b1%82%e9%99%90%e6%b5%81" class="header-mark"></a>请求限流</h3><p>限流使用了<code>golang.org/x/time/rate</code>提供的令牌桶算法，以应对突发流量，可以对单个IP以及Server层面实现请求控制。</p>
<p>需要特别注意的是限流应当区别长连接与短连接，比如<code>Weave</code>中实现了容器<code>exec</code>接口，通过Websocket登录到容器，不应该影响其他正常请求。</p>
<h3 id="从零开发前端" class="headerLink">
    <a href="#%e4%bb%8e%e9%9b%b6%e5%bc%80%e5%8f%91%e5%89%8d%e7%ab%af" class="header-mark"></a>从零开发前端</h3><p>前端而言完全是毫无经验，选用了<code>Vue3</code>，主要是文档比较全面适合新手。UI基于了<code>ElementPlus</code>，目前还是Beta版本，使用过程了也遇到了一些Bug，生产过程中不建议用，无奈的是目前<code>Vue3</code>好像也没有比较成熟的UI库。</p>
<p>Vue文档以及示例很详细，上手也挺快。主要是CCS不熟悉，调整样式上花了不少功夫，后来引入了<a href="https://windicss.org/" target="_blank" rel="noopener noreffer">WindiCSS</a>, 只编写了少量的样式，其他全部依赖WindiCSS实现。其他路由、请求、图表参考对应的文档实现起来也很容易。</p>
<p>搭建了一个比较完整的管理平台，自己还是挺满意的，后面会不断优化，加一些其他特性。</p>
<h2 id="运行" class="headerLink">
    <a href="#%e8%bf%90%e8%a1%8c" class="header-mark"></a>运行</h2><p>后端本地运行，需要依赖Docker，Makefile文件只在Linux下有效，其他平台请自行尝试</p>
<ol>
<li>安装数据库postgres与redis，初始化库</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make init
</span></span></code></pre></div><ol start="2">
<li>本地运行</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make run
</span></span></code></pre></div><p>前端使用<code>vite</code>编译</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> web
</span></span><span class="line"><span class="cl">npm i
</span></span><span class="line"><span class="cl">npm run dev
</span></span></code></pre></div><p>更多见<a href="https://github.com/qingwave/weave#readme" target="_blank" rel="noopener noreffer">ReadMe</a></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文总结了<code>Weave</code>的架构与特性，以及开发过程中遇到的一些问题，从零开始实现一个完整的前后端Web应用，其他功能后面会不断优化。</p>
<p>项目链接见</p>
<ul>
<li><a href="https://github.com/qingwave/weave" target="_blank" rel="noopener noreffer">https://github.com/qingwave/weave</a></li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item></channel>
</rss>
