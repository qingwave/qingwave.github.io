<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>cadvisor - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/cadvisor/</link>
        <description>cadvisor - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Thu, 15 Nov 2018 12:42:15 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/tags/cadvisor/" rel="self" type="application/rss+xml" /><item>
    <title>Pod memory usage in k8s</title>
    <link>https://qingwave.github.io/pod-memory-usage-in-k8s/</link>
    <pubDate>Thu, 15 Nov 2018 12:42:15 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/pod-memory-usage-in-k8s/</guid>
    <description><![CDATA[<h2 id="cadvisor内存使用率指标" class="headerLink">
    <a href="#cadvisor%e5%86%85%e5%ad%98%e4%bd%bf%e7%94%a8%e7%8e%87%e6%8c%87%e6%a0%87" class="header-mark"></a>Cadvisor内存使用率指标</h2><h3 id="cadvisor中有关pod内存使用率的指标" class="headerLink">
    <a href="#cadvisor%e4%b8%ad%e6%9c%89%e5%85%b3pod%e5%86%85%e5%ad%98%e4%bd%bf%e7%94%a8%e7%8e%87%e7%9a%84%e6%8c%87%e6%a0%87" class="header-mark"></a>Cadvisor中有关pod内存使用率的指标</h3><table>
<thead>
<tr>
<th>指标</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>container_memory_cache</td>
<td>Number of bytes of page cache memory.</td>
</tr>
<tr>
<td>container_memory_rss</td>
<td>Size of RSS in bytes.(包括匿名映射页和交换区缓存)</td>
</tr>
<tr>
<td>container_memory_swap</td>
<td>Container swap usage in bytes.</td>
</tr>
<tr>
<td>container_memory_usage_bytes</td>
<td>Current memory usage in bytes,including all memory regardless ofwhen it was accessed. (包括 cache, rss, swap等)</td>
</tr>
<tr>
<td>container_memory_max_usage_bytes</td>
<td>Maximum memory usage recorded in bytes.</td>
</tr>
<tr>
<td>container_memory_working_set_bytes</td>
<td>Current working set in bytes. （工作区内存使用量=活跃的匿名与和缓存,以及file-baked页 &lt;=container_memory_usage_bytes）</td>
</tr>
<tr>
<td>container_memory_failcnt</td>
<td>Number of memory usage hits limits.</td>
</tr>
<tr>
<td>container_memory_failures_total</td>
<td>Cumulative count of memory allocation failures.</td>
</tr>
<tr>
<td>其中</td>
<td></td>
</tr>
<tr>
<td><code>container_memory_max_usage_bytes &gt; container_memory_usage_bytes &gt;= container_memory_working_set_bytes &gt; container_memory_rss</code></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="cadvisor中相关定义" class="headerLink">
    <a href="#cadvisor%e4%b8%ad%e7%9b%b8%e5%85%b3%e5%ae%9a%e4%b9%89" class="header-mark"></a>Cadvisor中相关定义</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">type MemoryStats struct { // Current memory usage, this includes all memory regardless of when it was // accessed. // Units: Bytes. Usage uint64 json:&#34;usage&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">// Maximum memory usage recorded.
</span></span><span class="line"><span class="cl">	// Units: Bytes.
</span></span><span class="line"><span class="cl">	MaxUsage uint64 `json:&#34;max_usage&#34;`
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	// Number of bytes of page cache memory.
</span></span><span class="line"><span class="cl">	// Units: Bytes.
</span></span><span class="line"><span class="cl">	Cache uint64 `json:&#34;cache&#34;`
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	// The amount of anonymous and swap cache memory (includes transparent
</span></span><span class="line"><span class="cl">	// hugepages).
</span></span><span class="line"><span class="cl">	// Units: Bytes.
</span></span><span class="line"><span class="cl">	RSS uint64 `json:&#34;rss&#34;`
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	// The amount of swap currently used by the processes in this cgroup
</span></span><span class="line"><span class="cl">	// Units: Bytes.
</span></span><span class="line"><span class="cl">	Swap uint64 `json:&#34;swap&#34;`
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	// The amount of working set memory, this includes recently accessed memory,
</span></span><span class="line"><span class="cl">	// dirty memory, and kernel memory. Working set is &lt;= &#34;usage&#34;.
</span></span><span class="line"><span class="cl">	// Units: Bytes.
</span></span><span class="line"><span class="cl">	WorkingSet uint64 `json:&#34;working_set&#34;`
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	Failcnt uint64 `json:&#34;failcnt&#34;`
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	ContainerData    MemoryStatsMemoryData `json:&#34;container_data,omitempty&#34;`
</span></span><span class="line"><span class="cl">	HierarchicalData MemoryStatsMemoryData `json:&#34;hierarchical_data,omitempty&#34;`
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><blockquote>
<p>You might think that memory utilization is easily tracked with container_memory_usage_bytes, however, this metric also includes cached (think filesystem cache) items that can be evicted under memory pressure. The better metric is container_memory_working_set_bytes as this is what the OOM killer is watching for.
To calculate container memory utilization we use: sum(container_memory_working_set_bytes{name!~&ldquo;POD&rdquo;}) by (name)</p>
</blockquote>
<p>kubelet 通过 watch container_memory_working_set_bytes 来判断是否OOM， 所以用 working set来评价容器内存使用量更科学</p>
<h2 id="cgroup中关于mem指标" class="headerLink">
    <a href="#cgroup%e4%b8%ad%e5%85%b3%e4%ba%8emem%e6%8c%87%e6%a0%87" class="header-mark"></a>Cgroup中关于mem指标</h2><p>cgroup目录相关文件</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th>说明</th>
<th>cadvisor中对应指标</th>
</tr>
</thead>
<tbody>
<tr>
<td>memory.usage_in_bytes</td>
<td>已使用的内存量(包含cache和buffer)(字节)，相当于linux的used_meme</td>
<td>container_memory_usage_bytes</td>
</tr>
<tr>
<td>memory.limit_in_bytes</td>
<td>限制的内存总量(字节)，相当于linux的total_mem</td>
<td></td>
</tr>
<tr>
<td>memory.failcnt</td>
<td>申请内存失败次数计数</td>
<td></td>
</tr>
<tr>
<td>memory.memsw.usage_in_bytes</td>
<td>已使用的内存和swap(字节)</td>
<td></td>
</tr>
<tr>
<td>memory.memsw.limit_in_bytes</td>
<td>限制的内存和swap容量(字节)</td>
<td></td>
</tr>
<tr>
<td>memory.memsw.failcnt</td>
<td>申请内存和swap失败次数计数</td>
<td></td>
</tr>
<tr>
<td>memory.stat</td>
<td>内存相关状态</td>
<td></td>
</tr>
</tbody>
</table>
<p>memory.stat中包含有的内存信息</p>
<table>
<thead>
<tr>
<th>统计</th>
<th>描述</th>
<th>cadvisor中对应指标</th>
</tr>
</thead>
<tbody>
<tr>
<td>cache</td>
<td>页缓存，包括 tmpfs（shmem），单位为字节</td>
<td>container_memory_cache</td>
</tr>
<tr>
<td>rss</td>
<td>匿名和 swap 缓存，不包括 tmpfs（shmem），单位为字节</td>
<td>container_memory_rss</td>
</tr>
<tr>
<td>mapped_file</td>
<td>memory-mapped 映射的文件大小，包括 tmpfs（shmem），单位为字节</td>
<td></td>
</tr>
<tr>
<td>pgpgin</td>
<td>存入内存中的页数</td>
<td></td>
</tr>
<tr>
<td>pgpgout</td>
<td>从内存中读出的页数</td>
<td></td>
</tr>
<tr>
<td>swap</td>
<td>swap 用量，单位为字节</td>
<td>container_memory_swap</td>
</tr>
<tr>
<td>active_anon</td>
<td>在活跃的最近最少使用（least-recently-used，LRU）列表中的匿名和 swap 缓存，包括 tmpfs（shmem），单位为字节</td>
<td></td>
</tr>
<tr>
<td>inactive_anon</td>
<td>不活跃的 LRU 列表中的匿名和 swap 缓存，包括 tmpfs（shmem），单位为字节</td>
<td></td>
</tr>
<tr>
<td>active_file</td>
<td>活跃 LRU 列表中的 file-backed 内存，以字节为单位</td>
<td></td>
</tr>
<tr>
<td>inactive_file</td>
<td>不活跃 LRU 列表中的 file-backed 内存，以字节为单位</td>
<td></td>
</tr>
<tr>
<td>unevictable</td>
<td>无法再生的内存，以字节为单位</td>
<td></td>
</tr>
<tr>
<td>hierarchical_memory_limit</td>
<td>包含 memory cgroup 的层级的内存限制，单位为字节</td>
<td></td>
</tr>
<tr>
<td>hierarchical_memsw_limit</td>
<td>包含 memory cgroup 的层级的内存加 swap 限制，单位为字节</td>
<td></td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">active_anon + inactive_anon = anonymous memory + file cache for tmpfs + swap cache = rss + file cache for tmpfs 
</span></span><span class="line"><span class="cl">active_file + inactive_file = cache - size of tmpfs
</span></span><span class="line"><span class="cl">working set = usage - total_inactive(k8s根据workingset 来判断是否驱逐pod)
</span></span></code></pre></div><p>mstat看到的active/inactive memory就分别是active list和inactive list中的内存大小。如果inactive list很大，表明在必要时可以回收的页面很多；而如果inactive list很小，说明可以回收的页面不多。
Active/inactive memory是针对用户进程所占用的内存而言的，内核占用的内存（包括slab）不在其中。
至于在源代码中看到的ACTIVE_ANON和ACTIVE_FILE，分别表示anonymous pages和file-backed pages。用户进程的内存页分为两种：与文件关联的内存（比如程序文件、数据文件所对应的内存页）和与文件无关的内存（比如进程的堆栈，用malloc申请的内存），前者称为file-backed pages，后者称为anonymous pages。File-backed pages在发生换页(page-in或page-out)时，是从它对应的文件读入或写出；anonymous pages在发生换页时，是对交换区进行读/写操作。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://blog.freshtracks.io/a-deep-dive-into-kubernetes-metrics-part-3-container-resource-metrics-361c5ee46e66" target="_blank" rel="noopener noreffer">https://blog.freshtracks.io/a-deep-dive-into-kubernetes-metrics-part-3-container-resource-metrics-361c5ee46e66</a></li>
<li><a href="https://github.com/google/cadvisor/blob/08f0c2397cbca790a4db0f1212cb592cc88f6e26/info/v1/container.go#L338:6" target="_blank" rel="noopener noreffer">https://github.com/google/cadvisor/blob/08f0c2397cbca790a4db0f1212cb592cc88f6e26/info/v1/container.go#L338:6</a></li>
</ul>
]]></description>
</item></channel>
</rss>
