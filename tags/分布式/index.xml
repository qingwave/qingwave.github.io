<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>分布式 - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
        <description>分布式 - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Fri, 30 Sep 2022 10:37:17 &#43;0800</lastBuildDate><atom:link href="https://qingwave.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>如何实现零宕机的配置热加载</title>
    <link>https://qingwave.github.io/config-reload/</link>
    <pubDate>Fri, 30 Sep 2022 10:37:17 &#43;0800</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/config-reload/</guid>
    <description><![CDATA[<p>对于高可用的服务，为了保证服务可用性，更新配置时必然不能直接停止服务，可以使用配置热加载来避免服务暂停，不需要重启服务。</p>
<p>配置的热加载可以分为两个场景，手动更新与自动更新。</p>
<h2 id="手动更新" class="headerLink">
    <a href="#%e6%89%8b%e5%8a%a8%e6%9b%b4%e6%96%b0" class="header-mark"></a>手动更新</h2><p>对于一些临时调试，服务数量不多的情况下，可以进行手动更新配置。需要实现两点，如何触发更新，以及接受到更新后如何操作。</p>
<p>触发更新的手段很多，常见的有</p>
<ul>
<li>通过命令行，例如<code>nginx -s reload</code></li>
<li>通过信号，通常是SIGHUP，比如sshd、Prometheus等，其实Nginx的热加载内部也是调用SIGHUP信号</li>
<li>HTTP接口，例如Prometheus也支持HTTP的方式通过<code>curl -X POST :9090/-/reload</code>可以重新加载配置</li>
<li>RPC接口，类似HTTP</li>
</ul>
<p>接受到配置更新通知后，需要程序内部来重新加载配置，类似初始化过程，但要注意运行时可以要加锁来保证线程安全。</p>
<h2 id="自动更新" class="headerLink">
    <a href="#%e8%87%aa%e5%8a%a8%e6%9b%b4%e6%96%b0" class="header-mark"></a>自动更新</h2><p>自动更新是建立手动更新的基础上，首先服务要提供手动更新的方法，其次可以通过服务本身或者外部进程来自动调用配置更新接口，外部程序可以使用SideCar的形式与服务绑定。</p>
<p>自动加载配置的关键是如何感知配置变化，要考虑到单机环境与分布式环境。</p>
<h3 id="单机环境" class="headerLink">
    <a href="#%e5%8d%95%e6%9c%ba%e7%8e%af%e5%a2%83" class="header-mark"></a>单机环境</h3><p>Linux提供了<a href="https://man7.org/linux/man-pages/man7/inotify.7.html" target="_blank" rel="noopener noreffer">inotify</a>接口，可以用来监听文件或者目录的增上改查事件。我们可以使用inotify来监听配置变化，如果有更新则调用更新接口来实现热加载。其他平台也提供了类似的接口。</p>
<p>在Golang中<a href="https://github.com/fsnotify/fsnotify" target="_blank" rel="noopener noreffer">fsnotify</a>提供了跨平台的文件监听接口，可以方便的监听文件，使用方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">    <span class="nx">watcher</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">fsnotify</span><span class="p">.</span><span class="nf">NewWatcher</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">watcher</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 监听目录或者文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">watcher</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;/tmp&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取监听事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">watcher</span><span class="p">.</span><span class="nx">Events</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;event:&#34;</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nx">event</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">fsnotify</span><span class="p">.</span><span class="nx">Write</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;modified file:&#34;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// 进行更新操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">watcher</span><span class="p">.</span><span class="nx">Errors</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;error:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}()</span>
</span></span></code></pre></div><h3 id="分布式环境" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e7%8e%af%e5%a2%83" class="header-mark"></a>分布式环境</h3><p>在分布式环境中实现配置热更新，需要能够感知配置（本地或者远端），对于本地配置需要平台配合将远端配置同步到本地（比如kubernetes会同步ConfigMap到Pod中），然后按照单机环境的方式来监听文件变化。</p>
<p>对于远端配置，需要依赖额外的分布式配置中心，比如Apollo、etcd、ZooKeeper等。以etcd为例，etcd提供了watch接口，可以监听对应配置的变化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 获取watch Channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">ch</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 处理事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">wr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;watch closed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wr</span><span class="p">.</span><span class="nx">Events</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">key</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">),</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">PUT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// 更新处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// 1. 对比配置是否变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// 2. 变化了更新内存中的配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">DELETE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// 删除处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></div><p>为了实现配置更新通知，通常有两种方式，Pull与Push。</p>
<ul>
<li>Pull就是客户端轮询，定期查询配置是否更新，这种方式实现简单，对服务器压力小，但时效性低</li>
<li>Push由服务端实现，通过维护一个长连接，实时推送数据，这种方式时效性高，但逻辑更复杂，连接过多会影响服务端性能。目前etcd v3版本是通过HTTP2来实现实时数据推送</li>
</ul>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文主要总结实现配置热更新的多种方式，手动更新可以通过Socket、信号等进程间通信手段来通知服务，自动更新可以通过inotify来感知配置变化，在分布式环境中就需要配合分布式配置中心来进行热更新。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang分布式应用之ZooKeeper</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-zk/</link>
    <pubDate>Mon, 08 Aug 2022 08:48:26 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-zk/</guid>
    <description><![CDATA[<p>ZooKeeper是Apache下一个开源项目，提供分布式配置、同步服务以及命名注册等，是一个高可靠的分布式协调系统。</p>
<p>其应用场景与etcd类似，可以使用在</p>
<ul>
<li>服务发现</li>
<li>分布式锁</li>
<li>选主</li>
<li>分布式队列</li>
<li>分布式系统协调</li>
<li>负载均衡</li>
</ul>
<p>如在Hadooop、Kafka中将ZooKeeper作为核心组件。本文结合Golang来编写对应的中间件，所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></p>
<h2 id="服务注册" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c" class="header-mark"></a>服务注册</h2><p>服务注册主要细节在<a href="/golang-distributed-system-x-etcd" rel="">etcd</a>中已提及，主要来解决分布式环境中服务注册注销与状态感知，包括：</p>
<ul>
<li>服务注册、注销</li>
<li>服务宕机或异常时，自动注销</li>
<li>感知服务端点变化</li>
</ul>
<p>借助zk实现服务发现:</p>
<ul>
<li>可以通过将端点写同一个目录(相同前缀，如/services/job/endpoint1, /services/job/endpoint2)，写入临时节点，如果服务宕机，Session过期对应端点会自动删除</li>
<li>通过Watch API可以监听端点变化</li>
</ul>
<p>核心代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 注册，1表示临时节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">ZkDiscovery</span><span class="p">)</span> <span class="nf">Register</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">conn</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Val</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">ACL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">ErrNodeExists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 注销，直接删除对应Key即可
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">ZkDiscovery</span><span class="p">)</span> <span class="nf">UnRegister</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">conn</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">ErrNoNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>服务监听通过zk Watch接口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">ZkDiscovery</span><span class="p">)</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">watchCancel</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取最新列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">refreshServices</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStartedDiscovering</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStartedDiscovering</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nf">ListServices</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">d</span><span class="p">.</span><span class="nf">watchCancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStoppedDiscovering</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStoppedDiscovering</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">loop</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加节点变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">children</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ch</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">conn</span><span class="p">.</span><span class="nf">ChildrenW</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">d</span><span class="p">.</span><span class="nf">setServices</span><span class="p">(</span><span class="nx">containerx</span><span class="p">.</span><span class="nf">NewSet</span><span class="p">(</span><span class="nx">children</span><span class="o">...</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// zk 是一个一次性触发器，收到事件后需要重新watch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">goto</span> <span class="nx">loop</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 当子节点变化时，获取最新服务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">switch</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">EventNodeCreated</span><span class="p">,</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">EventNodeChildrenChanged</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">d</span><span class="p">.</span><span class="nf">refreshServices</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">switch</span> <span class="nx">e</span><span class="p">.</span><span class="nx">State</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">StateExpired</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;node [%s] expired&#34;</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">zk</span><span class="p">.</span><span class="nx">StateDisconnected</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnServiceChanged</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnServiceChanged</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nf">ListServices</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过worker模拟不同的端点，测试代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">run</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;10.0.0.%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">val</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;10.0.0.%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">sd</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">zkdiscovery</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">zkdiscovery</span><span class="p">.</span><span class="nx">ZkDiscoveryConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Endpoints</span><span class="p">:</span>      <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;127.0.0.1&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Path</span><span class="p">:</span>           <span class="s">&#34;/zk/services&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">SessionTimeout</span><span class="p">:</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Key</span><span class="p">:</span>            <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Val</span><span class="p">:</span>            <span class="nx">val</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">zkdiscovery</span><span class="p">.</span><span class="nx">DiscoveryCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStartedDiscovering</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">services</span> <span class="p">[]</span><span class="nx">zkdiscovery</span><span class="p">.</span><span class="nx">Service</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s] onstarted, services: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">services</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStoppedDiscovering</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s] onstoped&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnServiceChanged</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">services</span> <span class="p">[]</span><span class="nx">zkdiscovery</span><span class="p">.</span><span class="nx">Service</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s] onchanged, services: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">services</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create service discovery: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">run</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">UnRegister</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to unregister service [%s]: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to register service [%s]: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s] failed to watch service: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">NewGroup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Go</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">worker</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// unregister
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">worker</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// wg.Wait()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过结果可以看到服务能够正常注册注销，而且可以监听到节点变化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/08/09 03:01:29 connected to 127.0.0.1:2181
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 connected to 127.0.0.1:2181
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 connected to 127.0.0.1:2181
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 authenticated: <span class="nv">id</span><span class="o">=</span>72787622169739423, <span class="nv">timeout</span><span class="o">=</span><span class="m">4000</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 re-submitting <span class="sb">`</span>0<span class="sb">`</span> credentials after reconnect
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 authenticated: <span class="nv">id</span><span class="o">=</span>72787622169739424, <span class="nv">timeout</span><span class="o">=</span><span class="m">4000</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 authenticated: <span class="nv">id</span><span class="o">=</span>72787622169739425, <span class="nv">timeout</span><span class="o">=</span><span class="m">4000</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 re-submitting <span class="sb">`</span>0<span class="sb">`</span> credentials after reconnect
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 re-submitting <span class="sb">`</span>0<span class="sb">`</span> credentials after reconnect
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 <span class="o">[</span>10.0.0.2<span class="o">]</span> onstarted, services: <span class="o">[{</span>10.0.0.1 <span class="o">}</span> <span class="o">{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 <span class="o">[</span>10.0.0.0<span class="o">]</span> onstarted, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.1 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:29 <span class="o">[</span>10.0.0.1<span class="o">]</span> onstarted, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.1 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 connected to 127.0.0.1:2181
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 authenticated: <span class="nv">id</span><span class="o">=</span>72787622169739426, <span class="nv">timeout</span><span class="o">=</span><span class="m">4000</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 re-submitting <span class="sb">`</span>0<span class="sb">`</span> credentials after reconnect
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 <span class="o">[</span>10.0.0.0<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.1 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 <span class="o">[</span>10.0.0.1<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.3 <span class="o">}</span> <span class="o">{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.1 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 <span class="o">[</span>10.0.0.2<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.1 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:31 <span class="o">[</span>10.0.0.3<span class="o">]</span> onstarted, services: <span class="o">[{</span>10.0.0.1 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}</span> <span class="o">{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 connected to 127.0.0.1:2181
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 authenticated: <span class="nv">id</span><span class="o">=</span>72787622169739427, <span class="nv">timeout</span><span class="o">=</span><span class="m">4000</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 re-submitting <span class="sb">`</span>0<span class="sb">`</span> credentials after reconnect
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 <span class="o">[</span>10.0.0.3<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 <span class="o">[</span>10.0.0.2<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 <span class="o">[</span>10.0.0.0<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.3 <span class="o">}</span> <span class="o">{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 <span class="o">[</span>10.0.0.1<span class="o">]</span> onchanged, services: <span class="o">[{</span>10.0.0.0 <span class="o">}</span> <span class="o">{</span>10.0.0.2 <span class="o">}</span> <span class="o">{</span>10.0.0.3 <span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 recv loop terminated: EOF
</span></span><span class="line"><span class="cl">2022/08/09 03:01:33 send loop terminated: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/08/09 03:01:34 <span class="o">[</span>10.0.0.3<span class="o">]</span> onstoped
</span></span><span class="line"><span class="cl">2022/08/09 03:01:34 <span class="o">[</span>10.0.0.0<span class="o">]</span> onstoped
</span></span><span class="line"><span class="cl">2022/08/09 03:01:34 <span class="o">[</span>10.0.0.2<span class="o">]</span> onstoped
</span></span><span class="line"><span class="cl">2022/08/09 03:01:34 <span class="o">[</span>10.0.0.1<span class="o">]</span> onstoped
</span></span></code></pre></div><h2 id="分布式锁" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81" class="header-mark"></a>分布式锁</h2><p>在包<a href="https://github.com/go-zookeeper/zk" target="_blank" rel="noopener noreffer">github.com/go-zookeeper/zk</a>中已经实现了分布式锁，主要借助了ZooKeeper的临时节点的功能</p>
<ul>
<li>加锁时，创建临时节点（client与zk server会保持长链接，链接中断则创建的临时数据会被删除）</li>
<li>解锁时，直接删除节点即可</li>
</ul>
<p>主要来看加锁过程</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">Lock</span><span class="p">)</span> <span class="nf">LockWithData</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">l</span><span class="p">.</span><span class="nx">lockPath</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ErrDeadlock</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">prefix</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s/lock-&#34;</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">path</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 重试3次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 创建临时顺序节点，同名节点会加序列号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">path</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">CreateProtectedEphemeralSequential</span><span class="p">(</span><span class="nx">prefix</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nx">acl</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">ErrNoNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Create parent node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">parts</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pth</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="kd">var</span> <span class="nx">exists</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">				<span class="nx">pth</span> <span class="o">+=</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">p</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 父路径不存在，创建父节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">exists</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">Exists</span><span class="p">(</span><span class="nx">pth</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">exists</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">pth</span><span class="p">,</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">{},</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nx">acl</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">ErrNodeExists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 解析序列号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">seq</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">parseSeq</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取lock下所有子节点，根据序列号判断是否获得锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">children</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">Children</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span>        
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">lowestSeq</span> <span class="o">:=</span> <span class="nx">seq</span>
</span></span><span class="line"><span class="cl">		<span class="nx">prevSeq</span> <span class="o">:=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="nx">prevSeqPath</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">children</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">s</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">parseSeq</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">s</span> <span class="p">&lt;</span> <span class="nx">lowestSeq</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">lowestSeq</span> <span class="p">=</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取此节点前一个序列号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">s</span> <span class="p">&lt;</span> <span class="nx">seq</span> <span class="o">&amp;&amp;</span> <span class="nx">s</span> <span class="p">&gt;</span> <span class="nx">prevSeq</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">prevSeq</span> <span class="p">=</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl">				<span class="nx">prevSeqPath</span> <span class="p">=</span> <span class="nx">p</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果当前节点序列号最低，则获取到锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">seq</span> <span class="o">==</span> <span class="nx">lowestSeq</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Acquired the lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 否则等待节点删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ch</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">GetW</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">path</span> <span class="o">+</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">prevSeqPath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">ErrNoNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">ErrNoNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// try again
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">ev</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">l</span><span class="p">.</span><span class="nx">seq</span> <span class="p">=</span> <span class="nx">seq</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l</span><span class="p">.</span><span class="nx">lockPath</span> <span class="p">=</span> <span class="nx">path</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要逻辑如下：</p>
<ol>
<li>创建临时顺序节点</li>
<li>如果父节点不存在，则创建父节点</li>
<li>获取lock下所有子节点序列号</li>
<li>如果当前节点序列号最小，则获得锁</li>
<li>否则，等待前一个删除，直到获取锁</li>
</ol>
<p>对比etcd的实现，大体思路基本一致，主要差异点在于</p>
<ul>
<li>TTL实现：etcd通过Lease的实现TTL，获取锁后不断刷新Lease; zk通过Session来实现TTL，Session中止会自动清楚临时节点</li>
<li>顺序获取锁：etcd通过Revision来实现；zk则通过临时顺序节点</li>
</ul>
<h2 id="对比etcd" class="headerLink">
    <a href="#%e5%af%b9%e6%af%94etcd" class="header-mark"></a>对比etcd</h2><p>ZooKeeper与etcd的使用场景高度重合，可以项目替代，主要区别有以下几点</p>
<table>
<thead>
<tr>
<th>对比项</th>
<th>ZooKeeper</th>
<th>etcd</th>
</tr>
</thead>
<tbody>
<tr>
<td>一致性协议</td>
<td>zab</td>
<td>raft</td>
</tr>
<tr>
<td>健康检查</td>
<td>基于Session</td>
<td>心跳，Lease刷新</td>
</tr>
<tr>
<td>Watch</td>
<td>一次性触发器、只能添加子节点创建、删除，事件不包含数据</td>
<td>可以添加前缀、Range、子节点变化</td>
</tr>
<tr>
<td>多版本控制</td>
<td>不支持</td>
<td>支持，所有Key含有Revision</td>
</tr>
</tbody>
</table>
<p>etcd作为后期之秀，在功能上更丰富，新项目可以优先尝试使用etcd作为其分布式协调引擎。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文分析了ZooKeeper在分布式锁、服务发现等场景上的实现方式，并对比了与etcd的差异点。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a>，欢迎批评指正。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang分布式应用之etcd</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-etcd/</link>
    <pubDate>Sun, 07 Aug 2022 17:48:18 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-etcd/</guid>
    <description><![CDATA[<p>etcd是一个可靠的分布式KV存储数据库，由CoreOS开源。Kuberentes使用etcd作为其存储引擎，随着云原生的火热，etcd也逐渐广泛应用起来。</p>
<p>etcd除了作为普通的KV存储、配置存储，还可以用在以下分布式场景中：</p>
<ul>
<li>服务发现</li>
<li>分布式锁</li>
<li>选主</li>
<li>分布式队列</li>
<li>分布式系统协调</li>
<li>负载均衡</li>
</ul>
<p>本文结合Golang来编写对应的中间件，所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></p>
<h2 id="服务发现" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0" class="header-mark"></a>服务发现</h2><p>在分布式系统中，如何能找到所需要访问的服务即服务发现。服务较少时可以直接访问其IP，但随着业务规模的扩大，维护其地址越来越复杂，如果服务频繁的扩缩容，必须能够实时感应服务的断点变化。
通常有多种方式可以解决</p>
<ol>
<li>系统级别，如LVS、DNS、Kubernetes中的Service、Istio等</li>
<li>微服务注册中心，如Spring Cloud中的Enruka，Dubbo等</li>
<li>借助分布式协调系统etcd、ZK、Consul等</li>
</ol>
<p>服务发现提供的功能包括：</p>
<ul>
<li>服务注册、注销</li>
<li>服务宕机或异常时，自动注销</li>
<li>感知服务端点变化</li>
</ul>
<p>借助etcd实现服务发现</p>
<ul>
<li>可以通过将端点写同一个目录(相同前缀，如/services/job/endpoint1, /services/job/endpoint2)，并通过Lease设置一个过期时间，不断刷新Lease，如果服务宕机，Lease过期对应端点会自动删除</li>
<li>通过Watch API可以监听端点变化</li>
</ul>
<p>主要代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="nx">EtcdDiscoveryConfig</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建session，session会自动续约
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">WithTTL</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">TTLSeconds</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSuffix</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#34;/&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">EtcdDiscovery</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EtcdDiscoveryConfig</span><span class="p">:</span> <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">session</span><span class="p">:</span>             <span class="nx">session</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">myKey</span><span class="p">:</span>               <span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">services</span><span class="p">:</span>            <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">)</span> <span class="nf">Register</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lease</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nf">Lease</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注册服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">lease</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">)</span> <span class="nf">UnRegister</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注销服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 监听端点变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">)</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// context用来停止监听
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">watchCancel</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 首先获取所有端点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">services</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">kv</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Kvs</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">services</span><span class="p">[</span><span class="nb">string</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">)]</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d</span><span class="p">.</span><span class="nf">setServices</span><span class="p">(</span><span class="nx">services</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 回调点，用户可自定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStartedDiscovering</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStartedDiscovering</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nf">ListServices</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStoppedDiscovering</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStoppedDiscovering</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">d</span><span class="p">.</span><span class="nf">watchCancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 监听目录，通过WithPrefix可以添加子目录变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">wr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;watch closed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 将添加事件同步到本地端点列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wr</span><span class="p">.</span><span class="nx">Events</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">key</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">),</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">PUT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">d</span><span class="p">.</span><span class="nf">addService</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">DELETE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">d</span><span class="p">.</span><span class="nf">delService</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnServiceChanged</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">event</span> <span class="o">:=</span> <span class="nx">DiscoveryEvent</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">Event_EventType_name</span><span class="p">[</span><span class="nb">int32</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span><span class="p">)],</span> <span class="nx">Service</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nf">serviceFromKv</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">					<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnServiceChanged</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nf">ListServices</span><span class="p">(),</span> <span class="nx">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要实现逻辑如下：</p>
<ol>
<li>创建Session， Session中Lease会自动续约</li>
<li>服务注册时，在目录下创建对应的子目录，并附带Lease</li>
<li>通过Watch接口监听目录变化，同步到本地</li>
</ol>
<p>简单测试下，通过worker模拟不同的端点</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">clientv3</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Endpoints</span><span class="p">:</span>   <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;localhost:2379&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DialTimeout</span><span class="p">:</span> <span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create etcd lock: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">run</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;worker-%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">val</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;10.0.0.%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">sd</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">etcdiscovery</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">EtcdDiscoveryConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Client</span><span class="p">:</span>     <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Prefix</span><span class="p">:</span>     <span class="s">&#34;/services&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Key</span><span class="p">:</span>        <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Val</span><span class="p">:</span>        <span class="nx">val</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">TTLSeconds</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">DiscoveryCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStartedDiscovering</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">services</span> <span class="p">[]</span><span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">Service</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s], onstarted, services: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">services</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStoppedDiscovering</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s], onstoped&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnServiceChanged</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">services</span> <span class="p">[]</span><span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">Service</span><span class="p">,</span> <span class="nx">event</span> <span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">DiscoveryEvent</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s], onchanged, services: %v, event: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">services</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create service etcdiscovery: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">run</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">UnRegister</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to unregister service [%s]: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to register service [%s]: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to watch service: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">NewGroup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Go</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">worker</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// unregister
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">worker</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过结果可以看到，服务可以正常的注册注销，并能实时监听端点变化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/08/08 08:44:02 <span class="o">[</span>worker-1<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:02 <span class="o">[</span>worker-2<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:02 <span class="o">[</span>worker-0<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-2<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>PUT <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-1<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>PUT <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-0<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}</span> <span class="o">{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}]</span>, event: <span class="o">{</span>PUT <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-3<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-1<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-3<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}</span> <span class="o">{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-0<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-2<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span></code></pre></div><h2 id="分布式锁" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81" class="header-mark"></a>分布式锁</h2><p>在ECTD官方库<a href="https://pkg.go.dev/go.etcd.io/etcd/client/v3/concurrency" target="_blank" rel="noopener noreffer">go.etcd.io/etcd/client/v3/concurrency</a>中，已经支持分布式锁。</p>
<p>主要原理与之前通过<a href="/golang-distributed-system-x-redis" rel="">Redis</a>实现的分布式锁类似，如果目录创建成功则加锁成功，解锁直接删除即可。</p>
<p>etcd锁的使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 创建session并不断刷新
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">WithTTL</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">mutex</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewMutex</span><span class="p">(</span><span class="nx">session</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">defer</span> <span class="nx">mutext</span><span class="p">.</span><span class="nf">UnLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">do</span><span class="p">()</span><span class="o">...</span><span class="p">.</span>
</span></span></code></pre></div><p>加锁的核心逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Mutex</span><span class="p">)</span> <span class="nf">tryAcquire</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">v3</span><span class="p">.</span><span class="nx">TxnResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">s</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">s</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s%x&#34;</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">pfx</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cmp</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">Compare</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">CreateRevision</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">),</span> <span class="s">&#34;=&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// put self in lock waiters via myKey; oldest waiter holds lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">put</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">OpPut</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// reuse key in case this session already holds the lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">get</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">OpGet</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// fetch current holder to complete uncontended path with only one RPC
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">getOwner</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">OpGet</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">pfx</span><span class="p">,</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">WithFirstCreate</span><span class="p">()</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Txn</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nf">If</span><span class="p">(</span><span class="nx">cmp</span><span class="p">).</span><span class="nf">Then</span><span class="p">(</span><span class="nx">put</span><span class="p">,</span> <span class="nx">getOwner</span><span class="p">).</span><span class="nf">Else</span><span class="p">(</span><span class="nx">get</span><span class="p">,</span> <span class="nx">getOwner</span><span class="p">).</span><span class="nf">Commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Revision</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Succeeded</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Responses</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">GetResponseRange</span><span class="p">().</span><span class="nx">Kvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">CreateRevision</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">resp</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>tryAcquire通过事务来执行加锁逻辑:</p>
<ol>
<li>判断当前Key是否为空，即代码中Revision为0</li>
<li>如果为空，使用Put设置并附加Lease</li>
<li>如果不为空，获取当前锁的所有者，即最先加锁的对象，避免惊群效应</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Mutex</span><span class="p">)</span> <span class="nf">Lock</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">tryAcquire</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// if no key on prefix / the minimum rev is key, already hold the lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ownerKey</span> <span class="o">:=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Responses</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">GetResponseRange</span><span class="p">().</span><span class="nx">Kvs</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ownerKey</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">ownerKey</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">CreateRevision</span> <span class="o">==</span> <span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">.</span><span class="nx">hdr</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">s</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nf">waitDeletes</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">pfx</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// release lock key if wait failed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">werr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nf">Ctx</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">werr</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// make sure the session is not expired, and the owner key still exists.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gresp</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Lock方法会一直阻塞，直到获取锁返回执行出错:</p>
<ol>
<li>调用tryAcquire</li>
<li>如果已经加锁成功，或者已经加过锁（可重入），则直接返回</li>
<li>调用waitDeletes方法，等待所有小于当前Revsion的Key删除</li>
</ol>
<h2 id="分布式选主" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%80%89%e4%b8%bb" class="header-mark"></a>分布式选主</h2><p>对于有状态的服务，为了提供其服务水平SLA减少宕机时间，通过会有多个副本，当主节点宕机时，副本节点可以快速切换。</p>
<p>通过etcd可以实现选主服务，与分布式比较类似</p>
<ul>
<li>选主成功，不断上报心跳</li>
<li>通过Watch接口，当节点失效时，去竞争主(类似加锁过程)</li>
</ul>
<p>在ECTD官方库<a href="https://pkg.go.dev/go.etcd.io/etcd/client/v3/concurrency" target="_blank" rel="noopener noreffer">go.etcd.io/etcd/client/v3/concurrency</a>中，已经支持了分布式选主。</p>
<p>选主核心逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">Election</span><span class="p">)</span> <span class="nf">Campaign</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">val</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">session</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">k</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s%x&#34;</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">keyPrefix</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">txn</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Txn</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nf">If</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">Compare</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">CreateRevision</span><span class="p">(</span><span class="nx">k</span><span class="p">),</span> <span class="s">&#34;=&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">txn</span> <span class="p">=</span> <span class="nx">txn</span><span class="p">.</span><span class="nf">Then</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">OpPut</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">())))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">txn</span> <span class="p">=</span> <span class="nx">txn</span><span class="p">.</span><span class="nf">Else</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">OpGet</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">txn</span><span class="p">.</span><span class="nf">Commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">leaderKey</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leaderRev</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leaderSession</span> <span class="p">=</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Revision</span><span class="p">,</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Succeeded</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span> <span class="o">:=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Responses</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">GetResponseRange</span><span class="p">().</span><span class="nx">Kvs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="nx">e</span><span class="p">.</span><span class="nx">leaderRev</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">CreateRevision</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">string</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">val</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Proclaim</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">val</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">e</span><span class="p">.</span><span class="nf">Resign</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">waitDeletes</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">keyPrefix</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leaderRev</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// clean up in case of context cancel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="nx">e</span><span class="p">.</span><span class="nf">Resign</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nf">Ctx</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">e</span><span class="p">.</span><span class="nx">leaderSession</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">hdr</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以上逻辑与ECTD锁中的实现非常相似</p>
<ol>
<li>开启事务，首先判断当前服务Key是否存在</li>
<li>不存在，通过Put设置对应值</li>
<li>存在获得当前目录最小Revision的值，即当前主节点</li>
<li>通过waitDeletes，直到当前进程的Revision</li>
</ol>
<p>简单封装下，支持回调，参考了Kubernetes的选主实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="nx">LeaderElectionConfig</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">WithTTL</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">LeaseSeconds</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">election</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewElection</span><span class="p">(</span><span class="nx">session</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">EctdLeaderElection</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionConfig</span><span class="p">:</span> <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">session</span><span class="p">:</span>              <span class="nx">session</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">election</span><span class="p">:</span>             <span class="nx">election</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 运行选主
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStoppedLeading</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加选主变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">le</span><span class="p">.</span><span class="nf">observe</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 开始选主
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">election</span><span class="p">.</span><span class="nf">Campaign</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Identity</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 选主完成，运行OnStarted，运行结束则退出选主
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStartedLeading</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 监听Key变化，执行回调
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">)</span> <span class="nf">observe</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnNewLeader</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">election</span><span class="p">.</span><span class="nf">Observe</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Kvs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">leader</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Kvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">leader</span> <span class="o">!=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Identity</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">go</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnNewLeader</span><span class="p">(</span><span class="nx">leader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">)</span> <span class="nf">Close</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">le</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>测试选主服务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">clientv3</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Endpoints</span><span class="p">:</span>   <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;localhost:2379&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DialTimeout</span><span class="p">:</span> <span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create etcd lock: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">prefix</span> <span class="o">:=</span> <span class="s">&#34;/worker/election&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;worker-%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderElectionConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Client</span><span class="p">:</span>       <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">LeaseSeconds</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Prefix</span><span class="p">:</span>       <span class="nx">prefix</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Identity</span><span class="p">:</span>     <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStartedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnStarted[%s]: acquire new leader&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnStarted[%s]: worker done&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStoppedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnStopped[%s]: exit&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnNewLeader</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">identity</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnNewLeader[%s]: new leader %s&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">identity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create leader election: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">le</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/08/08 09:33:32 OnNewLeader<span class="o">[</span>worker-2<span class="o">]</span>: new leader worker-3
</span></span><span class="line"><span class="cl">2022/08/08 09:33:32 OnNewLeader<span class="o">[</span>worker-1<span class="o">]</span>: new leader worker-3
</span></span><span class="line"><span class="cl">2022/08/08 09:33:32 OnStarted<span class="o">[</span>worker-3<span class="o">]</span>: acquire new leader
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnStarted<span class="o">[</span>worker-3<span class="o">]</span>: worker <span class="k">done</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnStopped<span class="o">[</span>worker-3<span class="o">]</span>: <span class="nb">exit</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnStarted<span class="o">[</span>worker-2<span class="o">]</span>: acquire new leader
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnNewLeader<span class="o">[</span>worker-1<span class="o">]</span>: new leader worker-2
</span></span><span class="line"><span class="cl">2022/08/08 09:34:32 OnStarted<span class="o">[</span>worker-2<span class="o">]</span>: worker <span class="k">done</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:32 OnStopped<span class="o">[</span>worker-2<span class="o">]</span>: <span class="nb">exit</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:32 OnStarted<span class="o">[</span>worker-1<span class="o">]</span>: acquire new leader
</span></span><span class="line"><span class="cl">2022/08/08 09:35:02 OnStarted<span class="o">[</span>worker-1<span class="o">]</span>: worker <span class="k">done</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:35:02 OnStopped<span class="o">[</span>worker-1<span class="o">]</span>: <span class="nb">exit</span>
</span></span></code></pre></div><h2 id="发布订阅" class="headerLink">
    <a href="#%e5%8f%91%e5%b8%83%e8%ae%a2%e9%98%85" class="header-mark"></a>发布订阅</h2><p>借助etcd的前缀查找、Watch的功能，可以实现发布订阅功能，主要逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 发布时，直接通过Put将对象设置在对应Topic路径下，并可以设置Lease，自动删除过时消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ps</span> <span class="o">*</span><span class="nx">EtcdPubSub</span><span class="p">)</span> <span class="nf">Publish</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">topic</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">msg</span> <span class="nx">Msg</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">le</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nx">Lease</span><span class="p">.</span><span class="nf">Grant</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">ps</span><span class="p">.</span><span class="nx">TTLSeconds</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Prefix</span><span class="o">+</span><span class="nx">topic</span><span class="o">+</span><span class="s">&#34;/&#34;</span><span class="o">+</span><span class="nx">msg</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">ID</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 订阅时，通过Watch来监听Topic是否有Put事件，这里忽略Delete事件
</span></span></span><span class="line"><span class="cl"><span class="c1">// Revision为0时，从当前时间点开始监听
</span></span></span><span class="line"><span class="cl"><span class="c1">// Revision为1时，监听Topic创建后的所有事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ps</span> <span class="o">*</span><span class="nx">EtcdPubSub</span><span class="p">)</span> <span class="nf">SubscribeFromRev</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">topic</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">rev</span> <span class="kt">int64</span><span class="p">)</span> <span class="p">(</span><span class="o">&lt;-</span><span class="kd">chan</span> <span class="nx">Msg</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wch</span> <span class="o">:=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Prefix</span><span class="o">+</span><span class="nx">topic</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">(),</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithFilterDelete</span><span class="p">(),</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithRev</span><span class="p">(</span><span class="nx">rev</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">msg</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">wc</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">wch</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wc</span><span class="p">.</span><span class="nx">Events</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span> <span class="o">!=</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">PUT</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">break</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">name</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimPrefix</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">),</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Prefix</span><span class="o">+</span><span class="nx">topic</span><span class="o">+</span><span class="s">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">msg</span> <span class="o">&lt;-</span> <span class="nx">Msg</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">Val</span><span class="p">:</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">msg</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>发布时，直接通过PUT操作在Topic路径下设置消息；
订阅时，通过Watch来捕获消息，通过Revision来配置不同的监听行为</p>
<ul>
<li>Revision为0时，从当前时间点开始监听</li>
<li>Revision为1时，监听Topic创建后的所有事件</li>
</ul>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文主要结合Golang总结了etcd中服务发现、分布式锁、选主等实现方式，另外etcd还可以应用在发布订阅、负载均衡等方面。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a>，欢迎批评指正。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang分布式应用之定时任务</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-cron/</link>
    <pubDate>Thu, 28 Jul 2022 16:07:56 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-cron/</guid>
    <description><![CDATA[<p>在系统开发中，有一类任务不是立即执行，而是在未来某个时间点或者按照一定间隔去执行，比如日志定期压缩、报表制作、过期数据清理等，这就是定时任务。</p>
<p>在单机中，定时任务通常需要实现一个类似crontab的系统，一般有两种方式：</p>
<ol>
<li>最小堆，按照任务执行时间建堆，每次取最近的任务执行</li>
<li>时间轮，将任务放到时间轮列表中，每次转动取对应的任务列表执行</li>
</ol>
<h2 id="最小堆" class="headerLink">
    <a href="#%e6%9c%80%e5%b0%8f%e5%a0%86" class="header-mark"></a>最小堆</h2><p>最小堆是一种特殊的完全二叉树，任意非叶子节点的值不大于其子节点，如图</p>
<p>

</p>
<p>通过最小堆，根据任务最近执行时间键堆，每次取堆顶元素即最近需要执行的任务，设置timer定时器，到期后触发任务执行。由于堆的特性每次调整的时间复杂度为O(lgN)，相较于普通队列性能更快。</p>
<p>在<code>container/heap</code>中已经实现操作堆的相关函数，我们只需要实现定期任务核心逻辑即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 运行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cron</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置cron已启动，atomic.Bool来保证并发安全
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nx">started</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 主循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果停止则退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">started</span><span class="p">.</span><span class="nf">Load</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">runTask</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 核心逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cron</span><span class="p">)</span> <span class="nf">runTask</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">now</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">duration</span> <span class="o">:=</span> <span class="nx">infTime</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取堆顶元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">task</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nf">Peek</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 如果已删除则弹出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 计算于当前时间查找，设置定时器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">duration</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">Sub</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">duration</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">timer</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTimer</span><span class="p">(</span><span class="nx">duration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">timer</span><span class="p">.</span><span class="nf">Stop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 当有新元素插入直接返回，防止新元素执行时间小于当前堆顶元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">c</span><span class="p">.</span><span class="nx">new</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">timer</span><span class="p">.</span><span class="nx">C</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 弹出任务，执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Exec</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 计算下次执行时间，如果为0说明任务已结束，否则重新入堆
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">task</span><span class="p">.</span><span class="nx">next</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Next</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">IsZero</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nf">Push</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要逻辑可总结为:</p>
<ol>
<li>将任务按照下次执行时间建最小堆</li>
<li>每次取堆顶任务，设置定时器</li>
<li>如果中间有新加入任务，转入步骤2</li>
<li>定时器到期后执行任务</li>
<li>再次取下个任务，转入步骤2，依次执行</li>
</ol>
<h2 id="时间轮" class="headerLink">
    <a href="#%e6%97%b6%e9%97%b4%e8%bd%ae" class="header-mark"></a>时间轮</h2><p>另一种实现Cron的方式是时间轮，时间轮通过一个环形队列，每个插槽放入需要到期执行的任务，按照固定间隔转动时间轮，取插槽中任务列表执行，如图所示:</p>
<p>

</p>
<p>时间轮可看作一个表盘，如图中时间间隔为1秒，总共60个格子，如果任务在3秒后执行则放为插槽3，每秒转动次取插槽上所有任务执行。</p>
<p>如果执行时间超过最大插槽，比如有个任务需要63秒后执行（超过了最大格子刻度），一般可以通过多层时间轮，或者设置一个额外变量圈数，只执行圈数为0的任务。</p>
<p>时间轮插入的时间复杂度为O(1)，获取任务列表复杂度为O(1)，执行列表最差为O(n)。对比最小堆，时间轮插入删除元素更快。</p>
<p>核心代码如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">TimeWheel</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">interval</span>    <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 触发间隔
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">slots</span>       <span class="kt">int</span> <span class="c1">// 总插槽数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">currentSlot</span> <span class="kt">int</span> <span class="c1">// 当前插槽数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tasks</span>       <span class="p">[]</span><span class="o">*</span><span class="nx">list</span><span class="p">.</span><span class="nx">List</span> <span class="c1">// 环形列表，每个元素为对应插槽的任务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">set</span>         <span class="nx">containerx</span><span class="p">.</span><span class="nx">Set</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span> <span class="c1">// 记录所有任务key值，用来检查任务是否被删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">tricker</span> <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Ticker</span> <span class="c1">// 定时触发器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span> <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">tw</span> <span class="o">*</span><span class="nx">TimeWheel</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tw</span><span class="p">.</span><span class="nx">tricker</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTicker</span><span class="p">(</span><span class="nx">tw</span><span class="p">.</span><span class="nx">interval</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 通过定时器模拟时间轮转动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">now</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">tw</span><span class="p">.</span><span class="nx">tricker</span><span class="p">.</span><span class="nx">C</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 转动一次，执行任务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tw</span><span class="p">.</span><span class="nf">RunTask</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="p">=</span> <span class="p">(</span><span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">slots</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">tw</span> <span class="o">*</span><span class="nx">TimeWheel</span><span class="p">)</span> <span class="nf">RunTask</span><span class="p">(</span><span class="nx">now</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">slot</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 一次执行任务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">item</span> <span class="o">:=</span> <span class="nx">taskList</span><span class="p">.</span><span class="nf">Front</span><span class="p">();</span> <span class="nx">item</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">Value</span><span class="p">.(</span><span class="o">*</span><span class="nx">TimeWheelTask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 任务圈数大于0，不需要执行，将圈数减一
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">task</span><span class="p">.</span><span class="nx">circle</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">task</span><span class="p">.</span><span class="nx">circle</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">			<span class="nx">item</span> <span class="p">=</span> <span class="nx">item</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 运行任务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">go</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Exec</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 计算任务下次运行时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">next</span> <span class="o">:=</span> <span class="nx">item</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">taskList</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">item</span> <span class="p">=</span> <span class="nx">next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">next</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Next</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">IsZero</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tw</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="nx">task</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tw</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 添加任务，计算下一次任务执行的插槽与圈数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">tw</span> <span class="o">*</span><span class="nx">TimeWheel</span><span class="p">)</span> <span class="nf">add</span><span class="p">(</span><span class="nx">now</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">task</span> <span class="o">*</span><span class="nx">TimeWheelTask</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">task</span><span class="p">.</span><span class="nx">initialized</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">next</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Next</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">initialized</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">duration</span> <span class="o">:=</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">Sub</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">duration</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">slot</span> <span class="p">=</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">circle</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mult</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">duration</span> <span class="o">/</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">interval</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">slot</span> <span class="p">=</span> <span class="p">(</span><span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="o">+</span> <span class="nx">mult</span><span class="p">)</span> <span class="o">%</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">slots</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">circle</span> <span class="p">=</span> <span class="nx">mult</span> <span class="o">/</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">slots</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">tw</span><span class="p">.</span><span class="nx">tasks</span><span class="p">[</span><span class="nx">task</span><span class="p">.</span><span class="nx">slot</span><span class="p">].</span><span class="nf">PushBack</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tw</span><span class="p">.</span><span class="nx">set</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>时间轮的主要逻辑如下：</p>
<ol>
<li>将任务存在对应插槽的时间</li>
<li>通过定时间模拟时间轮转动</li>
<li>每次到期后遍历当前插槽的任务列表，若任务圈数为0则执行</li>
<li>如果任务未结束，计算下次执行的插槽与圈数</li>
<li>转入步骤2，依次执行</li>
</ol>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文主要总结了定时任务的两种实现方式，最小堆与时间轮，并分析其核心实现逻辑。</p>
<p>对于执行分布式定时任务，可以借助延时消息队列或者直接使用Kubernetes的CronJob。</p>
<p>自己开发的话可以借助Etcd：</p>
<ul>
<li>中心节点Coordinator将任务按照一定算法(Hash、轮询、或者更复杂的分配算法)将任务与工作节点Worker绑定</li>
<li>每个Worker添加到有绑定到自己的任务则取出放到本地的Cron中</li>
<li>如果Worker挂掉，执行将其上任务重新绑定即可</li>
</ul>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex/tree/main/cron" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex/tree/main/cron</a></p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang分布式应用之Redis</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-redis/</link>
    <pubDate>Fri, 22 Jul 2022 18:07:56 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-redis/</guid>
    <description><![CDATA[<p>Redis是一个高性能的内存数据库，常被应用于分布式系统中，除了作为分布式缓存或简单的内存数据库还有一些特殊的应用场景，本文结合Golang来编写对应的中间件。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></p>
<h2 id="分布式锁" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81" class="header-mark"></a>分布式锁</h2><p>单机系统中我们可以使用<code>sync.Mutex</code>来保护临界资源，在分布式系统中同样有这样的需求，当多个主机抢占同一个资源，需要加对应的“分布式锁”。</p>
<p>在Redis中我们可以通过<code>setnx</code>命令来实现</p>
<ol>
<li>如果key不存在可以设置对应的值，设置成功则加锁成功，key不存在返回失败</li>
<li>释放锁可以通过<code>del</code>实现。</li>
</ol>
<p>主要逻辑如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">RedisLock</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span>     <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span>        <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">expiration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 过期时间，防止宕机或者异常
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewLock</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">expiration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="o">*</span><span class="nx">RedisLock</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">RedisLock</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span>     <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">key</span><span class="p">:</span>        <span class="nx">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">expiration</span><span class="p">:</span> <span class="nx">expiration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 加锁将成功会将调用者id保存到redis中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">RedisLock</span><span class="p">)</span> <span class="nf">Lock</span><span class="p">(</span><span class="nx">id</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">SetNX</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">l</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nx">expiration</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">unLockScript</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">if (redis.call(&#34;get&#34;, KEYS[1]) == KEYS[2]) then
</span></span></span><span class="line"><span class="cl"><span class="s">	redis.call(&#34;del&#34;, KEYS[1])
</span></span></span><span class="line"><span class="cl"><span class="s">	return true
</span></span></span><span class="line"><span class="cl"><span class="s">end
</span></span></span><span class="line"><span class="cl"><span class="s">return false
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 解锁通过lua脚本来保证原子性，只能解锁当前调用者加的锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">RedisLock</span><span class="p">)</span> <span class="nf">UnLock</span><span class="p">(</span><span class="nx">id</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">unLockScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">l</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="nx">id</span><span class="p">}).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>需要加一个额外的超时时间来防止系统宕机或者异常请求造成的死锁，通过超时时间为最大预估运行时间的2倍。</p>
<p>解锁时通过lua脚本来保证原子性，调用者只会解自己加的锁。避免由于超时造成的混乱，例如：进程A在时间t1获取了锁，但由于执行缓慢，在时间t2锁超时失效，进程B在t3获取了锁，这是如果进程A执行完去解锁会取消进程B的锁。</p>
<p>运行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">client</span> <span class="o">:=</span> <span class="nx">redis</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addr</span><span class="p">:</span>     <span class="s">&#34;localhost:6379&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Password</span><span class="p">:</span> <span class="s">&#34;123456&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DB</span><span class="p">:</span>       <span class="mi">0</span><span class="p">,</span> <span class="c1">// use default DB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">lock</span> <span class="o">:=</span> <span class="nf">NewLock</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="s">&#34;counter&#34;</span><span class="p">,</span> <span class="mi">30</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">counter</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;worker%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;worker %d attempt to obtain lock, ok: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">lock</span><span class="p">.</span><span class="nf">UnLock</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">counter</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;worker %d, add counter %d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">counter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行结果，可以看到与<code>sync.Mutex</code>使用效果类似</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">5</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker 5, add counter <span class="m">1</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">4</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">1</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">2</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">1</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">2</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">4</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 4, add counter <span class="m">2</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">1</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 1, add counter <span class="m">3</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">2</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">2</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 2, add counter <span class="m">4</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 3, add counter <span class="m">5</span>
</span></span></code></pre></div><blockquote>
<p>特别注意的是，在分布式Redis集群中，如果发生异常时(主节点宕机)，可能会降低分布式锁的可用性，可以通过强一致性的组件etcd、ZooKeeper等实现。</p>
</blockquote>
<h2 id="分布式过滤器" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e8%bf%87%e6%bb%a4%e5%99%a8" class="header-mark"></a>分布式过滤器</h2><p>假设要开发一个爬虫服务，爬取百万级的网页，怎么判断某一个网页是否爬取过，除了借助数据库和HashMap，我们可以借助布隆过滤器来做。相比其他方式布隆过滤器占用极低的空间，而且插入查询时间非常快。</p>
<p>布隆过滤器用来判断某个元素是否在集合中，利用BitSet</p>
<ul>
<li>插入数据时将值进行多次Hash，将BitSet对应位置1</li>
<li>查询时同样进行多次Hash对比所有位上是否为1，如是则存在。</li>
</ul>
<blockquote>
<p>布隆过滤器有一定的误判率，不适合精确查询的场景。另外也不支持删除元素。通常适用于URL去重、垃圾邮件过滤、防止缓存击穿等场景中。</p>
</blockquote>
<p>在Redis中，我们可以使用自带的BitSet实现，同样也借助lua脚本的原子性来避免多次查询数据不一致。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 插入数据，调用setbit设置对应位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">setScript</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">for _, offset in ipairs(ARGV) do
</span></span></span><span class="line"><span class="cl"><span class="s">	redis.call(&#34;setbit&#34;, KEYS[1], offset, 1)
</span></span></span><span class="line"><span class="cl"><span class="s">end
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 查询数据，如果所有位都为1返回true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">getScript</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">for _, offset in ipairs(ARGV) do
</span></span></span><span class="line"><span class="cl"><span class="s">	if tonumber(redis.call(&#34;getbit&#34;, KEYS[1], offset)) == 0 then
</span></span></span><span class="line"><span class="cl"><span class="s">		return false
</span></span></span><span class="line"><span class="cl"><span class="s">	end
</span></span></span><span class="line"><span class="cl"><span class="s">end
</span></span></span><span class="line"><span class="cl"><span class="s">return true
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BloomFilter</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span>    <span class="kt">string</span> <span class="c1">// 存在redis中的key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">bits</span>   <span class="kt">uint</span> <span class="c1">// BitSet的大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">maps</span>   <span class="kt">uint</span> <span class="c1">// Hash的次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewBloomFilter</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">bits</span><span class="p">,</span> <span class="nx">maps</span> <span class="kt">uint</span><span class="p">)</span> <span class="o">*</span><span class="nx">BloomFilter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">.</span><span class="nf">Del</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">maps</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">maps</span> <span class="p">=</span> <span class="mi">14</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">BloomFilter</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">key</span><span class="p">:</span>    <span class="nx">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span> <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">bits</span><span class="p">:</span>   <span class="nx">bits</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">maps</span><span class="p">:</span>   <span class="nx">maps</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 进行多次Hash, 得到位置列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">BloomFilter</span><span class="p">)</span> <span class="nf">getLocations</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">[]</span><span class="kt">uint</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">locations</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">uint</span><span class="p">,</span> <span class="nx">f</span><span class="p">.</span><span class="nx">maps</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">int</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">maps</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">val</span> <span class="o">:=</span> <span class="nx">murmur3</span><span class="p">.</span><span class="nf">Sum64</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nb">byte</span><span class="p">(</span><span class="nx">i</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">locations</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">uint</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="o">%</span> <span class="nx">f</span><span class="p">.</span><span class="nx">bits</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">locations</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">BloomFilter</span><span class="p">)</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nf">getArgs</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">getLocations</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">setScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">key</span><span class="p">},</span> <span class="nx">args</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">BloomFilter</span><span class="p">)</span> <span class="nf">Exists</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nf">getArgs</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">getLocations</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">getScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">key</span><span class="p">},</span> <span class="nx">args</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">resp</span><span class="p">.(</span><span class="kt">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">exists</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getArgs</span><span class="p">(</span><span class="nx">locations</span> <span class="p">[]</span><span class="kt">uint</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">l</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">locations</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">args</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatUint</span><span class="p">(</span><span class="nb">uint64</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">args</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bf</span> <span class="o">:=</span> <span class="nf">NewBloomFilter</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span><span class="s">&#34;bf-test&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">^</span><span class="mi">16</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Exists</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;exist %t, err %v&#34;</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Add</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test1&#34;</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;add err: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Exists</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;exist %t, err %v&#34;</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Exists</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test2&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;exist %t, err %v&#34;</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// output
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 10:05:58 exist false, err &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 10:05:58 exist true, err &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 10:05:58 exist false, err &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h2 id="分布式限流器" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%99%90%e6%b5%81%e5%99%a8" class="header-mark"></a>分布式限流器</h2><p>在<code>golang.org/x/time/rate</code>包中提供了基于令牌桶的限流器，如果要实现分布式环境的限流可以基于Redis Lua脚本实现。</p>
<p>令牌桶的主要原理如下：</p>
<ul>
<li>假设一个令牌桶容量为burst，每秒按照qps的速率往里面放置令牌</li>
<li>初始时放满令牌，令牌溢出则直接丢弃，请求令牌时，如果桶中有足够令牌则允许，否则拒绝</li>
<li>当burst==qps时，严格按照qps限流；当burst&gt;qps时，可以允许一定的突增流量</li>
</ul>
<p>这里主要参考了官方<code>rate</code>包的实现，将核心逻辑改为Lua实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="c1">--- 相关Key</span>
</span></span><span class="line"><span class="cl"><span class="c1">--- limit rate key值，对应value为当前令牌数</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">limit_key</span> <span class="o">=</span> <span class="n">KEYS</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 输入参数</span>
</span></span><span class="line"><span class="cl"><span class="cm">--[[
</span></span></span><span class="line"><span class="cl"><span class="cm">qps: 每秒请求数;
</span></span></span><span class="line"><span class="cl"><span class="cm">burst: 令牌桶容量;
</span></span></span><span class="line"><span class="cl"><span class="cm">now: 当前Timestamp;
</span></span></span><span class="line"><span class="cl"><span class="cm">cost: 请求令牌数;
</span></span></span><span class="line"><span class="cl"><span class="cm">max_wait: 最大等待时间
</span></span></span><span class="line"><span class="cl"><span class="cm">--]]</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">qps</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">burst</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">now</span> <span class="o">=</span> <span class="n">ARGV</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">cost</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">max_wait</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 获取redis中的令牌数</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;hget&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="s2">&#34;token&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="ow">not</span> <span class="n">tokens</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">tokens</span> <span class="o">=</span> <span class="n">burst</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 上次修改时间</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">last_time</span> <span class="o">=</span> <span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;hget&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="s2">&#34;last_time&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="ow">not</span> <span class="n">last_time</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">last_time</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 最新等待时间</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">last_event</span> <span class="o">=</span> <span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;hget&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="s2">&#34;last_event&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="ow">not</span> <span class="n">last_event</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">last_event</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 通过当前时间与上次修改时间的差值，qps计算出当前时间得令牌数</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">math.max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">now</span><span class="o">-</span><span class="n">last_time</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">new_tokens</span> <span class="o">=</span> <span class="n">math.min</span><span class="p">(</span><span class="n">burst</span><span class="p">,</span> <span class="n">delta</span> <span class="o">*</span> <span class="n">qps</span> <span class="o">+</span> <span class="n">tokens</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">new_tokens</span> <span class="o">=</span> <span class="n">new_tokens</span> <span class="o">-</span> <span class="n">cost</span> <span class="c1">--- 最新令牌数，减少请求令牌</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 如果最新令牌数小于0，计算需要等待的时间</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">wait_period</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">new_tokens</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">qps</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">wait_period</span> <span class="o">=</span> <span class="n">wait_period</span> <span class="o">-</span> <span class="n">new_tokens</span> <span class="o">/</span> <span class="n">qps</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="n">wait_period</span> <span class="o">=</span> <span class="n">math.ceil</span><span class="p">(</span><span class="n">wait_period</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">time_act</span> <span class="o">=</span> <span class="n">now</span> <span class="o">+</span> <span class="n">wait_period</span> <span class="c1">--- 满足等待间隔的时间戳</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 允许请求有两种情况</span>
</span></span><span class="line"><span class="cl"><span class="c1">--- 当请求令牌数小于burst, 等待时间不超过最大等待时间，可以通过补充令牌满足请求</span>
</span></span><span class="line"><span class="cl"><span class="c1">--- qps为0时，只要最新令牌数不小于0即可</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">ok</span> <span class="o">=</span> <span class="p">(</span><span class="n">cost</span> <span class="o">&lt;=</span> <span class="n">burst</span> <span class="ow">and</span> <span class="n">wait_period</span> <span class="o">&lt;=</span> <span class="n">max_wait</span> <span class="ow">and</span> <span class="n">qps</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">qps</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">new_tokens</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 设置对应值</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">ok</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="n">new_tokens</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">,</span> <span class="n">last_time_key</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">,</span> <span class="n">last_event_key</span><span class="p">,</span> <span class="n">time_act</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 返回列表，{是否允许， 等待时间}</span>
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">wait_period</span><span class="p">}</span>
</span></span></code></pre></div><p>在Golang中的相关接口Allow、AllowN、Wait等都是通过调用reserveN实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 调用lua脚本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">lim</span> <span class="o">*</span><span class="nx">RedisLimiter</span><span class="p">)</span> <span class="nf">reserveN</span><span class="p">(</span><span class="nx">now</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">maxFutureReserveSecond</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Reservation</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">lim</span><span class="p">.</span><span class="nx">rdb</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">reserveNScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">lim</span><span class="p">.</span><span class="nx">limitKey</span><span class="p">},</span> <span class="nx">lim</span><span class="p">.</span><span class="nx">qps</span><span class="p">,</span> <span class="nx">lim</span><span class="p">.</span><span class="nx">burst</span><span class="p">,</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Unix</span><span class="p">(),</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">maxFutureReserveSecond</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Reservation</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ok</span><span class="p">:</span>        <span class="nx">allow</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lim</span><span class="p">:</span>       <span class="nx">lim</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokens</span><span class="p">:</span>    <span class="nx">n</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">timeToAct</span><span class="p">:</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">wait</span><span class="p">)</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rdb</span> <span class="o">:=</span> <span class="nx">redis</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addr</span><span class="p">:</span>     <span class="s">&#34;localhost:6379&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Password</span><span class="p">:</span> <span class="s">&#34;123456&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DB</span><span class="p">:</span>       <span class="mi">0</span><span class="p">,</span> <span class="c1">// use default DB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewRedisLimiter</span><span class="p">(</span><span class="nx">rdb</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#34;testrate&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nf">Reset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Wait</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;worker %d allowed: %v&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// output
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:31 worker 0 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:31 worker 1 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:32 worker 2 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:33 worker 3 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:34 worker 4 allowed: &lt;nil&gt;
</span></span></span></code></pre></div><p>前两个请求在burst内，直接可以获得，后面的请求按照qps的速率生成。</p>
<h2 id="其他" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96" class="header-mark"></a>其他</h2><p>除此之外，Redis还可以用作全局计数、去重(set)、发布订阅等场景。Redis官方也提供了一些通用模块，通过加载这些模块也可以实现过滤、限流等特性，参考<a href="https://redis.io/docs/modules/" target="_blank" rel="noopener noreffer">modules</a>。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a>，欢迎批评指正</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></li>
<li><a href="https://go-zero.dev/" target="_blank" rel="noopener noreffer">https://go-zero.dev/</a></li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item></channel>
</rss>
