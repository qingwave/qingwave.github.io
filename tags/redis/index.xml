<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>redis - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/redis/</link>
        <description>redis - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Fri, 22 Jul 2022 18:07:56 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/tags/redis/" rel="self" type="application/rss+xml" /><item>
    <title>Golang分布式应用之Redis</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-redis/</link>
    <pubDate>Fri, 22 Jul 2022 18:07:56 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-redis/</guid>
    <description><![CDATA[<p>Redis是一个高性能的内存数据库，常被应用于分布式系统中，除了作为分布式缓存或简单的内存数据库还有一些特殊的应用场景，本文结合Golang来编写对应的中间件。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></p>
<h2 id="分布式锁" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81" class="header-mark"></a>分布式锁</h2><p>单机系统中我们可以使用<code>sync.Mutex</code>来保护临界资源，在分布式系统中同样有这样的需求，当多个主机抢占同一个资源，需要加对应的“分布式锁”。</p>
<p>在Redis中我们可以通过<code>setnx</code>命令来实现</p>
<ol>
<li>如果key不存在可以设置对应的值，设置成功则加锁成功，key不存在返回失败</li>
<li>释放锁可以通过<code>del</code>实现。</li>
</ol>
<p>主要逻辑如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">RedisLock</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span>     <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span>        <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">expiration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 过期时间，防止宕机或者异常
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewLock</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">expiration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="o">*</span><span class="nx">RedisLock</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">RedisLock</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span>     <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">key</span><span class="p">:</span>        <span class="nx">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">expiration</span><span class="p">:</span> <span class="nx">expiration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 加锁将成功会将调用者id保存到redis中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">RedisLock</span><span class="p">)</span> <span class="nf">Lock</span><span class="p">(</span><span class="nx">id</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">SetNX</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">l</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nx">expiration</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">unLockScript</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">if (redis.call(&#34;get&#34;, KEYS[1]) == KEYS[2]) then
</span></span></span><span class="line"><span class="cl"><span class="s">	redis.call(&#34;del&#34;, KEYS[1])
</span></span></span><span class="line"><span class="cl"><span class="s">	return true
</span></span></span><span class="line"><span class="cl"><span class="s">end
</span></span></span><span class="line"><span class="cl"><span class="s">return false
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 解锁通过lua脚本来保证原子性，只能解锁当前调用者加的锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">RedisLock</span><span class="p">)</span> <span class="nf">UnLock</span><span class="p">(</span><span class="nx">id</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">unLockScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">l</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="nx">id</span><span class="p">}).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>需要加一个额外的超时时间来防止系统宕机或者异常请求造成的死锁，通过超时时间为最大预估运行时间的2倍。</p>
<p>解锁时通过lua脚本来保证原子性，调用者只会解自己加的锁。避免由于超时造成的混乱，例如：进程A在时间t1获取了锁，但由于执行缓慢，在时间t2锁超时失效，进程B在t3获取了锁，这是如果进程A执行完去解锁会取消进程B的锁。</p>
<p>运行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">client</span> <span class="o">:=</span> <span class="nx">redis</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addr</span><span class="p">:</span>     <span class="s">&#34;localhost:6379&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Password</span><span class="p">:</span> <span class="s">&#34;123456&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DB</span><span class="p">:</span>       <span class="mi">0</span><span class="p">,</span> <span class="c1">// use default DB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">lock</span> <span class="o">:=</span> <span class="nf">NewLock</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="s">&#34;counter&#34;</span><span class="p">,</span> <span class="mi">30</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">counter</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;worker%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;worker %d attempt to obtain lock, ok: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">lock</span><span class="p">.</span><span class="nf">UnLock</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">counter</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;worker %d, add counter %d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">counter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行结果，可以看到与<code>sync.Mutex</code>使用效果类似</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">5</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker 5, add counter <span class="m">1</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">4</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">1</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">2</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:09 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">1</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">2</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">4</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 4, add counter <span class="m">2</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">1</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 1, add counter <span class="m">3</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">2</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">2</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 2, add counter <span class="m">4</span>
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: false, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker <span class="m">3</span> attempt to obtain lock, ok: true, err: &lt;nil&gt;
</span></span><span class="line"><span class="cl">2022/07/22 09:58:10 worker 3, add counter <span class="m">5</span>
</span></span></code></pre></div><blockquote>
<p>特别注意的是，在分布式Redis集群中，如果发生异常时(主节点宕机)，可能会降低分布式锁的可用性，可以通过强一致性的组件etcd、ZooKeeper等实现。</p>
</blockquote>
<h2 id="分布式过滤器" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e8%bf%87%e6%bb%a4%e5%99%a8" class="header-mark"></a>分布式过滤器</h2><p>假设要开发一个爬虫服务，爬取百万级的网页，怎么判断某一个网页是否爬取过，除了借助数据库和HashMap，我们可以借助布隆过滤器来做。相比其他方式布隆过滤器占用极低的空间，而且插入查询时间非常快。</p>
<p>布隆过滤器用来判断某个元素是否在集合中，利用BitSet</p>
<ul>
<li>插入数据时将值进行多次Hash，将BitSet对应位置1</li>
<li>查询时同样进行多次Hash对比所有位上是否为1，如是则存在。</li>
</ul>
<blockquote>
<p>布隆过滤器有一定的误判率，不适合精确查询的场景。另外也不支持删除元素。通常适用于URL去重、垃圾邮件过滤、防止缓存击穿等场景中。</p>
</blockquote>
<p>在Redis中，我们可以使用自带的BitSet实现，同样也借助lua脚本的原子性来避免多次查询数据不一致。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 插入数据，调用setbit设置对应位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">setScript</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">for _, offset in ipairs(ARGV) do
</span></span></span><span class="line"><span class="cl"><span class="s">	redis.call(&#34;setbit&#34;, KEYS[1], offset, 1)
</span></span></span><span class="line"><span class="cl"><span class="s">end
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 查询数据，如果所有位都为1返回true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">getScript</span> <span class="p">=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">for _, offset in ipairs(ARGV) do
</span></span></span><span class="line"><span class="cl"><span class="s">	if tonumber(redis.call(&#34;getbit&#34;, KEYS[1], offset)) == 0 then
</span></span></span><span class="line"><span class="cl"><span class="s">		return false
</span></span></span><span class="line"><span class="cl"><span class="s">	end
</span></span></span><span class="line"><span class="cl"><span class="s">end
</span></span></span><span class="line"><span class="cl"><span class="s">return true
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BloomFilter</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span>    <span class="kt">string</span> <span class="c1">// 存在redis中的key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">bits</span>   <span class="kt">uint</span> <span class="c1">// BitSet的大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">maps</span>   <span class="kt">uint</span> <span class="c1">// Hash的次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewBloomFilter</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">bits</span><span class="p">,</span> <span class="nx">maps</span> <span class="kt">uint</span><span class="p">)</span> <span class="o">*</span><span class="nx">BloomFilter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">.</span><span class="nf">Del</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">maps</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">maps</span> <span class="p">=</span> <span class="mi">14</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">BloomFilter</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">key</span><span class="p">:</span>    <span class="nx">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span> <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">bits</span><span class="p">:</span>   <span class="nx">bits</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">maps</span><span class="p">:</span>   <span class="nx">maps</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 进行多次Hash, 得到位置列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">BloomFilter</span><span class="p">)</span> <span class="nf">getLocations</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">[]</span><span class="kt">uint</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">locations</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">uint</span><span class="p">,</span> <span class="nx">f</span><span class="p">.</span><span class="nx">maps</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">int</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">maps</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">val</span> <span class="o">:=</span> <span class="nx">murmur3</span><span class="p">.</span><span class="nf">Sum64</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nb">byte</span><span class="p">(</span><span class="nx">i</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">locations</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">uint</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="o">%</span> <span class="nx">f</span><span class="p">.</span><span class="nx">bits</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">locations</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">BloomFilter</span><span class="p">)</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nf">getArgs</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">getLocations</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">setScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">key</span><span class="p">},</span> <span class="nx">args</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">BloomFilter</span><span class="p">)</span> <span class="nf">Exists</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nf">getArgs</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">getLocations</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">getScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">key</span><span class="p">},</span> <span class="nx">args</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">resp</span><span class="p">.(</span><span class="kt">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">exists</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getArgs</span><span class="p">(</span><span class="nx">locations</span> <span class="p">[]</span><span class="kt">uint</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">l</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">locations</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">args</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatUint</span><span class="p">(</span><span class="nb">uint64</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span> <span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">args</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bf</span> <span class="o">:=</span> <span class="nf">NewBloomFilter</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span><span class="s">&#34;bf-test&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">^</span><span class="mi">16</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Exists</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;exist %t, err %v&#34;</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Add</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test1&#34;</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;add err: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Exists</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;exist %t, err %v&#34;</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">bf</span><span class="p">.</span><span class="nf">Exists</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test2&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;exist %t, err %v&#34;</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// output
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 10:05:58 exist false, err &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 10:05:58 exist true, err &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 10:05:58 exist false, err &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h2 id="分布式限流器" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%99%90%e6%b5%81%e5%99%a8" class="header-mark"></a>分布式限流器</h2><p>在<code>golang.org/x/time/rate</code>包中提供了基于令牌桶的限流器，如果要实现分布式环境的限流可以基于Redis Lua脚本实现。</p>
<p>令牌桶的主要原理如下：</p>
<ul>
<li>假设一个令牌桶容量为burst，每秒按照qps的速率往里面放置令牌</li>
<li>初始时放满令牌，令牌溢出则直接丢弃，请求令牌时，如果桶中有足够令牌则允许，否则拒绝</li>
<li>当burst==qps时，严格按照qps限流；当burst&gt;qps时，可以允许一定的突增流量</li>
</ul>
<p>这里主要参考了官方<code>rate</code>包的实现，将核心逻辑改为Lua实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="c1">--- 相关Key</span>
</span></span><span class="line"><span class="cl"><span class="c1">--- limit rate key值，对应value为当前令牌数</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">limit_key</span> <span class="o">=</span> <span class="n">KEYS</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 输入参数</span>
</span></span><span class="line"><span class="cl"><span class="cm">--[[
</span></span></span><span class="line"><span class="cl"><span class="cm">qps: 每秒请求数;
</span></span></span><span class="line"><span class="cl"><span class="cm">burst: 令牌桶容量;
</span></span></span><span class="line"><span class="cl"><span class="cm">now: 当前Timestamp;
</span></span></span><span class="line"><span class="cl"><span class="cm">cost: 请求令牌数;
</span></span></span><span class="line"><span class="cl"><span class="cm">max_wait: 最大等待时间
</span></span></span><span class="line"><span class="cl"><span class="cm">--]]</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">qps</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">burst</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">now</span> <span class="o">=</span> <span class="n">ARGV</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">cost</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">max_wait</span> <span class="o">=</span> <span class="n">tonumber</span><span class="p">(</span><span class="n">ARGV</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 获取redis中的令牌数</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;hget&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="s2">&#34;token&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="ow">not</span> <span class="n">tokens</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">tokens</span> <span class="o">=</span> <span class="n">burst</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 上次修改时间</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">last_time</span> <span class="o">=</span> <span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;hget&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="s2">&#34;last_time&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="ow">not</span> <span class="n">last_time</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">last_time</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 最新等待时间</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">last_event</span> <span class="o">=</span> <span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;hget&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="s2">&#34;last_event&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="ow">not</span> <span class="n">last_event</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">last_event</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 通过当前时间与上次修改时间的差值，qps计算出当前时间得令牌数</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">math.max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">now</span><span class="o">-</span><span class="n">last_time</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">new_tokens</span> <span class="o">=</span> <span class="n">math.min</span><span class="p">(</span><span class="n">burst</span><span class="p">,</span> <span class="n">delta</span> <span class="o">*</span> <span class="n">qps</span> <span class="o">+</span> <span class="n">tokens</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">new_tokens</span> <span class="o">=</span> <span class="n">new_tokens</span> <span class="o">-</span> <span class="n">cost</span> <span class="c1">--- 最新令牌数，减少请求令牌</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 如果最新令牌数小于0，计算需要等待的时间</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">wait_period</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">new_tokens</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">qps</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">wait_period</span> <span class="o">=</span> <span class="n">wait_period</span> <span class="o">-</span> <span class="n">new_tokens</span> <span class="o">/</span> <span class="n">qps</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="n">wait_period</span> <span class="o">=</span> <span class="n">math.ceil</span><span class="p">(</span><span class="n">wait_period</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">time_act</span> <span class="o">=</span> <span class="n">now</span> <span class="o">+</span> <span class="n">wait_period</span> <span class="c1">--- 满足等待间隔的时间戳</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 允许请求有两种情况</span>
</span></span><span class="line"><span class="cl"><span class="c1">--- 当请求令牌数小于burst, 等待时间不超过最大等待时间，可以通过补充令牌满足请求</span>
</span></span><span class="line"><span class="cl"><span class="c1">--- qps为0时，只要最新令牌数不小于0即可</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">ok</span> <span class="o">=</span> <span class="p">(</span><span class="n">cost</span> <span class="o">&lt;=</span> <span class="n">burst</span> <span class="ow">and</span> <span class="n">wait_period</span> <span class="o">&lt;=</span> <span class="n">max_wait</span> <span class="ow">and</span> <span class="n">qps</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">qps</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">new_tokens</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 设置对应值</span>
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">ok</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">	<span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">,</span> <span class="n">limit_key</span><span class="p">,</span> <span class="n">new_tokens</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">,</span> <span class="n">last_time_key</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">redis.call</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">,</span> <span class="n">last_event_key</span><span class="p">,</span> <span class="n">time_act</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">--- 返回列表，{是否允许， 等待时间}</span>
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">wait_period</span><span class="p">}</span>
</span></span></code></pre></div><p>在Golang中的相关接口Allow、AllowN、Wait等都是通过调用reserveN实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 调用lua脚本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">lim</span> <span class="o">*</span><span class="nx">RedisLimiter</span><span class="p">)</span> <span class="nf">reserveN</span><span class="p">(</span><span class="nx">now</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">maxFutureReserveSecond</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Reservation</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">lim</span><span class="p">.</span><span class="nx">rdb</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">reserveNScript</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">lim</span><span class="p">.</span><span class="nx">limitKey</span><span class="p">},</span> <span class="nx">lim</span><span class="p">.</span><span class="nx">qps</span><span class="p">,</span> <span class="nx">lim</span><span class="p">.</span><span class="nx">burst</span><span class="p">,</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Unix</span><span class="p">(),</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">maxFutureReserveSecond</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Reservation</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ok</span><span class="p">:</span>        <span class="nx">allow</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lim</span><span class="p">:</span>       <span class="nx">lim</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokens</span><span class="p">:</span>    <span class="nx">n</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">timeToAct</span><span class="p">:</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">wait</span><span class="p">)</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rdb</span> <span class="o">:=</span> <span class="nx">redis</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addr</span><span class="p">:</span>     <span class="s">&#34;localhost:6379&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Password</span><span class="p">:</span> <span class="s">&#34;123456&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DB</span><span class="p">:</span>       <span class="mi">0</span><span class="p">,</span> <span class="c1">// use default DB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewRedisLimiter</span><span class="p">(</span><span class="nx">rdb</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#34;testrate&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nf">Reset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Wait</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;worker %d allowed: %v&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// output
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:31 worker 0 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:31 worker 1 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:32 worker 2 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:33 worker 3 allowed: &lt;nil&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2022/07/22 12:50:34 worker 4 allowed: &lt;nil&gt;
</span></span></span></code></pre></div><p>前两个请求在burst内，直接可以获得，后面的请求按照qps的速率生成。</p>
<h2 id="其他" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96" class="header-mark"></a>其他</h2><p>除此之外，Redis还可以用作全局计数、去重(set)、发布订阅等场景。Redis官方也提供了一些通用模块，通过加载这些模块也可以实现过滤、限流等特性，参考<a href="https://redis.io/docs/modules/" target="_blank" rel="noopener noreffer">modules</a>。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a>，欢迎批评指正</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></li>
<li><a href="https://go-zero.dev/" target="_blank" rel="noopener noreffer">https://go-zero.dev/</a></li>
</ul>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item></channel>
</rss>
