<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>etcd - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/etcd/</link>
        <description>etcd - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Wed, 01 Mar 2023 08:01:22 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/tags/etcd/" rel="self" type="application/rss+xml" /><item>
    <title>Golang实现一个事务型内存数据库</title>
    <link>https://qingwave.github.io/golang-in-memory-database/</link>
    <pubDate>Wed, 01 Mar 2023 08:01:22 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-in-memory-database/</guid>
    <description><![CDATA[<p>内存数据库经我们经常用到，例如Redis，那么如何从零实现一个内存数据库呢，本文旨在介绍如何使用Golang编写一个KV内存数据库<a href="https://github.com/qingwave/mossdb" target="_blank" rel="noopener noreffer">MossDB</a>。</p>
<h2 id="特性" class="headerLink">
    <a href="#%e7%89%b9%e6%80%a7" class="header-mark"></a>特性</h2><p>MossDB是一个纯Golang编写、可嵌入的、键值型内存数据库，包含以下特性</p>
<ul>
<li>可持久化，类似Redis AOF(Append only Log)</li>
<li>支持事务</li>
<li>支持近实时的TTL(Time to Live), 可以实现毫秒级的过期删除</li>
<li>前缀搜索</li>
<li>Watch接口，可以监听某个键值的内容变化，类似etcd的Watch</li>
<li>多后端存储，目前支持HashMap和RadixTree</li>
</ul>
<h2 id="命名由来" class="headerLink">
    <a href="#%e5%91%bd%e5%90%8d%e7%94%b1%e6%9d%a5" class="header-mark"></a>命名由来</h2><p><code>Moss</code>有苔、苔花的含义，MossDB的名字来源于清代袁牧的一句诗:</p>
<blockquote>
<p>苔花如米小，也学牡丹开</p>
</blockquote>
<p>MossDB虽小，但五脏俱全，也支持了很多重要功能。另外，巧合的是《流浪地球2》中的超级计算机550W名字就是Moss。</p>
<h2 id="架构" class="headerLink">
    <a href="#%e6%9e%b6%e6%9e%84" class="header-mark"></a>架构</h2><p>内存数据库虽然使用简单，实现起来却有很多细节，Golang目前也存在不少优秀的开源内存数据库，比如<a href="https://github.com/tidwall/buntdb" target="_blank" rel="noopener noreffer">buntdb</a>、<a href="https://github.com/hashicorp/go-memdb" target="_blank" rel="noopener noreffer">go-memdb</a>，在编写MossDB过程中也借鉴了一些它们的特性。</p>
<p>MossDB的架构如图：


</p>
<p>自上往下分为：</p>
<ol>
<li>接口层，提供API接受用户请求</li>
<li>核心层，实现事务、过期删除、Watch等功能</li>
<li>存储层，提供KV的后端存储以及增删改查</li>
<li>持久化层，使用AOL持久化即每次修改操作都会持久化到磁盘Log中</li>
</ol>
<h3 id="快速开始" class="headerLink">
    <a href="#%e5%bf%ab%e9%80%9f%e5%bc%80%e5%a7%8b" class="header-mark"></a>快速开始</h3><p>MossDB可嵌入到Go程序中，可以通过<code>go get</code>获取</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">go get github.com/qingwave/mossdb
</span></span></code></pre></div><p>MossDB提供了易用的API，可以方便地进行数据处理，下面的示例代码展示了如何使用MossDB：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/qingwave/mossdb&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// create db instance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">mossdb</span><span class="p">.</span><span class="nx">Config</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// set, get data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;key1&#34;</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;val1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;get key1: %s&#34;</span><span class="p">,</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;key1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// transaction
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">db</span><span class="p">.</span><span class="nf">Tx</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">mossdb</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">val1</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;key1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">tx</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;key2&#34;</span><span class="p">,</span> <span class="nx">val1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>更多示例见<a href="https://github.com/qingwave/mossdb" target="_blank" rel="noopener noreffer">源码</a></p>
<h2 id="具体实现" class="headerLink">
    <a href="#%e5%85%b7%e4%bd%93%e5%ae%9e%e7%8e%b0" class="header-mark"></a>具体实现</h2><p>从下往上分别介绍下MossDB如何设计与实现，以及相关的细节。</p>
<h3 id="aof持久化" class="headerLink">
    <a href="#aof%e6%8c%81%e4%b9%85%e5%8c%96" class="header-mark"></a>AOF持久化</h3><p>AOF源于Redis提供两种持久化技术，另外一种是RDB，AOF是指在每次写操作后，将该操作序列化后追加到文件中，重启时重放文件中的对应操作，从而达到持久化的目的。其实现简单，用在MossDB是一个不错的选择，但需要注意的是AOF缺点同样明显，如果文件较大，每次重启会花费较多时间。</p>
<p>Redis的AOF是一种后写式日志，先写内存直接返回给用户，再写磁盘文件持久化，可以保证其高性能，但如果中途宕机会丢失数据。MossDB中的AOF采用了WAL(预写式日志)实现，先写Log再写内存，用来保证数据不会丢失，从而可以进一步实现事务。</p>
<p>那么采用WAL会不会影响其性能？每次必须等到落盘后才进行其他操作，WAL的每次写入会先写到内核缓冲区，这个调用很快就返回了，内核再将数据落盘。我们也可以使用<code>fsync</code>调用强制内核执行直接将数据写入磁盘。在MossDB中普通写操作之会不会直接调用<code>fsync</code>，事务写中强制开启<code>fsync</code>，从而平衡数据一致性与性能。</p>
<p>WAL的实现引用了<a href="https://github.com/tidwall/wal" target="_blank" rel="noopener noreffer">tiwall/wal</a>，其中封装了对Log文件的操作，可以支持批量写入。由于WAL是二进制的，必须将数据进行编码，通过<code>varint</code>编码实现，将数据长度插入到数据本体之前，读取时可以读取定长的数据长度，然后按长度读取数据本体。MossDB中数据格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Record</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Op</span>        <span class="kt">uint16</span>
</span></span><span class="line"><span class="cl">	<span class="nx">KeySize</span>   <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ValSize</span>   <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Timestamp</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">TTL</span>       <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Key</span>       <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Val</span>       <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>对应编码后的二进制格式为:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">|------------------------------------------------------------|
</span></span><span class="line"><span class="cl">| Op | KeySize | ValSize | Timestamp | TTL | Key    | Val    |
</span></span><span class="line"><span class="cl">|------------------------------------------------------------|
</span></span><span class="line"><span class="cl">| 2  | 4       | 4       | 8         | 8   | []byte | []byte |
</span></span><span class="line"><span class="cl">|------------------------------------------------------------|
</span></span></code></pre></div><p>使用<code>binary.BigEndian.PutUint16</code>进行编码，解码时通过<code>binary.BigEndian.Uint16</code>，从而依次取得生成完整的数据。</p>
<h3 id="存储引擎" class="headerLink">
    <a href="#%e5%ad%98%e5%82%a8%e5%bc%95%e6%93%8e" class="header-mark"></a>存储引擎</h3><p>MossDB提供了存储接口，只要实现了此接口都可以作为其后端存储</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Store</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Set</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">val</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Prefix</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Dump</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Len</span><span class="p">()</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>内置提供了HashMap与RadixTree两种方式，HashMap实现简单通过简单封装<code>map</code>可以快速进行查询与插入，但范围搜索性能差。RadixTree即前缀树，查询插入的时间复杂度只与Key的长度相关，而且支持范围搜索，MossDB采用<a href="https://github.com/arriqaaq/art" target="_blank" rel="noopener noreffer">Adaptive Radix Tree</a>可以避免原生的前准树空间浪费。</p>
<p>由于RadixTree的特性，MossDB可以方便的进行前缀搜索，目前支持<code>List</code>与<code>Watch</code>操作。</p>
<h3 id="事务实现" class="headerLink">
    <a href="#%e4%ba%8b%e5%8a%a1%e5%ae%9e%e7%8e%b0" class="header-mark"></a>事务实现</h3><p>要实现事务必须要保证其ACID特性，MossDB的事务定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Tx</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span>      <span class="o">*</span><span class="nx">DB</span> <span class="c1">// DB实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">commits</span> <span class="p">[]</span><span class="o">*</span><span class="nx">Record</span> <span class="c1">// 对于写操作生成 Record, 用来做持久化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">undos</span>   <span class="p">[]</span><span class="o">*</span><span class="nx">Record</span> <span class="c1">// 对于写操作生成 Undo Record，用于回滚
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>MossDB中一次事务的流程主要包含以下几个步骤：</p>
<ol>
<li>首先加锁，保证其数据一致性</li>
<li>对于写操作，生成Commits和Undo Records，然后写入内存；读操作则直接执行</li>
<li>提交阶段，将Commits持久化到WAL中；若写入失败，则删除已写入数据；成功则设置数据的其他属性(TTL, Watch等)</li>
<li>若中间发生错误，执行回滚操作，将Undo Records的记录执行</li>
<li>事务完成，释放锁</li>
</ol>
<h3 id="watch" class="headerLink">
    <a href="#watch" class="header-mark"></a>Watch</h3><p>由于工作中经常使用Kubernetes，对于其Watch接口印象深刻，通过Watch来充当其事件总线，保证其声明式对象的管理。Kubernetes的Watch底层由etcd实现，MossDB也实现了类似的功能。</p>
<p>Watch的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Watcher</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mu</span>       <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span> <span class="c1">// 锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">watchers</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">SubWatcher</span> <span class="c1">// watchId与具体Watcher直接的映射
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">keys</span>     <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">containerx</span><span class="p">.</span><span class="nx">Set</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span> <span class="c1">// Watch单个key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ranges</span>   <span class="o">*</span><span class="nx">art</span><span class="p">.</span><span class="nx">Tree</span> <span class="c1">// 前缀Watch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">queue</span>    <span class="nx">workqueue</span><span class="p">.</span><span class="nx">WorkQueue</span> <span class="c1">// 工作队列，存放所有事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">stop</span>     <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span> <span class="c1">// 是否中止
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>通过<a href="https://github.com/qingwave/gocorex/blob/main/syncx/workqueue/workqueue.go" target="_blank" rel="noopener noreffer">工作队列</a>模式，任何写操作都会同步追加到队列中，如果存在单个key的监听者，则通过<code>watchers</code> map获取到对应列表，依次发送事件。对于前缀Watch，我们不可能记录此前缀的所有Key，这里借鉴了etcd，通过RadixTree保存<code>前缀Key</code>，当有新事件时，匹配Key所在的路径，如果有监听者，则进行事件通知。</p>
<p>调用Watch会返回一个Channel，用户只需要监听Channel即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">mossdb</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span> <span class="o">:=</span> <span class="s">&#34;watch-key&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="mi">1000</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// start watch key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;start watch key %s&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 模拟发送event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">Val</span><span class="p">(</span><span class="s">&#34;val1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">Val</span><span class="p">(</span><span class="s">&#34;val2&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">Val</span><span class="p">(</span><span class="s">&#34;val3&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;context done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;watch done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;receive event: %s, key: %s, new val: %s&#34;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">Op</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">Key</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">Val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Output
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 2023/02/23 09:48:50 start watch key watch-key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 receive event: MODIFY, key: watch-key, new val: val1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 receive event: MODIFY, key: watch-key, new val: val2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 receive event: DELETE, key: watch-key, new val:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 context done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h3 id="ttl" class="headerLink">
    <a href="#ttl" class="header-mark"></a>TTL</h3><p>过期删除再很多场景很有用，比如验证码过期、订单未支付关闭等。MossDB采用时间堆来实现精确的Key过期策略，具体原理可以参考之前的文章<a href="/golang-distributed-system-x-cron" rel="">Golang分布式应用之定时任务</a>，在查询操作时也会检查Key是否过期，如果过期则直接返回空数据。配合Watch操作可以精确管理数据的生命周期。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>至此，MossDB的实现细节已经分析完成，支持了事务、持久化、Watch与过期删除等特性，后续可能会支持HTTP API、存储快照等功能。</p>
<p>所有代码见<a href="https://github.com/qingwave/mossdb" target="_blank" rel="noopener noreffer">https://github.com/qingwave/mossdb</a>，欢迎批评指正以及Star。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>如何实现零宕机的配置热加载</title>
    <link>https://qingwave.github.io/config-reload/</link>
    <pubDate>Fri, 30 Sep 2022 10:37:17 &#43;0800</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/config-reload/</guid>
    <description><![CDATA[<p>对于高可用的服务，为了保证服务可用性，更新配置时必然不能直接停止服务，可以使用配置热加载来避免服务暂停，不需要重启服务。</p>
<p>配置的热加载可以分为两个场景，手动更新与自动更新。</p>
<h2 id="手动更新" class="headerLink">
    <a href="#%e6%89%8b%e5%8a%a8%e6%9b%b4%e6%96%b0" class="header-mark"></a>手动更新</h2><p>对于一些临时调试，服务数量不多的情况下，可以进行手动更新配置。需要实现两点，如何触发更新，以及接受到更新后如何操作。</p>
<p>触发更新的手段很多，常见的有</p>
<ul>
<li>通过命令行，例如<code>nginx -s reload</code></li>
<li>通过信号，通常是SIGHUP，比如sshd、Prometheus等，其实Nginx的热加载内部也是调用SIGHUP信号</li>
<li>HTTP接口，例如Prometheus也支持HTTP的方式通过<code>curl -X POST :9090/-/reload</code>可以重新加载配置</li>
<li>RPC接口，类似HTTP</li>
</ul>
<p>接受到配置更新通知后，需要程序内部来重新加载配置，类似初始化过程，但要注意运行时可以要加锁来保证线程安全。</p>
<h2 id="自动更新" class="headerLink">
    <a href="#%e8%87%aa%e5%8a%a8%e6%9b%b4%e6%96%b0" class="header-mark"></a>自动更新</h2><p>自动更新是建立手动更新的基础上，首先服务要提供手动更新的方法，其次可以通过服务本身或者外部进程来自动调用配置更新接口，外部程序可以使用SideCar的形式与服务绑定。</p>
<p>自动加载配置的关键是如何感知配置变化，要考虑到单机环境与分布式环境。</p>
<h3 id="单机环境" class="headerLink">
    <a href="#%e5%8d%95%e6%9c%ba%e7%8e%af%e5%a2%83" class="header-mark"></a>单机环境</h3><p>Linux提供了<a href="https://man7.org/linux/man-pages/man7/inotify.7.html" target="_blank" rel="noopener noreffer">inotify</a>接口，可以用来监听文件或者目录的增上改查事件。我们可以使用inotify来监听配置变化，如果有更新则调用更新接口来实现热加载。其他平台也提供了类似的接口。</p>
<p>在Golang中<a href="https://github.com/fsnotify/fsnotify" target="_blank" rel="noopener noreffer">fsnotify</a>提供了跨平台的文件监听接口，可以方便的监听文件，使用方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">    <span class="nx">watcher</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">fsnotify</span><span class="p">.</span><span class="nf">NewWatcher</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">watcher</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 监听目录或者文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">watcher</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;/tmp&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取监听事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">watcher</span><span class="p">.</span><span class="nx">Events</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;event:&#34;</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nx">event</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">fsnotify</span><span class="p">.</span><span class="nx">Write</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;modified file:&#34;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// 进行更新操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">watcher</span><span class="p">.</span><span class="nx">Errors</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;error:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}()</span>
</span></span></code></pre></div><h3 id="分布式环境" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e7%8e%af%e5%a2%83" class="header-mark"></a>分布式环境</h3><p>在分布式环境中实现配置热更新，需要能够感知配置（本地或者远端），对于本地配置需要平台配合将远端配置同步到本地（比如kubernetes会同步ConfigMap到Pod中），然后按照单机环境的方式来监听文件变化。</p>
<p>对于远端配置，需要依赖额外的分布式配置中心，比如Apollo、etcd、ZooKeeper等。以etcd为例，etcd提供了watch接口，可以监听对应配置的变化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 获取watch Channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">ch</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 处理事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">wr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;watch closed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wr</span><span class="p">.</span><span class="nx">Events</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">key</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">),</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">PUT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// 更新处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// 1. 对比配置是否变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// 2. 变化了更新内存中的配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">DELETE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// 删除处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></div><p>为了实现配置更新通知，通常有两种方式，Pull与Push。</p>
<ul>
<li>Pull就是客户端轮询，定期查询配置是否更新，这种方式实现简单，对服务器压力小，但时效性低</li>
<li>Push由服务端实现，通过维护一个长连接，实时推送数据，这种方式时效性高，但逻辑更复杂，连接过多会影响服务端性能。目前etcd v3版本是通过HTTP2来实现实时数据推送</li>
</ul>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文主要总结实现配置热更新的多种方式，手动更新可以通过Socket、信号等进程间通信手段来通知服务，自动更新可以通过inotify来感知配置变化，在分布式环境中就需要配合分布式配置中心来进行热更新。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>Golang分布式应用之etcd</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-etcd/</link>
    <pubDate>Sun, 07 Aug 2022 17:48:18 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-etcd/</guid>
    <description><![CDATA[<p>etcd是一个可靠的分布式KV存储数据库，由CoreOS开源。Kuberentes使用etcd作为其存储引擎，随着云原生的火热，etcd也逐渐广泛应用起来。</p>
<p>etcd除了作为普通的KV存储、配置存储，还可以用在以下分布式场景中：</p>
<ul>
<li>服务发现</li>
<li>分布式锁</li>
<li>选主</li>
<li>分布式队列</li>
<li>分布式系统协调</li>
<li>负载均衡</li>
</ul>
<p>本文结合Golang来编写对应的中间件，所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a></p>
<h2 id="服务发现" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0" class="header-mark"></a>服务发现</h2><p>在分布式系统中，如何能找到所需要访问的服务即服务发现。服务较少时可以直接访问其IP，但随着业务规模的扩大，维护其地址越来越复杂，如果服务频繁的扩缩容，必须能够实时感应服务的断点变化。
通常有多种方式可以解决</p>
<ol>
<li>系统级别，如LVS、DNS、Kubernetes中的Service、Istio等</li>
<li>微服务注册中心，如Spring Cloud中的Enruka，Dubbo等</li>
<li>借助分布式协调系统etcd、ZK、Consul等</li>
</ol>
<p>服务发现提供的功能包括：</p>
<ul>
<li>服务注册、注销</li>
<li>服务宕机或异常时，自动注销</li>
<li>感知服务端点变化</li>
</ul>
<p>借助etcd实现服务发现</p>
<ul>
<li>可以通过将端点写同一个目录(相同前缀，如/services/job/endpoint1, /services/job/endpoint2)，并通过Lease设置一个过期时间，不断刷新Lease，如果服务宕机，Lease过期对应端点会自动删除</li>
<li>通过Watch API可以监听端点变化</li>
</ul>
<p>主要代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="nx">EtcdDiscoveryConfig</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建session，session会自动续约
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">WithTTL</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">TTLSeconds</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSuffix</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#34;/&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">EtcdDiscovery</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EtcdDiscoveryConfig</span><span class="p">:</span> <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">session</span><span class="p">:</span>             <span class="nx">session</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">myKey</span><span class="p">:</span>               <span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">services</span><span class="p">:</span>            <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">)</span> <span class="nf">Register</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lease</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nf">Lease</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注册服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">lease</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">)</span> <span class="nf">UnRegister</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注销服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 监听端点变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">EtcdDiscovery</span><span class="p">)</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// context用来停止监听
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">watchCancel</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 首先获取所有端点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">services</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">kv</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Kvs</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">services</span><span class="p">[</span><span class="nb">string</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">)]</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d</span><span class="p">.</span><span class="nf">setServices</span><span class="p">(</span><span class="nx">services</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 回调点，用户可自定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStartedDiscovering</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStartedDiscovering</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nf">ListServices</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStoppedDiscovering</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStoppedDiscovering</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">d</span><span class="p">.</span><span class="nf">watchCancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 监听目录，通过WithPrefix可以添加子目录变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchContext</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">wr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;watch closed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">wr</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 将添加事件同步到本地端点列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wr</span><span class="p">.</span><span class="nx">Events</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">key</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">),</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">PUT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">d</span><span class="p">.</span><span class="nf">addService</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">DELETE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">d</span><span class="p">.</span><span class="nf">delService</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnServiceChanged</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">event</span> <span class="o">:=</span> <span class="nx">DiscoveryEvent</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">Event_EventType_name</span><span class="p">[</span><span class="nb">int32</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span><span class="p">)],</span> <span class="nx">Service</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nf">serviceFromKv</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">					<span class="nx">d</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnServiceChanged</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nf">ListServices</span><span class="p">(),</span> <span class="nx">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要实现逻辑如下：</p>
<ol>
<li>创建Session， Session中Lease会自动续约</li>
<li>服务注册时，在目录下创建对应的子目录，并附带Lease</li>
<li>通过Watch接口监听目录变化，同步到本地</li>
</ol>
<p>简单测试下，通过worker模拟不同的端点</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">clientv3</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Endpoints</span><span class="p">:</span>   <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;localhost:2379&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DialTimeout</span><span class="p">:</span> <span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create etcd lock: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">run</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;worker-%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">val</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;10.0.0.%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">sd</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">etcdiscovery</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">EtcdDiscoveryConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Client</span><span class="p">:</span>     <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Prefix</span><span class="p">:</span>     <span class="s">&#34;/services&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Key</span><span class="p">:</span>        <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Val</span><span class="p">:</span>        <span class="nx">val</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">TTLSeconds</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">DiscoveryCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStartedDiscovering</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">services</span> <span class="p">[]</span><span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">Service</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s], onstarted, services: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">services</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStoppedDiscovering</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s], onstoped&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnServiceChanged</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">services</span> <span class="p">[]</span><span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">Service</span><span class="p">,</span> <span class="nx">event</span> <span class="nx">etcdiscovery</span><span class="p">.</span><span class="nx">DiscoveryEvent</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s], onchanged, services: %v, event: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">services</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create service etcdiscovery: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">run</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">UnRegister</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to unregister service [%s]: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to register service [%s]: %v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sd</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to watch service: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">group</span><span class="p">.</span><span class="nf">NewGroup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Go</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">worker</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// unregister
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">worker</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>通过结果可以看到，服务可以正常的注册注销，并能实时监听端点变化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/08/08 08:44:02 <span class="o">[</span>worker-1<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:02 <span class="o">[</span>worker-2<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}]</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:02 <span class="o">[</span>worker-0<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-2<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>PUT <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-1<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>PUT <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-0<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}</span> <span class="o">{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}]</span>, event: <span class="o">{</span>PUT <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:04 <span class="o">[</span>worker-3<span class="o">]</span>, onstarted, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-2 worker-2 10.0.0.2<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-1<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-3<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}</span> <span class="o">{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-0<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span><span class="line"><span class="cl">2022/08/08 08:44:06 <span class="o">[</span>worker-2<span class="o">]</span>, onchanged, services: <span class="o">[{</span>/services/worker-0 worker-0 10.0.0.0<span class="o">}</span> <span class="o">{</span>/services/worker-1 worker-1 10.0.0.1<span class="o">}</span> <span class="o">{</span>/services/worker-3 worker-3 10.0.0.3<span class="o">}]</span>, event: <span class="o">{</span>DELETE <span class="o">{</span>/services/worker-2 worker-2 <span class="o">}}</span>
</span></span></code></pre></div><h2 id="分布式锁" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81" class="header-mark"></a>分布式锁</h2><p>在ECTD官方库<a href="https://pkg.go.dev/go.etcd.io/etcd/client/v3/concurrency" target="_blank" rel="noopener noreffer">go.etcd.io/etcd/client/v3/concurrency</a>中，已经支持分布式锁。</p>
<p>主要原理与之前通过<a href="/golang-distributed-system-x-redis" rel="">Redis</a>实现的分布式锁类似，如果目录创建成功则加锁成功，解锁直接删除即可。</p>
<p>etcd锁的使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 创建session并不断刷新
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">WithTTL</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">mutex</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewMutex</span><span class="p">(</span><span class="nx">session</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">defer</span> <span class="nx">mutext</span><span class="p">.</span><span class="nf">UnLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">do</span><span class="p">()</span><span class="o">...</span><span class="p">.</span>
</span></span></code></pre></div><p>加锁的核心逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Mutex</span><span class="p">)</span> <span class="nf">tryAcquire</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">v3</span><span class="p">.</span><span class="nx">TxnResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">s</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">s</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s%x&#34;</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">pfx</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cmp</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">Compare</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">CreateRevision</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">),</span> <span class="s">&#34;=&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// put self in lock waiters via myKey; oldest waiter holds lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">put</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">OpPut</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// reuse key in case this session already holds the lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">get</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">OpGet</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// fetch current holder to complete uncontended path with only one RPC
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">getOwner</span> <span class="o">:=</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">OpGet</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">pfx</span><span class="p">,</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">WithFirstCreate</span><span class="p">()</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Txn</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nf">If</span><span class="p">(</span><span class="nx">cmp</span><span class="p">).</span><span class="nf">Then</span><span class="p">(</span><span class="nx">put</span><span class="p">,</span> <span class="nx">getOwner</span><span class="p">).</span><span class="nf">Else</span><span class="p">(</span><span class="nx">get</span><span class="p">,</span> <span class="nx">getOwner</span><span class="p">).</span><span class="nf">Commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Revision</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Succeeded</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Responses</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">GetResponseRange</span><span class="p">().</span><span class="nx">Kvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">CreateRevision</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">resp</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>tryAcquire通过事务来执行加锁逻辑:</p>
<ol>
<li>判断当前Key是否为空，即代码中Revision为0</li>
<li>如果为空，使用Put设置并附加Lease</li>
<li>如果不为空，获取当前锁的所有者，即最先加锁的对象，避免惊群效应</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Mutex</span><span class="p">)</span> <span class="nf">Lock</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">tryAcquire</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// if no key on prefix / the minimum rev is key, already hold the lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ownerKey</span> <span class="o">:=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Responses</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">GetResponseRange</span><span class="p">().</span><span class="nx">Kvs</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ownerKey</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">ownerKey</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">CreateRevision</span> <span class="o">==</span> <span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">.</span><span class="nx">hdr</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">s</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nf">waitDeletes</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">pfx</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">myRev</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// release lock key if wait failed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">werr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nf">Ctx</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">werr</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// make sure the session is not expired, and the owner key still exists.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gresp</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">myKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Lock方法会一直阻塞，直到获取锁返回执行出错:</p>
<ol>
<li>调用tryAcquire</li>
<li>如果已经加锁成功，或者已经加过锁（可重入），则直接返回</li>
<li>调用waitDeletes方法，等待所有小于当前Revsion的Key删除</li>
</ol>
<h2 id="分布式选主" class="headerLink">
    <a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%80%89%e4%b8%bb" class="header-mark"></a>分布式选主</h2><p>对于有状态的服务，为了提供其服务水平SLA减少宕机时间，通过会有多个副本，当主节点宕机时，副本节点可以快速切换。</p>
<p>通过etcd可以实现选主服务，与分布式比较类似</p>
<ul>
<li>选主成功，不断上报心跳</li>
<li>通过Watch接口，当节点失效时，去竞争主(类似加锁过程)</li>
</ul>
<p>在ECTD官方库<a href="https://pkg.go.dev/go.etcd.io/etcd/client/v3/concurrency" target="_blank" rel="noopener noreffer">go.etcd.io/etcd/client/v3/concurrency</a>中，已经支持了分布式选主。</p>
<p>选主核心逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">Election</span><span class="p">)</span> <span class="nf">Campaign</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">val</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">session</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nf">Client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">k</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s%x&#34;</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">keyPrefix</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">txn</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Txn</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nf">If</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">Compare</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">CreateRevision</span><span class="p">(</span><span class="nx">k</span><span class="p">),</span> <span class="s">&#34;=&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">txn</span> <span class="p">=</span> <span class="nx">txn</span><span class="p">.</span><span class="nf">Then</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">OpPut</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">v3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">Lease</span><span class="p">())))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">txn</span> <span class="p">=</span> <span class="nx">txn</span><span class="p">.</span><span class="nf">Else</span><span class="p">(</span><span class="nx">v3</span><span class="p">.</span><span class="nf">OpGet</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">txn</span><span class="p">.</span><span class="nf">Commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">leaderKey</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leaderRev</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leaderSession</span> <span class="p">=</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Revision</span><span class="p">,</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Succeeded</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span> <span class="o">:=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Responses</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">GetResponseRange</span><span class="p">().</span><span class="nx">Kvs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="nx">e</span><span class="p">.</span><span class="nx">leaderRev</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">CreateRevision</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">string</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">val</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Proclaim</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">val</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">e</span><span class="p">.</span><span class="nf">Resign</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">waitDeletes</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">keyPrefix</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leaderRev</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// clean up in case of context cancel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="nx">e</span><span class="p">.</span><span class="nf">Resign</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nf">Ctx</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">e</span><span class="p">.</span><span class="nx">leaderSession</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">hdr</span> <span class="p">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Header</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>以上逻辑与ECTD锁中的实现非常相似</p>
<ol>
<li>开启事务，首先判断当前服务Key是否存在</li>
<li>不存在，通过Put设置对应值</li>
<li>存在获得当前目录最小Revision的值，即当前主节点</li>
<li>通过waitDeletes，直到当前进程的Revision</li>
</ol>
<p>简单封装下，支持回调，参考了Kubernetes的选主实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">config</span> <span class="nx">LeaderElectionConfig</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">WithTTL</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">LeaseSeconds</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">election</span> <span class="o">:=</span> <span class="nx">concurrency</span><span class="p">.</span><span class="nf">NewElection</span><span class="p">(</span><span class="nx">session</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Prefix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">EctdLeaderElection</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaderElectionConfig</span><span class="p">:</span> <span class="nx">config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">session</span><span class="p">:</span>              <span class="nx">session</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">election</span><span class="p">:</span>             <span class="nx">election</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 运行选主
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStoppedLeading</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加选主变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">le</span><span class="p">.</span><span class="nf">observe</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 开始选主
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">election</span><span class="p">.</span><span class="nf">Campaign</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Identity</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 选主完成，运行OnStarted，运行结束则退出选主
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStartedLeading</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 监听Key变化，执行回调
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">)</span> <span class="nf">observe</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnNewLeader</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">election</span><span class="p">.</span><span class="nf">Observe</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Kvs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">leader</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Kvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">leader</span> <span class="o">!=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Identity</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">go</span> <span class="nx">le</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnNewLeader</span><span class="p">(</span><span class="nx">leader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">EctdLeaderElection</span><span class="p">)</span> <span class="nf">Close</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">le</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>测试选主服务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">clientv3</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Endpoints</span><span class="p">:</span>   <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;localhost:2379&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DialTimeout</span><span class="p">:</span> <span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create etcd lock: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">prefix</span> <span class="o">:=</span> <span class="s">&#34;/worker/election&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">worker</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;worker-%d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderElectionConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Client</span><span class="p">:</span>       <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">LeaseSeconds</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Prefix</span><span class="p">:</span>       <span class="nx">prefix</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Identity</span><span class="p">:</span>     <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStartedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnStarted[%s]: acquire new leader&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnStarted[%s]: worker done&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnStoppedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnStopped[%s]: exit&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="nx">OnNewLeader</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">identity</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;OnNewLeader[%s]: new leader %s&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">identity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;failed to create leader election: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">le</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nf">worker</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022/08/08 09:33:32 OnNewLeader<span class="o">[</span>worker-2<span class="o">]</span>: new leader worker-3
</span></span><span class="line"><span class="cl">2022/08/08 09:33:32 OnNewLeader<span class="o">[</span>worker-1<span class="o">]</span>: new leader worker-3
</span></span><span class="line"><span class="cl">2022/08/08 09:33:32 OnStarted<span class="o">[</span>worker-3<span class="o">]</span>: acquire new leader
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnStarted<span class="o">[</span>worker-3<span class="o">]</span>: worker <span class="k">done</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnStopped<span class="o">[</span>worker-3<span class="o">]</span>: <span class="nb">exit</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnStarted<span class="o">[</span>worker-2<span class="o">]</span>: acquire new leader
</span></span><span class="line"><span class="cl">2022/08/08 09:34:02 OnNewLeader<span class="o">[</span>worker-1<span class="o">]</span>: new leader worker-2
</span></span><span class="line"><span class="cl">2022/08/08 09:34:32 OnStarted<span class="o">[</span>worker-2<span class="o">]</span>: worker <span class="k">done</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:32 OnStopped<span class="o">[</span>worker-2<span class="o">]</span>: <span class="nb">exit</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:34:32 OnStarted<span class="o">[</span>worker-1<span class="o">]</span>: acquire new leader
</span></span><span class="line"><span class="cl">2022/08/08 09:35:02 OnStarted<span class="o">[</span>worker-1<span class="o">]</span>: worker <span class="k">done</span>
</span></span><span class="line"><span class="cl">2022/08/08 09:35:02 OnStopped<span class="o">[</span>worker-1<span class="o">]</span>: <span class="nb">exit</span>
</span></span></code></pre></div><h2 id="发布订阅" class="headerLink">
    <a href="#%e5%8f%91%e5%b8%83%e8%ae%a2%e9%98%85" class="header-mark"></a>发布订阅</h2><p>借助etcd的前缀查找、Watch的功能，可以实现发布订阅功能，主要逻辑如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 发布时，直接通过Put将对象设置在对应Topic路径下，并可以设置Lease，自动删除过时消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ps</span> <span class="o">*</span><span class="nx">EtcdPubSub</span><span class="p">)</span> <span class="nf">Publish</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">topic</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">msg</span> <span class="nx">Msg</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">le</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nx">Lease</span><span class="p">.</span><span class="nf">Grant</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">ps</span><span class="p">.</span><span class="nx">TTLSeconds</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Prefix</span><span class="o">+</span><span class="nx">topic</span><span class="o">+</span><span class="s">&#34;/&#34;</span><span class="o">+</span><span class="nx">msg</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithLease</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">ID</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 订阅时，通过Watch来监听Topic是否有Put事件，这里忽略Delete事件
</span></span></span><span class="line"><span class="cl"><span class="c1">// Revision为0时，从当前时间点开始监听
</span></span></span><span class="line"><span class="cl"><span class="c1">// Revision为1时，监听Topic创建后的所有事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ps</span> <span class="o">*</span><span class="nx">EtcdPubSub</span><span class="p">)</span> <span class="nf">SubscribeFromRev</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">topic</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">rev</span> <span class="kt">int64</span><span class="p">)</span> <span class="p">(</span><span class="o">&lt;-</span><span class="kd">chan</span> <span class="nx">Msg</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wch</span> <span class="o">:=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Prefix</span><span class="o">+</span><span class="nx">topic</span><span class="p">,</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithPrefix</span><span class="p">(),</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithFilterDelete</span><span class="p">(),</span> <span class="nx">clientv3</span><span class="p">.</span><span class="nf">WithRev</span><span class="p">(</span><span class="nx">rev</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">msg</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">wc</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">wch</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ev</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wc</span><span class="p">.</span><span class="nx">Events</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Type</span> <span class="o">!=</span> <span class="nx">mvccpb</span><span class="p">.</span><span class="nx">PUT</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">break</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">name</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimPrefix</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Key</span><span class="p">),</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">Prefix</span><span class="o">+</span><span class="nx">topic</span><span class="o">+</span><span class="s">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">msg</span> <span class="o">&lt;-</span> <span class="nx">Msg</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">Val</span><span class="p">:</span> <span class="nb">string</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Kv</span><span class="p">.</span><span class="nx">Value</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">msg</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>发布时，直接通过PUT操作在Topic路径下设置消息；
订阅时，通过Watch来捕获消息，通过Revision来配置不同的监听行为</p>
<ul>
<li>Revision为0时，从当前时间点开始监听</li>
<li>Revision为1时，监听Topic创建后的所有事件</li>
</ul>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文主要结合Golang总结了etcd中服务发现、分布式锁、选主等实现方式，另外etcd还可以应用在发布订阅、负载均衡等方面。</p>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex</a>，欢迎批评指正。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item></channel>
</rss>
