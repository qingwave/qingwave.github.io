<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>cron - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/cron/</link>
        <description>cron - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Thu, 28 Jul 2022 16:07:56 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/tags/cron/" rel="self" type="application/rss+xml" /><item>
    <title>Golang分布式应用之定时任务</title>
    <link>https://qingwave.github.io/golang-distributed-system-x-cron/</link>
    <pubDate>Thu, 28 Jul 2022 16:07:56 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-distributed-system-x-cron/</guid>
    <description><![CDATA[<p>在系统开发中，有一类任务不是立即执行，而是在未来某个时间点或者按照一定间隔去执行，比如日志定期压缩、报表制作、过期数据清理等，这就是定时任务。</p>
<p>在单机中，定时任务通常需要实现一个类似crontab的系统，一般有两种方式：</p>
<ol>
<li>最小堆，按照任务执行时间建堆，每次取最近的任务执行</li>
<li>时间轮，将任务放到时间轮列表中，每次转动取对应的任务列表执行</li>
</ol>
<h2 id="最小堆" class="headerLink">
    <a href="#%e6%9c%80%e5%b0%8f%e5%a0%86" class="header-mark"></a>最小堆</h2><p>最小堆是一种特殊的完全二叉树，任意非叶子节点的值不大于其子节点，如图</p>
<p>

</p>
<p>通过最小堆，根据任务最近执行时间键堆，每次取堆顶元素即最近需要执行的任务，设置timer定时器，到期后触发任务执行。由于堆的特性每次调整的时间复杂度为O(lgN)，相较于普通队列性能更快。</p>
<p>在<code>container/heap</code>中已经实现操作堆的相关函数，我们只需要实现定期任务核心逻辑即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 运行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cron</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置cron已启动，atomic.Bool来保证并发安全
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nx">started</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 主循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果停止则退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">started</span><span class="p">.</span><span class="nf">Load</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">runTask</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 核心逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cron</span><span class="p">)</span> <span class="nf">runTask</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">now</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">duration</span> <span class="o">:=</span> <span class="nx">infTime</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取堆顶元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">task</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nf">Peek</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 如果已删除则弹出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 计算于当前时间查找，设置定时器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">duration</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">Sub</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">duration</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">timer</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTimer</span><span class="p">(</span><span class="nx">duration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">timer</span><span class="p">.</span><span class="nf">Stop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 当有新元素插入直接返回，防止新元素执行时间小于当前堆顶元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">c</span><span class="p">.</span><span class="nx">new</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">timer</span><span class="p">.</span><span class="nx">C</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 弹出任务，执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Exec</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 计算下次执行时间，如果为0说明任务已结束，否则重新入堆
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">task</span><span class="p">.</span><span class="nx">next</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Next</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">IsZero</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nf">Push</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>主要逻辑可总结为:</p>
<ol>
<li>将任务按照下次执行时间建最小堆</li>
<li>每次取堆顶任务，设置定时器</li>
<li>如果中间有新加入任务，转入步骤2</li>
<li>定时器到期后执行任务</li>
<li>再次取下个任务，转入步骤2，依次执行</li>
</ol>
<h2 id="时间轮" class="headerLink">
    <a href="#%e6%97%b6%e9%97%b4%e8%bd%ae" class="header-mark"></a>时间轮</h2><p>另一种实现Cron的方式是时间轮，时间轮通过一个环形队列，每个插槽放入需要到期执行的任务，按照固定间隔转动时间轮，取插槽中任务列表执行，如图所示:</p>
<p>

</p>
<p>时间轮可看作一个表盘，如图中时间间隔为1秒，总共60个格子，如果任务在3秒后执行则放为插槽3，每秒转动次取插槽上所有任务执行。</p>
<p>如果执行时间超过最大插槽，比如有个任务需要63秒后执行（超过了最大格子刻度），一般可以通过多层时间轮，或者设置一个额外变量圈数，只执行圈数为0的任务。</p>
<p>时间轮插入的时间复杂度为O(1)，获取任务列表复杂度为O(1)，执行列表最差为O(n)。对比最小堆，时间轮插入删除元素更快。</p>
<p>核心代码如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">TimeWheel</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">interval</span>    <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 触发间隔
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">slots</span>       <span class="kt">int</span> <span class="c1">// 总插槽数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">currentSlot</span> <span class="kt">int</span> <span class="c1">// 当前插槽数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tasks</span>       <span class="p">[]</span><span class="o">*</span><span class="nx">list</span><span class="p">.</span><span class="nx">List</span> <span class="c1">// 环形列表，每个元素为对应插槽的任务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">set</span>         <span class="nx">containerx</span><span class="p">.</span><span class="nx">Set</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span> <span class="c1">// 记录所有任务key值，用来检查任务是否被删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">tricker</span> <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Ticker</span> <span class="c1">// 定时触发器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span> <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">tw</span> <span class="o">*</span><span class="nx">TimeWheel</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tw</span><span class="p">.</span><span class="nx">tricker</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTicker</span><span class="p">(</span><span class="nx">tw</span><span class="p">.</span><span class="nx">interval</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 通过定时器模拟时间轮转动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">now</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">tw</span><span class="p">.</span><span class="nx">tricker</span><span class="p">.</span><span class="nx">C</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 转动一次，执行任务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tw</span><span class="p">.</span><span class="nf">RunTask</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="p">=</span> <span class="p">(</span><span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">slots</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">tw</span> <span class="o">*</span><span class="nx">TimeWheel</span><span class="p">)</span> <span class="nf">RunTask</span><span class="p">(</span><span class="nx">now</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">slot</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 一次执行任务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">item</span> <span class="o">:=</span> <span class="nx">taskList</span><span class="p">.</span><span class="nf">Front</span><span class="p">();</span> <span class="nx">item</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">Value</span><span class="p">.(</span><span class="o">*</span><span class="nx">TimeWheelTask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 任务圈数大于0，不需要执行，将圈数减一
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">task</span><span class="p">.</span><span class="nx">circle</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">task</span><span class="p">.</span><span class="nx">circle</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">			<span class="nx">item</span> <span class="p">=</span> <span class="nx">item</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 运行任务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">go</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Exec</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 计算任务下次运行时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">next</span> <span class="o">:=</span> <span class="nx">item</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">taskList</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">item</span> <span class="p">=</span> <span class="nx">next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">next</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Next</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">IsZero</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tw</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="nx">task</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tw</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 添加任务，计算下一次任务执行的插槽与圈数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">tw</span> <span class="o">*</span><span class="nx">TimeWheel</span><span class="p">)</span> <span class="nf">add</span><span class="p">(</span><span class="nx">now</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">task</span> <span class="o">*</span><span class="nx">TimeWheelTask</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">task</span><span class="p">.</span><span class="nx">initialized</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">next</span> <span class="p">=</span> <span class="nx">task</span><span class="p">.</span><span class="nf">Next</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">initialized</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">duration</span> <span class="o">:=</span> <span class="nx">task</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nf">Sub</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">duration</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">slot</span> <span class="p">=</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">circle</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mult</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">duration</span> <span class="o">/</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">interval</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">slot</span> <span class="p">=</span> <span class="p">(</span><span class="nx">tw</span><span class="p">.</span><span class="nx">currentSlot</span> <span class="o">+</span> <span class="nx">mult</span><span class="p">)</span> <span class="o">%</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">slots</span>
</span></span><span class="line"><span class="cl">		<span class="nx">task</span><span class="p">.</span><span class="nx">circle</span> <span class="p">=</span> <span class="nx">mult</span> <span class="o">/</span> <span class="nx">tw</span><span class="p">.</span><span class="nx">slots</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">tw</span><span class="p">.</span><span class="nx">tasks</span><span class="p">[</span><span class="nx">task</span><span class="p">.</span><span class="nx">slot</span><span class="p">].</span><span class="nf">PushBack</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tw</span><span class="p">.</span><span class="nx">set</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>时间轮的主要逻辑如下：</p>
<ol>
<li>将任务存在对应插槽的时间</li>
<li>通过定时间模拟时间轮转动</li>
<li>每次到期后遍历当前插槽的任务列表，若任务圈数为0则执行</li>
<li>如果任务未结束，计算下次执行的插槽与圈数</li>
<li>转入步骤2，依次执行</li>
</ol>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文主要总结了定时任务的两种实现方式，最小堆与时间轮，并分析其核心实现逻辑。</p>
<p>对于执行分布式定时任务，可以借助延时消息队列或者直接使用Kubernetes的CronJob。</p>
<p>自己开发的话可以借助Etcd：</p>
<ul>
<li>中心节点Coordinator将任务按照一定算法(Hash、轮询、或者更复杂的分配算法)将任务与工作节点Worker绑定</li>
<li>每个Worker添加到有绑定到自己的任务则取出放到本地的Cron中</li>
<li>如果Worker挂掉，执行将其上任务重新绑定即可</li>
</ul>
<p>本文所有代码见<a href="https://github.com/qingwave/gocorex/tree/main/cron" target="_blank" rel="noopener noreffer">https://github.com/qingwave/gocorex/tree/main/cron</a></p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item></channel>
</rss>
