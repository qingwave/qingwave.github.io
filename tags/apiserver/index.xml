<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>apiserver - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/apiserver/</link>
        <description>apiserver - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Wed, 11 Nov 2020 13:17:00 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/tags/apiserver/" rel="self" type="application/rss+xml" /><item>
    <title>kubernetes apiserver限流方案</title>
    <link>https://qingwave.github.io/k8s-rate-limit/</link>
    <pubDate>Wed, 11 Nov 2020 13:17:00 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-rate-limit/</guid>
    <description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>为了防止突发流量影响apiserver可用性，k8s支持多种限流配置，包括：</p>
<ul>
<li>MaxInFlightLimit，server级别整体限流</li>
<li>Client限流</li>
<li>EventRateLimit, 限制event</li>
<li>APF，更细力度的限制配置</li>
</ul>
<h3 id="maxinflightlimit" class="headerLink">
    <a href="#maxinflightlimit" class="header-mark"></a>MaxInFlightLimit</h3><p>MaxInFlightLimit限流，apiserver默认可设置最大并发量（集群级别，区分只读与修改操作），通过参数<code>--max-requests-inflight</code>和 <code>--max-mutating-requests-inflight</code>， 可以简单实现限流。</p>
<h3 id="client限流" class="headerLink">
    <a href="#client%e9%99%90%e6%b5%81" class="header-mark"></a>Client限流</h3><p>例如client-go默认的qps为5，但是只支持客户端限流，集群管理员无法控制用户行为。</p>
<h3 id="eventratelimit" class="headerLink">
    <a href="#eventratelimit" class="header-mark"></a>EventRateLimit</h3><p>EventRateLimit在1.13之后支持，只限制event请求，集成在apiserver内部webhoook中，可配置某个用户、namespace、server等event操作限制，通过webhook形式实现。</p>
<p>具体原理可以参考<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/#eventratelimit" target="_blank" rel="noopener noreffer">提案</a>，每个eventratelimit 配置使用一个单独的令牌桶限速器，每次event操作，遍历每个匹配的限速器检查是否能获取令牌，如果可以允许请求，否则返回<code>429</code>。</p>
<p><strong>优点</strong></p>
<ul>
<li>实现简单，允许一定量的并发</li>
<li>可支持server/namespace/user等级别的限流</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>仅支持event，通过webhook实现只能拦截修改类请求</li>
<li>所有namespace的限流相同，没有优先级</li>
</ul>
<h3 id="api-优先级和公平性" class="headerLink">
    <a href="#api-%e4%bc%98%e5%85%88%e7%ba%a7%e5%92%8c%e5%85%ac%e5%b9%b3%e6%80%a7" class="header-mark"></a>API 优先级和公平性</h3><p>apiserver默认的限流方式太过简单，一个错误的客户端发送大量请求可能造成其他客户端请求异常，也不支持突发流量。</p>
<p>API 优先级和公平性（APF）是MaxInFlightLimit限流的一种替代方案，设计文档见<a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-api-machinery/1040-priority-and-fairness" target="_blank" rel="noopener noreffer">提案</a>。</p>
<p>API 优先级和公平性（1.15以上，alpha版本）， 以更细粒度（byUser，byNamespace）对请求进行分类和隔离。 支持突发流量，通过使用公平排队技术从队列中分发请求从而避免饥饿。</p>
<p>APF限流通过两种资源，<code>PriorityLevelConfigurations</code>定义隔离类型和可处理的并发预算量，还可以调整排队行为。 <code>FlowSchemas</code>用于对每个入站请求进行分类，并与一个 <code>PriorityLevelConfigurations</code>相匹配。</p>
<p>可对用户或用户组或全局进行某些资源某些请求的限制，如限制default namespace写services put/patch请求。</p>
<p><strong>优点</strong></p>
<ul>
<li>考虑情况较全面，支持优先级，白名单等</li>
<li>可支持server/namespace/user/resource等细粒度级别的限流</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>配置复杂，不直观，需要对APF原理深入了解</li>
<li>功能较新，缺少生产环境验证</li>
</ul>
<p><strong>APF测试</strong>
开启APF，需要在apiserver配置<code>--feature-gates=APIPriorityAndFairness=true --runtime-config=flowcontrol.apiserver.k8s.io/v1alpha1=true</code></p>
<p>开启后，获取默认的FlowSchemas</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get flowschemas.flowcontrol.apiserver.k8s.io 
</span></span><span class="line"><span class="cl">NAME                           PRIORITYLEVEL     MATCHINGPRECEDENCE   DISTINGUISHERMETHOD   AGE    MISSINGPL
</span></span><span class="line"><span class="cl">system-leader-election         leader-election   <span class="m">100</span>                  ByUser                152m   False
</span></span><span class="line"><span class="cl">workload-leader-election       leader-election   <span class="m">200</span>                  ByUser                152m   False
</span></span><span class="line"><span class="cl">system-nodes                   system            <span class="m">500</span>                  ByUser                152m   False
</span></span><span class="line"><span class="cl">kube-controller-manager        workload-high     <span class="m">800</span>                  ByNamespace           152m   False
</span></span><span class="line"><span class="cl">kube-scheduler                 workload-high     <span class="m">800</span>                  ByNamespace           152m   False
</span></span><span class="line"><span class="cl">kube-system-service-accounts   workload-high     <span class="m">900</span>                  ByNamespace           152m   False
</span></span><span class="line"><span class="cl">health-for-strangers           exempt            <span class="m">1000</span>                 &lt;none&gt;                151m   False
</span></span><span class="line"><span class="cl">service-accounts               workload-low      <span class="m">9000</span>                 ByUser                152m   False
</span></span><span class="line"><span class="cl">global-default                 global-default    <span class="m">9900</span>                 ByUser                152m   False
</span></span><span class="line"><span class="cl">catch-all                      catch-all         <span class="m">10000</span>                ByUser                152m   False
</span></span></code></pre></div><p>FlowShema配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">flowcontrol.apiserver.k8s.io/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">FlowSchema</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">health-for-strangers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">matchingPrecedence</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w"> </span><span class="c">#匹配优先级，1~1000，越小优先级越高</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">priorityLevelConfiguration</span><span class="p">:</span><span class="w"> </span><span class="c">#关联的PriorityLevelConfigurations</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">exempt</span><span class="w"> </span><span class="c">#排除rules，即不限制当前flowshema的rules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w"> </span><span class="c">#请求规则</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">nonResourceRules</span><span class="p">:</span><span class="w"> </span><span class="c">#非资源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">nonResourceURLs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;/healthz&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;/livez&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;/readyz&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">verbs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;*&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">subjects</span><span class="p">:</span><span class="w"> </span><span class="c">#对应的用户或用户组</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">group</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">system:unauthenticated</span><span class="w">
</span></span></span></code></pre></div><p>PriorityLevelConfiguration配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">flowcontrol.apiserver.k8s.io/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PriorityLevelConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">leader-election</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">limited</span><span class="p">:</span><span class="w"> </span><span class="c">#限制策略</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">assuredConcurrencyShares</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">limitResponse</span><span class="p">:</span><span class="w"> </span><span class="c">#如何处理被限制的请求</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">queuing</span><span class="p">:</span><span class="w"> </span><span class="c">#类型为Queue时，列队的设置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">handSize</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w"> </span><span class="c">#队列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">queueLengthLimit</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w"> </span><span class="c">#队列长度</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">queues</span><span class="p">:</span><span class="w"> </span><span class="m">16</span><span class="w"> </span><span class="c">#队列数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Queue</span><span class="w"> </span><span class="c">#Queue或者Reject，Reject直接返回429，Queue将请求加入队列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Limited</span><span class="w"> </span><span class="c">#类型，Limited或Exempt， Exempt即不限制</span><span class="w">
</span></span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>以上是k8s相关的限流策略，通过多种策略来保证集群的稳定性。</p>
<p>目前MaxInFlightLimit可以轻松开启，但是限制策略不精细，而APF功能较新，实现较复杂，在充分验证后，可通过APF对全集群进行限流。</p>
]]></description>
</item><item>
    <title>可能是史上最全的Kubernetes证书解析</title>
    <link>https://qingwave.github.io/k8s-tls/</link>
    <pubDate>Sat, 25 Apr 2020 08:53:03 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-tls/</guid>
    <description><![CDATA[<p>为了避免广告法，题目还是加个可能吧。</p>
<p>想要安全就必须复杂起来，证书是少不了的。在Kubernetes中提供了非常丰富的证书类型，满足各种不同场景的需求，今天我们就来看一看Kubernetes中的证书。</p>
<h2 id="k8s证书分类" class="headerLink">
    <a href="#k8s%e8%af%81%e4%b9%a6%e5%88%86%e7%b1%bb" class="header-mark"></a>k8s证书分类</h2><p>在说证书之前，先想想作为集群的入口apiserver需要提供那些服务，与那些组件通信，通信的两方可能需要配置证书。
与apiserver通信的组件大体可以分为以下几类：</p>
<ul>
<li>client(kubectl，restapi等)：普通用户与apiserver之间的通信，对各类资源进行操作</li>
<li>kubelet，kubeproxy：master与node之间的通信</li>
<li>etcd：k8s的存储库</li>
<li>webhook：这里指apiserver提供的admission-webhook，在数据持久化前调用webhook</li>
<li>aggregation layer：扩展apiserver, 需要将自定义的api注册到k8s中，相比CRD性能更新</li>
<li>pod: 在pod中调用apiserver(一般调用为10.254.0.1:433)</li>
</ul>
<p>居然有这么多种，除了在pod中通过serviceacount认证（当然pod需要认证apiserver的证书），其他几种都需要配置证书。</p>
<p>其他集群内组件与apiserver通信的，kubelet/etcd/kube-proxy对应的也可以配置证书。</p>
<h2 id="apiserver证书" class="headerLink">
    <a href="#apiserver%e8%af%81%e4%b9%a6" class="header-mark"></a>apiserver证书</h2><p>简单列举下apiserver证书相关的启动参数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--cert-dir string                           The directory where the TLS certs are located. If --tls-cert-file and --tls-private-key-file are provided, this flag will be ignored. (default &#34;/var/run/kubernetes&#34;)
</span></span><span class="line"><span class="cl">--client-ca-file string                     If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.
</span></span><span class="line"><span class="cl">--etcd-certfile string                      SSL certification file used to secure etcd communication.
</span></span><span class="line"><span class="cl">--etcd-keyfile string                       SSL key file used to secure etcd communication.
</span></span><span class="line"><span class="cl">--kubelet-certificate-authority string      Path to a cert file for the certificate authority.
</span></span><span class="line"><span class="cl">--kubelet-client-certificate string         Path to a client cert file for TLS.
</span></span><span class="line"><span class="cl">--kubelet-client-key string                 Path to a client key file for TLS.
</span></span><span class="line"><span class="cl">--proxy-client-cert-file string             Client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins. It is expected that this cert includes a signature from the CA in the --requestheader-client-ca-file flag. That CA is published in the &#39;extension-apiserver-authentication&#39; configmap in the kube-system namespace. Components recieving calls from kube-aggregator should use that CA to perform their half of the mutual TLS verification.
</span></span><span class="line"><span class="cl">--proxy-client-key-file string              Private key for the client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins.
</span></span><span class="line"><span class="cl">--requestheader-allowed-names stringSlice   List of client certificate common names to allow to provide usernames in headers specified by --requestheader-username-headers. If empty, any client certificate validated by the authorities in --requestheader-client-ca-file is allowed.
</span></span><span class="line"><span class="cl">--requestheader-client-ca-file string       Root certificate bundle to use to verify client certificates on incoming requests before trusting usernames in headers specified by --requestheader-username-headers
</span></span><span class="line"><span class="cl">--service-account-key-file stringArray      File containing PEM-encoded x509 RSA or ECDSA private or public keys, used to verify ServiceAccount tokens. If unspecified, --tls-private-key-file is used. The specified file can contain multiple keys, and the flag can be specified multiple times with different files.
</span></span><span class="line"><span class="cl">--ssh-keyfile string                        If non-empty, use secure SSH proxy to the nodes, using this user keyfile
</span></span><span class="line"><span class="cl">--tls-ca-file string                        If set, this certificate authority will used for secure access from Admission Controllers. This must be a valid PEM-encoded CA bundle. Alternatively, the certificate authority can be appended to the certificate provided by --tls-cert-file.
</span></span><span class="line"><span class="cl">--tls-cert-file string                      File containing the default x509 Certificate for HTTPS. (CA cert, if any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to /var/run/kubernetes.
</span></span><span class="line"><span class="cl">--tls-private-key-file string               File containing the default x509 private key matching --tls-cert-file.
</span></span><span class="line"><span class="cl">--tls-sni-cert-key namedCertKey             A pair of x509 certificate and private key file paths, optionally suffixed with a list of domain patterns which are fully qualified domain names, possibly with prefixed wildcard segments. If no domain patterns are provided, the names of the certificate are extracted. Non-wildcard matches trump over wildcard matches, explicit domain patterns trump over extracted names. For multiple key/certificate pairs, use the --tls-sni-cert-key multiple times. Examples: &#34;example.crt,example.key&#34; or &#34;foo.crt,foo.key:*.foo.com,foo.com&#34;. (default [])
</span></span><span class="line"><span class="cl">--oidc-ca-file string                       If set, the OpenID server&#39;s certificate will be verified by one of the authorities in the oidc-ca-file, otherwise the host&#39;s root CA set will be used.
</span></span><span class="line"><span class="cl">--tls-sni-cert-key namedCertKey             A pair of x509 certificate and private key file paths, optionally suffixed with a list of domain patterns which are fully qualified domain names, possibly with prefixed wildcard segments. If no domain patterns are provided, the names of the certificate are extracted. Non-wildcard matches trump over wildcard matches, explicit domain patterns trump over extracted names. For multiple key/certificate pairs, use the --tls-sni-cert-key multiple times. Examples: &#34;example.crt,example.key&#34; or &#34;foo.crt,foo.key:*.foo.com,foo.com&#34;. (default [])
</span></span></code></pre></div><p>不要害怕，咱们一个个看。</p>
<h3 id="tls证书" class="headerLink">
    <a href="#tls%e8%af%81%e4%b9%a6" class="header-mark"></a>tls证书</h3><p>首先，apiserver本身是一个http服务器，需要tls证书</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--tls-cert-file string
</span></span><span class="line"><span class="cl">    File containing the default x509 Certificate for HTTPS. (CA cert, if any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory specified by --cert-dir.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--tls-private-key-file string
</span></span><span class="line"><span class="cl">    File containing the default x509 private key matching --tls-cert-file.
</span></span><span class="line"><span class="cl">其他client验证apiserver时可以通过签署这两个证书的CA，我们称为`tls-ca`
</span></span></code></pre></div><h3 id="client证书" class="headerLink">
    <a href="#client%e8%af%81%e4%b9%a6" class="header-mark"></a>client证书</h3><p>apiserver提供了tls证书，同样也需要验证client的配置，但是client太多了(kubectl,各种restapi调用的), 这些client需要统一用一个CA签发，我们称为<code>client-ca</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--client-ca-file string
</span></span><span class="line"><span class="cl">    If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.
</span></span></code></pre></div><p>需要注意的是，在apiserver认证中，通过<code>CN</code>和<code>O</code>来识别用户，开启RBAC的用户要配置<code>CN</code>和<code>O</code>做一些授权：</p>
<ul>
<li>CN：Common Name，kube-apiserver 从证书中提取作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</li>
<li>O：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)</li>
</ul>
<p>如kube-proxy的证书申请, User为<code>system:kube-proxy</code>, Group为<code>k8s</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;CN&#34;</span><span class="p">:</span> <span class="s2">&#34;system:kube-proxy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;hosts&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;algo&#34;</span><span class="p">:</span> <span class="s2">&#34;rsa&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">2048</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;names&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;C&#34;</span><span class="p">:</span> <span class="s2">&#34;CN&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;ST&#34;</span><span class="p">:</span> <span class="s2">&#34;BeiJing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;L&#34;</span><span class="p">:</span> <span class="s2">&#34;BeiJing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;O&#34;</span><span class="p">:</span> <span class="s2">&#34;k8s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;OU&#34;</span><span class="p">:</span> <span class="s2">&#34;System&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="requestheader证书" class="headerLink">
    <a href="#requestheader%e8%af%81%e4%b9%a6" class="header-mark"></a>requestheader证书</h3><p>apiserver可以使用HTTP请求头中的指定字段来进行认证，相关配置如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--requestheader-allowed-names stringSlice
</span></span><span class="line"><span class="cl">    List of client certificate common names to allow to provide usernames in headers specified by --requestheader-username-headers. If empty, any client certificate validated by the authorities in --requestheader-client-ca-file is allowed.
</span></span><span class="line"><span class="cl">--requestheader-client-ca-file string
</span></span><span class="line"><span class="cl">    Root certificate bundle to use to verify client certificates on incoming requests before trusting usernames in headers specified by --requestheader-username-headers. WARNING: generally do not depend on authorization being already done for incoming requests.
</span></span><span class="line"><span class="cl">--requestheader-extra-headers-prefix strings        
</span></span><span class="line"><span class="cl">    List of request header prefixes to inspect. X-Remote-Extra- is suggested.
</span></span><span class="line"><span class="cl">--requestheader-group-headers strings               
</span></span><span class="line"><span class="cl">    List of request headers to inspect for groups. X-Remote-Group is suggested.
</span></span><span class="line"><span class="cl">--requestheader-username-headers strings            
</span></span><span class="line"><span class="cl">    List of request headers to inspect for usernames. X-Remote-User is common.
</span></span></code></pre></div><p>收到请求时，apiserver会首先认证<code>requsetheader-ca</code>，验证成功并且<code>CN</code>在<code>requestheader-allowed-names</code>（默认全部需求）中，然后通过Http header中的<code>X-Remote-User, X-Remote-Group</code>去得到用户；如果匹配不成功回去验证<code>client-ca</code>。</p>
<p>如上，<code>requestheader</code>证书与<code>client-ca</code>不能是同一个。</p>
<h3 id="proxy证书" class="headerLink">
    <a href="#proxy%e8%af%81%e4%b9%a6" class="header-mark"></a>proxy证书</h3><p>k8s提供了丰富的扩展机制，CRD与[API Aggregation][https://kubernetes.io/zh/docs/tasks/access-kubernetes-api/configure-aggregation-layer/]。
对于API Aggregation(例如metrics-server提供了metrics.k8s.io api), apiserver接受到请求后经过一系列验证过滤，会将请求转发到扩展API，这里apisever作为代理服务器，需要配置配置证书。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--proxy-client-cert-file string             
</span></span><span class="line"><span class="cl">    Client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins. It is expected that this cert includes a signature from the CA in the --requestheader-client-ca-file flag. That CA is published in the &#39;extension-apiserver-authentication&#39; configmap in the kube-system namespace. Components recieving calls from kube-aggregator should use that CA to perform their half of the mutual TLS verification.
</span></span><span class="line"><span class="cl">--proxy-client-key-file string              
</span></span><span class="line"><span class="cl">    Private key for the client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins.
</span></span></code></pre></div><p>需要注意的是对证书需要通过<code>requestheader-ca</code>签发，扩展api会通过requestheader证书去验证，具体流程后面会写一篇，下图为官方提供的流程


</p>
<h3 id="kubelet证书" class="headerLink">
    <a href="#kubelet%e8%af%81%e4%b9%a6" class="header-mark"></a>kubelet证书</h3><p>对于kubelet，apiserver单独提供了证书配置选项，同时kubelet组件也提供了反向设置的相关选项:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># API Server
</span></span><span class="line"><span class="cl">--kubelet-certificate-authority string
</span></span><span class="line"><span class="cl">    Path to a cert file for the certificate authority.
</span></span><span class="line"><span class="cl">--kubelet-client-certificate string
</span></span><span class="line"><span class="cl">    Path to a client cert file for TLS.
</span></span><span class="line"><span class="cl">--kubelet-client-key string
</span></span><span class="line"><span class="cl">    Path to a client key file for TLS.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># kubelet
</span></span><span class="line"><span class="cl">--client-ca-file string
</span></span><span class="line"><span class="cl">    If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.
</span></span><span class="line"><span class="cl">--tls-cert-file string 
</span></span><span class="line"><span class="cl">    File containing x509 Certificate used for serving HTTPS (with intermediate certs, if any, concatenated after server cert). If --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory passed to --cert-dir.
</span></span><span class="line"><span class="cl">--tls-private-key-file string
</span></span><span class="line"><span class="cl">    File containing x509 private key matching --tls-cert-file.
</span></span></code></pre></div><p>kubelet也是即作为server也作为client, 需要提供tls证书和client-ca, 我们称这个CA为<code>kubelet-ca</code>, 可以是单独的CA。</p>
<h3 id="etcd证书" class="headerLink">
    <a href="#etcd%e8%af%81%e4%b9%a6" class="header-mark"></a>etcd证书</h3><p>这个也不用多说，用来连接etcd，由<code>etcd-ca</code>签发</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--etcd-certfile string                      SSL certification file used to secure etcd communication.
</span></span><span class="line"><span class="cl">--etcd-keyfile string                       SSL key file used to secure etcd communication.
</span></span></code></pre></div><h3 id="serviceaccount证书" class="headerLink">
    <a href="#serviceaccount%e8%af%81%e4%b9%a6" class="header-mark"></a>serviceaccount证书</h3><p>在k8s中，通过<code>JWT</code>认证<code>serviecaccount</code>，同样有两个证书配置:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># apiserver
</span></span><span class="line"><span class="cl">--service-account-key-file stringArray # 用于验证sa
</span></span><span class="line"><span class="cl">    File containing PEM-encoded x509 RSA or ECDSA private or public keys, used to verify ServiceAccount tokens. The specified file can contain multiple keys, and the flag can be specified multiple times with different files. If unspecified, --tls-private-key-file is used. Must be specified when --service-account-signing-key is provided
</span></span><span class="line"><span class="cl">--service-account-signing-key-file string
</span></span><span class="line"><span class="cl">    Path to the file that contains the current private key of the service account token issuer. The issuer will sign issued ID tokens with this private key. (Requires the &#39;TokenRequest&#39; feature gate.)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># controller-manager
</span></span><span class="line"><span class="cl">–service-account-private-key-file #用于签署sa
</span></span></code></pre></div><p>这两个配置描述了对<code>serviceaccount</code>进行签名验证时所使用的证书；可以是单独的生成，我们称为<code>sa-key</code>。</p>
<h2 id="其他证书" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96%e8%af%81%e4%b9%a6" class="header-mark"></a>其他证书</h2><p>其他还有<code>oidc</code>证书，用于OpenID认证；<code>ssh</code>证书，用来连接node，目前以及废弃。</p>
<p>etcd与kubelet证书上面已经提过了，需要双方都配置。</p>
<p>k8s中也支持证书申请，用户可以创建<code>CertificateSigningRequest</code>来申请证书，需要在controller-manager配置下面的证书，用于签发证书称为<code>sing-ca</code>，多用于webhook的证书配置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--cluster-signing-cert-file string          Filename containing a PEM-encoded X509 CA certificate used to issue cluster-scoped certificates (default &#34;/etc/kubernetes/ca/ca.pem&#34;)
</span></span><span class="line"><span class="cl">--cluster-signing-key-file string           Filename containing a PEM-encoded RSA or ECDSA private key used to sign cluster-scoped certificates (default &#34;/etc/kubernetes/ca/ca.key&#34;)
</span></span></code></pre></div><h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>k8s提供了强大的功能，需要考虑到各个场景的安全问题，上面我们梳理了遍目前常用的证书</p>
<ul>
<li>tls-ca</li>
<li>client-ca</li>
<li>requestheader-ca</li>
<li>proxy-ca</li>
<li>kubelet-ca</li>
<li>etcd-ca</li>
<li>sa-key</li>
<li>sign-ca</li>
</ul>
<p>上面除了<code>proxy-ca</code>必须使用<code>requestheader-ca</code>签发，其他所有的都可以是单独的CA，可以根据安全性评估是使用一个CA还是多个CA，我们建议下面的CA尽量是独立的</p>
<ul>
<li>client-ca</li>
<li>requestheader-ca</li>
<li>etcd-ca</li>
<li>kubelet-ca</li>
<li>sign-ca</li>
</ul>
<p>终于理完了，可以起床啦。</p>
]]></description>
</item><item>
    <title>kube-apiserver启动流程分析</title>
    <link>https://qingwave.github.io/kube-apiserver-start/</link>
    <pubDate>Fri, 24 Apr 2020 15:28:16 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/kube-apiserver-start/</guid>
    <description><![CDATA[<p>kube-apiserver 共由 3 个组件构成（Aggregator. KubeAPIServer. APIExtensionServer），这些组件依次通过 Delegation 处理请求：</p>
<ul>
<li>Aggregator：暴露的功能类似于一个七层负载均衡，将来自用户的请求拦截转发给其他服务器，并且负责整个 APIServer 的 Discovery 功能；也负责处理ApiService，注册对应的扩展api。</li>
<li>KubeAPIServer ：负责对请求的一些通用处理，认证. 鉴权等，以及处理各个内建资源的 REST 服务；</li>
<li>APIExtensionServer：主要处理 CustomResourceDefinition（CRD）和 CustomResource（CR）的 REST 请求，也是 Delegation 的最后一环，如果对应 CR 不能被处理的话则会返回 404。</li>
</ul>
<h2 id="kube-apiserver启动流程" class="headerLink">
    <a href="#kube-apiserver%e5%90%af%e5%8a%a8%e6%b5%81%e7%a8%8b" class="header-mark"></a>kube-apiserver启动流程</h2><p>Apiserver通过<code>Run</code>方法启动, 主要逻辑为：</p>
<ol>
<li>调用<code>CreateServerChain</code>构建服务调用链并判断是否启动非安全的<code>httpserver</code>，<code>httpserver</code>链中包含 apiserver要启动的三个server，以及为每个server注册对应资源的路由；</li>
<li>调用<code>server.PrepareRun</code>进行服务运行前的准备，该方法主要完成了健康检查. 存活检查和OpenAPI路由的注册工作；</li>
<li>调用<code>prepared.Run</code>启动server；</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// Run runs the specified APIServer.  This should never exit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">completeOptions</span> <span class="nx">completedServerRunOptions</span><span class="p">,</span> <span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// To help debugging, immediately log version
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Version: %+v&#34;</span><span class="p">,</span> <span class="nx">version</span><span class="p">.</span><span class="nf">Get</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 创建调用链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">server</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">CreateServerChain</span><span class="p">(</span><span class="nx">completeOptions</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 进行一些准备工作， 注册一些hander，执行hook等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">prepared</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">server</span><span class="p">.</span><span class="nf">PrepareRun</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 开始执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">prepared</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>执行具体的<code>Run</code>方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// Run spawns the secure http server. It only returns if stopCh is closed
</span></span></span><span class="line"><span class="cl"><span class="c1">// or the secure port cannot be listened on initially.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">preparedGenericAPIServer</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">delayedStopCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">delayedStopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// As soon as shutdown is initiated, /readyz should start returning failure.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// This gives the load balancer a window defined by ShutdownDelayDuration to detect that /readyz is red
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// and stop sending traffic to this server.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 当终止时，关闭readiness
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nb">close</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">readinessStopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">ShutdownDelayDuration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 执行非阻塞Run
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// close socket after delayed stopCh
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nf">NonBlockingRun</span><span class="p">(</span><span class="nx">delayedStopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// run shutdown hooks directly. This includes deregistering from the kubernetes endpoint in case of kube-apiserver.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 关闭前执行一些hook操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nf">RunPreShutdownHooks</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// wait for the delayed stopCh before closing the handler chain (it rejects everything after Wait has been called).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">&lt;-</span><span class="nx">delayedStopCh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 等待所有请求执行完
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Wait for all requests to finish, which are bounded by the RequestTimeout variable.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span><span class="p">.</span><span class="nx">HandlerChainWaitGroup</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>执行<code>NonBlockingRun</code>
<code>k8s.io/kubernetes/staging/src/k8s.io/apiserver/pkg/server/genericapiserver.go:351</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">preparedGenericAPIServer</span><span class="p">)</span> <span class="nf">NonBlockingRun</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">auditStopCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 1. 判断是否要启动审计日志
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">AuditBackend</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">AuditBackend</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">auditStopCh</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to run the audit backend: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 2. 启动 https server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">internalStopCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">stoppedCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">SecureServingInfo</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Handler</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">        <span class="nx">stoppedCh</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">SecureServingInfo</span><span class="p">.</span><span class="nf">Serve</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Handler</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">ShutdownTimeout</span><span class="p">,</span> <span class="nx">internalStopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nb">close</span><span class="p">(</span><span class="nx">internalStopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nb">close</span><span class="p">(</span><span class="nx">auditStopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">        <span class="nb">close</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">readinessStopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">close</span><span class="p">(</span><span class="nx">internalStopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">stoppedCh</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;-</span><span class="nx">stoppedCh</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">s</span><span class="p">.</span><span class="nx">HandlerChainWaitGroup</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">close</span><span class="p">(</span><span class="nx">auditStopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 3. 执行 postStartHooks
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">s</span><span class="p">.</span><span class="nf">RunPostStartHooks</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 4. 向 systemd 发送 ready 信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">systemd</span><span class="p">.</span><span class="nf">SdNotify</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="s">&#34;READY=1\n&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Unable to send systemd daemon successful start message: %v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="调用链分析" class="headerLink">
    <a href="#%e8%b0%83%e7%94%a8%e9%93%be%e5%88%86%e6%9e%90" class="header-mark"></a>调用链分析</h2><p>上一节简单分析了Apiserver的启动流程，通过初始化各种配置，封装调用链，启动Server。这节主要分析调用链。</p>
<p>初始化阶段, 通过<code>CreateServerChain</code>创建调用链， 代码在<a href="https://github.com/kubernetes/kubernetes/blob/1d057da2f73118893b5cc27c15d59ff03beb271e/cmd/kube-apiserver/app/server.go#L169" target="_blank" rel="noopener noreffer">server.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// CreateServerChain creates the apiservers connected via delegation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">CreateServerChain</span><span class="p">(</span><span class="nx">completedOptions</span> <span class="nx">completedServerRunOptions</span><span class="p">,</span> <span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">(</span><span class="o">*</span><span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">APIAggregator</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// nodetunneler与node通信，proxy实现代理功能，转发请求给其他apiservice
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// apiserver到cluster的通信可以通过三种方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// apiserver到kubelet的endpoint，用于logs功能，exec功能，port-forward功能
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// HTTP连接，即使可以用HTTPS也不做任何其他校验，并不安全
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// ssh tunnel，不推荐使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nx">nodeTunneler</span><span class="p">,</span> <span class="nx">proxyTransport</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">CreateNodeDialer</span><span class="p">(</span><span class="nx">completedOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 1. 为 kubeAPIServer 创建配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">kubeAPIServerConfig</span><span class="p">,</span> <span class="nx">insecureServingInfo</span><span class="p">,</span> <span class="nx">serviceResolver</span><span class="p">,</span> <span class="nx">pluginInitializer</span><span class="p">,</span> <span class="nx">admissionPostStartHook</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span>                                         <span class="nf">CreateKubeAPIServerConfig</span><span class="p">(</span><span class="nx">completedOptions</span><span class="p">,</span> <span class="nx">nodeTunneler</span><span class="p">,</span> <span class="nx">proxyTransport</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 2. 判断是否配置了 APIExtensionsServer，创建 apiExtensionsConfig 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">apiExtensionsConfig</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">createAPIExtensionsConfig</span><span class="p">(</span><span class="o">*</span><span class="nx">kubeAPIServerConfig</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">,</span> <span class="nx">kubeAPIServerConfig</span><span class="p">.</span><span class="nx">ExtraConfig</span><span class="p">.</span><span class="nx">VersionedInformers</span><span class="p">,</span>        <span class="nx">pluginInitializer</span><span class="p">,</span> <span class="nx">completedOptions</span><span class="p">.</span><span class="nx">ServerRunOptions</span><span class="p">,</span> <span class="nx">completedOptions</span><span class="p">.</span><span class="nx">MasterCount</span><span class="p">,</span><span class="nx">vc</span>
</span></span><span class="line"><span class="cl">        <span class="nx">serviceResolver</span><span class="p">,</span> <span class="nx">webhook</span><span class="p">.</span><span class="nf">NewDefaultAuthenticationInfoResolverWrapper</span><span class="p">(</span><span class="nx">proxyTransport</span><span class="p">,</span> <span class="nx">kubeAPIServerConfig</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 3. 初始化 APIExtensionsServer, 通过一个空的delegate初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">apiExtensionsServer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">createAPIExtensionsServer</span><span class="p">(</span><span class="nx">apiExtensionsConfig</span><span class="p">,</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nf">NewEmptyDelegate</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 4. 初始化 KubeAPIServer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">kubeAPIServer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">CreateKubeAPIServer</span><span class="p">(</span><span class="nx">kubeAPIServerConfig</span><span class="p">,</span> <span class="nx">apiExtensionsServer</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">,</span> <span class="nx">admissionPostStartHook</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 5. 创建 AggregatorConfig
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">aggregatorConfig</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">createAggregatorConfig</span><span class="p">(</span><span class="o">*</span><span class="nx">kubeAPIServerConfig</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">,</span> <span class="nx">completedOptions</span><span class="p">.</span><span class="nx">ServerRunOptions</span><span class="p">,</span> <span class="nx">kubeAPIServerConfig</span><span class="p">.</span>          <span class="nx">ExtraConfig</span><span class="p">.</span><span class="nx">VersionedInformers</span><span class="p">,</span> <span class="nx">serviceResolver</span><span class="p">,</span> <span class="nx">proxyTransport</span><span class="p">,</span> <span class="nx">pluginInitializer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 6. 初始化 AggregatorServer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">aggregatorServer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">createAggregatorServer</span><span class="p">(</span><span class="nx">aggregatorConfig</span><span class="p">,</span> <span class="nx">kubeAPIServer</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">,</span> <span class="nx">apiExtensionsServer</span><span class="p">.</span><span class="nx">Informers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 7. 判断是否启动非安全端口的 http server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">insecureServingInfo</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">insecureHandlerChain</span> <span class="o">:=</span> <span class="nx">kubeserver</span><span class="p">.</span><span class="nf">BuildInsecureHandlerChain</span><span class="p">(</span><span class="nx">aggregatorServer</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nf">UnprotectedHandler</span><span class="p">(),</span> <span class="nx">kubeAPIServerConfig</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">insecureServingInfo</span><span class="p">.</span><span class="nf">Serve</span><span class="p">(</span><span class="nx">insecureHandlerChain</span><span class="p">,</span> <span class="nx">kubeAPIServerConfig</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">RequestTimeout</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">aggregatorServer</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>创建过程主要有以下步骤：</p>
<ol>
<li>根据配置构造apiserver的配置，调用方法<code>CreateKubeAPIServerConfig</code></li>
<li>根据配置构造扩展的apiserver的配置，调用方法为<code>createAPIExtensionsConfig</code></li>
<li>创建server，包括扩展的apiserver和原生的apiserver，调用方法为<code>createAPIExtensionsServer</code>和<code>CreateKubeAPIServer</code>。主要就是将各个handler的路由方法注册到Container中去，完全遵循go-restful的设计模式，即将处理方法注册到Route中去，同一个根路径下的Route注册到WebService中去，WebService注册到Container中，Container负责分发。访问的过程为<code>Container--&gt;WebService--&gt;Route</code></li>
<li>聚合server的配置和和创建。主要就是将原生的apiserver和扩展的apiserver的访问进行整合，添加后续的一些处理接口。调用方法为<code>createAggregatorConfig</code>和<code>createAggregatorServer</code></li>
<li>创建完成，返回配置的server信息</li>
</ol>
<p>以上几个步骤，最核心的就是apiserver如何创建，即如何按照go-restful的模式，添加路由和相应的处理方法。</p>
<h3 id="配置初始化" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>配置初始化</h3><p>先看apiserver配置的创建<code>CreateKubeAPIServerConfig-&gt;buildGenericConfig-&gt;genericapiserver.NewConfig</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// BuildGenericConfig takes the master server options and produces the genericapiserver.Config associated with it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">buildGenericConfig</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">ServerRunOptions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxyTransport</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span> <span class="o">*</span><span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">versionedInformers</span> <span class="nx">clientgoinformers</span><span class="p">.</span><span class="nx">SharedInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">insecureServingInfo</span> <span class="o">*</span><span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">DeprecatedInsecureServingInfo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">serviceResolver</span> <span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">ServiceResolver</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pluginInitializers</span> <span class="p">[]</span><span class="nx">admission</span><span class="p">.</span><span class="nx">PluginInitializer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">admissionPostStartHook</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">PostStartHookFunc</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">storageFactory</span> <span class="o">*</span><span class="nx">serverstorage</span><span class="p">.</span><span class="nx">DefaultStorageFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lastErr</span> <span class="kt">error</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建genericConfig,其中包括DefaultBuildHandlerChain，一系列认证授权的中间件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericConfig</span> <span class="p">=</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nf">NewConfig</span><span class="p">(</span><span class="nx">legacyscheme</span><span class="p">.</span><span class="nx">Codecs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">MergedResourceConfig</span> <span class="p">=</span> <span class="nx">master</span><span class="p">.</span><span class="nf">DefaultAPIResourceConfigSource</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化各种配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">GenericServerRunOptions</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span><span class="nx">genericConfig</span><span class="p">);</span> <span class="nx">lastErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">OpenAPIConfig</span> <span class="p">=</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nf">DefaultOpenAPIConfig</span><span class="p">(</span><span class="nx">generatedopenapi</span><span class="p">.</span><span class="nx">GetOpenAPIDefinitions</span><span class="p">,</span> <span class="nx">openapinamer</span><span class="p">.</span><span class="nf">NewDefinitionNamer</span><span class="p">(</span><span class="nx">legacyscheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">extensionsapiserver</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">aggregatorscheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">OpenAPIConfig</span><span class="p">.</span><span class="nx">Info</span><span class="p">.</span><span class="nx">Title</span> <span class="p">=</span> <span class="s">&#34;Kubernetes&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 长连接请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">LongRunningFunc</span> <span class="p">=</span> <span class="nx">filters</span><span class="p">.</span><span class="nf">BasicLongRunningRequestCheck</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sets</span><span class="p">.</span><span class="nf">NewString</span><span class="p">(</span><span class="s">&#34;watch&#34;</span><span class="p">,</span> <span class="s">&#34;proxy&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sets</span><span class="p">.</span><span class="nf">NewString</span><span class="p">(</span><span class="s">&#34;attach&#34;</span><span class="p">,</span> <span class="s">&#34;exec&#34;</span><span class="p">,</span> <span class="s">&#34;proxy&#34;</span><span class="p">,</span> <span class="s">&#34;log&#34;</span><span class="p">,</span> <span class="s">&#34;portforward&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">kubeVersion</span> <span class="o">:=</span> <span class="nx">version</span><span class="p">.</span><span class="nf">Get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">Version</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">kubeVersion</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化storageFactory， 用来连接etcd
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">storageFactoryConfig</span> <span class="o">:=</span> <span class="nx">kubeapiserver</span><span class="p">.</span><span class="nf">NewStorageFactoryConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">storageFactoryConfig</span><span class="p">.</span><span class="nx">APIResourceConfig</span> <span class="p">=</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">MergedResourceConfig</span>
</span></span><span class="line"><span class="cl">	<span class="nx">completedStorageFactoryConfig</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">storageFactoryConfig</span><span class="p">.</span><span class="nf">Complete</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Etcd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">storageFactory</span><span class="p">,</span> <span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">completedStorageFactoryConfig</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lastErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">EgressSelector</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">storageFactory</span><span class="p">.</span><span class="nx">StorageConfig</span><span class="p">.</span><span class="nx">Transport</span><span class="p">.</span><span class="nx">EgressLookup</span> <span class="p">=</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">EgressSelector</span><span class="p">.</span><span class="nx">Lookup</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Etcd</span><span class="p">.</span><span class="nf">ApplyWithStorageFactoryTo</span><span class="p">(</span><span class="nx">storageFactory</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">);</span> <span class="nx">lastErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Use protobufs for self-communication.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Since not every generic apiserver has to support protobufs, we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// cannot default to it in generic apiserver and need to explicitly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// set it in kube-apiserver.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 内部使用protobufs通信
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">.</span><span class="nx">ContentConfig</span><span class="p">.</span><span class="nx">ContentType</span> <span class="p">=</span> <span class="s">&#34;application/vnd.kubernetes.protobuf&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Disable compression for self-communication, since we are going to be
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// on a fast local network
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">.</span><span class="nx">DisableCompression</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// clientset初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">kubeClientConfig</span> <span class="o">:=</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span>
</span></span><span class="line"><span class="cl">	<span class="nx">clientgoExternalClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientgoclientset</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">kubeClientConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to create real external clientset: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">versionedInformers</span> <span class="p">=</span> <span class="nx">clientgoinformers</span><span class="p">.</span><span class="nf">NewSharedInformerFactory</span><span class="p">(</span><span class="nx">clientgoExternalClient</span><span class="p">,</span> <span class="mi">10</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Minute</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化认证实例，支持多种认证方式：requestheader,token, tls等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">Authentication</span><span class="p">.</span><span class="nx">Authenticator</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">OpenAPIConfig</span><span class="p">.</span><span class="nx">SecurityDefinitions</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">BuildAuthenticator</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">EgressSelector</span><span class="p">,</span> <span class="nx">clientgoExternalClient</span><span class="p">,</span> <span class="nx">versionedInformers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;invalid authentication config: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化鉴权配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">RuleResolver</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">BuildAuthorizer</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">EgressSelector</span><span class="p">,</span> <span class="nx">versionedInformers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;invalid authorization config: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">sets</span><span class="p">.</span><span class="nf">NewString</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nx">Modes</span><span class="o">...</span><span class="p">).</span><span class="nf">Has</span><span class="p">(</span><span class="nx">modes</span><span class="p">.</span><span class="nx">ModeRBAC</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">DisabledPostStartHooks</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">rbacrest</span><span class="p">.</span><span class="nx">PostStartHookName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化admission webhook的配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">admissionConfig</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">kubeapiserveradmission</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ExternalInformers</span><span class="p">:</span>    <span class="nx">versionedInformers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LoopbackClientConfig</span><span class="p">:</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">CloudConfigFile</span><span class="p">:</span>      <span class="nx">s</span><span class="p">.</span><span class="nx">CloudProvider</span><span class="p">.</span><span class="nx">CloudConfigFile</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">serviceResolver</span> <span class="p">=</span> <span class="nf">buildServiceResolver</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">EnableAggregatorRouting</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">.</span><span class="nx">Host</span><span class="p">,</span> <span class="nx">versionedInformers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">authInfoResolverWrapper</span> <span class="o">:=</span> <span class="nx">webhook</span><span class="p">.</span><span class="nf">NewDefaultAuthenticationInfoResolverWrapper</span><span class="p">(</span><span class="nx">proxyTransport</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">EgressSelector</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Audit</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">genericConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">versionedInformers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">serveroptions</span><span class="p">.</span><span class="nf">NewProcessInfo</span><span class="p">(</span><span class="s">&#34;kube-apiserver&#34;</span><span class="p">,</span> <span class="s">&#34;kube-system&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">serveroptions</span><span class="p">.</span><span class="nx">WebhookOptions</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">AuthInfoResolverWrapper</span><span class="p">:</span> <span class="nx">authInfoResolverWrapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ServiceResolver</span><span class="p">:</span>         <span class="nx">serviceResolver</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lastErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化注入插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pluginInitializers</span><span class="p">,</span> <span class="nx">admissionPostStartHook</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">admissionConfig</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">proxyTransport</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">EgressSelector</span><span class="p">,</span> <span class="nx">serviceResolver</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to create admission plugin initializer: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Admission</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">genericConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">versionedInformers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kubeClientConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">feature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pluginInitializers</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to initialize admission: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">genericfeatures</span><span class="p">.</span><span class="nx">APIPriorityAndFairness</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">GenericServerRunOptions</span><span class="p">.</span><span class="nx">EnablePriorityAndFairness</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">FlowControl</span> <span class="p">=</span> <span class="nf">BuildPriorityAndFairness</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">clientgoExternalClient</span><span class="p">,</span> <span class="nx">versionedInformers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="apiextensionsserver初始化" class="headerLink">
    <a href="#apiextensionsserver%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>APIExtensionsServer初始化</h3><p><code>APIExtensionsServer</code>最先初始化，在调用链的末尾, 处理CR、CRD相关资源.</p>
<p>其中包含的 controller 以及功能如下所示：</p>
<ol>
<li>openapiController：将 crd 资源的变化同步至提供的 OpenAPI 文档，可通过访问 /openapi/v2 进行查看；</li>
<li>crdController：负责将 crd 信息注册到 apiVersions 和 apiResources 中，两者的信息可通过 $ kubectl api-versions 和 $ kubectl api-resources 查看；</li>
<li>namingController：检查 crd obj 中是否有命名冲突，可在 crd .status.conditions 中查看；</li>
<li>establishingController：检查 crd 是否处于正常状态，可在 crd .status.conditions 中查看；</li>
<li>nonStructuralSchemaController：检查 crd obj 结构是否正常，可在 crd .status.conditions 中查看；</li>
<li>apiApprovalController：检查 crd 是否遵循 kubernetes API 声明策略，可在 crd .status.conditions 中查看；</li>
<li>finalizingController：类似于 finalizes 的功能，与 CRs 的删除有关；</li>
</ol>
<p><code>createAPIExtensionsServer</code>调用<code>apiextensionsConfig.Complete().New(delegateAPIServer)</code></p>
<p><code>k8s.io/kubernetes/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/apiserver.go:132</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="o">/</span> <span class="nx">New</span> <span class="nx">returns</span> <span class="nx">a</span> <span class="nx">new</span> <span class="nx">instance</span> <span class="nx">of</span> <span class="nx">CustomResourceDefinitions</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">given</span> <span class="nx">config</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">completedConfig</span><span class="p">)</span> <span class="nf">New</span><span class="p">(</span><span class="nx">delegationTarget</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">DelegationTarget</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">CustomResourceDefinitions</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化 genericServer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericServer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;apiextensions-apiserver&#34;</span><span class="p">,</span> <span class="nx">delegationTarget</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">CustomResourceDefinitions</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">GenericAPIServer</span><span class="p">:</span> <span class="nx">genericServer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化apigroup, 即需要暴露的api，这里extension apiserver只注册了cr于crd相关的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">apiResourceConfig</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">MergedResourceConfig</span>
</span></span><span class="line"><span class="cl">	<span class="nx">apiGroupInfo</span> <span class="o">:=</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nf">NewDefaultAPIGroupInfo</span><span class="p">(</span><span class="nx">apiextensions</span><span class="p">.</span><span class="nx">GroupName</span><span class="p">,</span> <span class="nx">Scheme</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ParameterCodec</span><span class="p">,</span> <span class="nx">Codecs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">apiResourceConfig</span><span class="p">.</span><span class="nf">VersionEnabled</span><span class="p">(</span><span class="nx">v1beta1</span><span class="p">.</span><span class="nx">SchemeGroupVersion</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">storage</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Storage</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// customresourcedefinitions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">customResourceDefintionStorage</span> <span class="o">:=</span> <span class="nx">customresourcedefinition</span><span class="p">.</span><span class="nf">NewREST</span><span class="p">(</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">RESTOptionsGetter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">storage</span><span class="p">[</span><span class="s">&#34;customresourcedefinitions&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">customResourceDefintionStorage</span>
</span></span><span class="line"><span class="cl">		<span class="nx">storage</span><span class="p">[</span><span class="s">&#34;customresourcedefinitions/status&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">customresourcedefinition</span><span class="p">.</span><span class="nf">NewStatusREST</span><span class="p">(</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">customResourceDefintionStorage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">apiGroupInfo</span><span class="p">.</span><span class="nx">VersionedResourcesStorageMap</span><span class="p">[</span><span class="nx">v1beta1</span><span class="p">.</span><span class="nx">SchemeGroupVersion</span><span class="p">.</span><span class="nx">Version</span><span class="p">]</span> <span class="p">=</span> <span class="nx">storage</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">apiResourceConfig</span><span class="p">.</span><span class="nf">VersionEnabled</span><span class="p">(</span><span class="nx">v1</span><span class="p">.</span><span class="nx">SchemeGroupVersion</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">storage</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Storage</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// customresourcedefinitions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">customResourceDefintionStorage</span> <span class="o">:=</span> <span class="nx">customresourcedefinition</span><span class="p">.</span><span class="nf">NewREST</span><span class="p">(</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">RESTOptionsGetter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">storage</span><span class="p">[</span><span class="s">&#34;customresourcedefinitions&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">customResourceDefintionStorage</span>
</span></span><span class="line"><span class="cl">		<span class="nx">storage</span><span class="p">[</span><span class="s">&#34;customresourcedefinitions/status&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">customresourcedefinition</span><span class="p">.</span><span class="nf">NewStatusREST</span><span class="p">(</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">customResourceDefintionStorage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">apiGroupInfo</span><span class="p">.</span><span class="nx">VersionedResourcesStorageMap</span><span class="p">[</span><span class="nx">v1</span><span class="p">.</span><span class="nx">SchemeGroupVersion</span><span class="p">.</span><span class="nx">Version</span><span class="p">]</span> <span class="p">=</span> <span class="nx">storage</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 注册apigroup
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nf">InstallAPIGroup</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">apiGroupInfo</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// clientset创建
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">crdClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientset</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// it&#39;s really bad that this is leaking here, but until we can fix the test (which I&#39;m pretty sure isn&#39;t even testing what it wants to test),
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// we need to be able to move forward
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to create clientset: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span> <span class="p">=</span> <span class="nx">externalinformers</span><span class="p">.</span><span class="nf">NewSharedInformerFactory</span><span class="p">(</span><span class="nx">crdClient</span><span class="p">,</span> <span class="mi">5</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Minute</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建各种handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">delegateHandler</span> <span class="o">:=</span> <span class="nx">delegationTarget</span><span class="p">.</span><span class="nf">UnprotectedHandler</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">delegateHandler</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">delegateHandler</span> <span class="p">=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NotFoundHandler</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">versionDiscoveryHandler</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">versionDiscoveryHandler</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">discovery</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersion</span><span class="p">]</span><span class="o">*</span><span class="nx">discovery</span><span class="p">.</span><span class="nx">APIVersionHandler</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">delegate</span><span class="p">:</span>  <span class="nx">delegateHandler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">groupDiscoveryHandler</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">groupDiscoveryHandler</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">discovery</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">discovery</span><span class="p">.</span><span class="nx">APIGroupHandler</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">delegate</span><span class="p">:</span>  <span class="nx">delegateHandler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">establishingController</span> <span class="o">:=</span> <span class="nx">establish</span><span class="p">.</span><span class="nf">NewEstablishingController</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span><span class="p">.</span><span class="nf">Apiextensions</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">CustomResourceDefinitions</span><span class="p">(),</span> <span class="nx">crdClient</span><span class="p">.</span><span class="nf">ApiextensionsV1</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">crdHandler</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewCustomResourceDefinitionHandler</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">versionDiscoveryHandler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">groupDiscoveryHandler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span><span class="p">.</span><span class="nf">Apiextensions</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">CustomResourceDefinitions</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">delegateHandler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">ExtraConfig</span><span class="p">.</span><span class="nx">CRDRESTOptionsGetter</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">AdmissionControl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">establishingController</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">ExtraConfig</span><span class="p">.</span><span class="nx">ServiceResolver</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">ExtraConfig</span><span class="p">.</span><span class="nx">AuthResolverWrapper</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">ExtraConfig</span><span class="p">.</span><span class="nx">MasterCount</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">RequestTimeout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">MinRequestTimeout</span><span class="p">)</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">apiGroupInfo</span><span class="p">.</span><span class="nx">StaticOpenAPISpec</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">MaxRequestBodyBytes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nx">Handler</span><span class="p">.</span><span class="nx">NonGoRestfulMux</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/apis&#34;</span><span class="p">,</span> <span class="nx">crdHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nx">Handler</span><span class="p">.</span><span class="nx">NonGoRestfulMux</span><span class="p">.</span><span class="nf">HandlePrefix</span><span class="p">(</span><span class="s">&#34;/apis/&#34;</span><span class="p">,</span> <span class="nx">crdHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">discoveryController</span> <span class="o">:=</span> <span class="nf">NewDiscoveryController</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span><span class="p">.</span><span class="nf">Apiextensions</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">CustomResourceDefinitions</span><span class="p">(),</span> <span class="nx">versionDiscoveryHandler</span><span class="p">,</span> <span class="nx">groupDiscoveryHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">namingController</span> <span class="o">:=</span> <span class="nx">status</span><span class="p">.</span><span class="nf">NewNamingConditionController</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span><span class="p">.</span><span class="nf">Apiextensions</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">CustomResourceDefinitions</span><span class="p">(),</span> <span class="nx">crdClient</span><span class="p">.</span><span class="nf">ApiextensionsV1</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nonStructuralSchemaController</span> <span class="o">:=</span> <span class="nx">nonstructuralschema</span><span class="p">.</span><span class="nf">NewConditionController</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span><span class="p">.</span><span class="nf">Apiextensions</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">CustomResourceDefinitions</span><span class="p">(),</span> <span class="nx">crdClient</span><span class="p">.</span><span class="nf">ApiextensionsV1</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">apiApprovalController</span> <span class="o">:=</span> <span class="nx">apiapproval</span><span class="p">.</span><span class="nf">NewKubernetesAPIApprovalPolicyConformantConditionController</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span><span class="p">.</span><span class="nf">Apiextensions</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">CustomResourceDefinitions</span><span class="p">(),</span> <span class="nx">crdClient</span><span class="p">.</span><span class="nf">ApiextensionsV1</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">finalizingController</span> <span class="o">:=</span> <span class="nx">finalizer</span><span class="p">.</span><span class="nf">NewCRDFinalizer</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span><span class="p">.</span><span class="nf">Apiextensions</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">CustomResourceDefinitions</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">crdClient</span><span class="p">.</span><span class="nf">ApiextensionsV1</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">crdHandler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">openapiController</span> <span class="o">:=</span> <span class="nx">openapicontroller</span><span class="p">.</span><span class="nf">NewController</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span><span class="p">.</span><span class="nf">Apiextensions</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">CustomResourceDefinitions</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 加入到启动hook中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nf">AddPostStartHookOrDie</span><span class="p">(</span><span class="s">&#34;start-apiextensions-informers&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">PostStartHookContext</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nf">AddPostStartHookOrDie</span><span class="p">(</span><span class="s">&#34;start-apiextensions-controllers&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">PostStartHookContext</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// OpenAPIVersionedService and StaticOpenAPISpec are populated in generic apiserver PrepareRun().
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// Together they serve the /openapi/v2 endpoint on a generic apiserver. A generic apiserver may
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// choose to not enable OpenAPI by having null openAPIConfig, and thus OpenAPIVersionedService
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// and StaticOpenAPISpec are both null. In that case we don&#39;t run the CRD OpenAPI controller.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nx">OpenAPIVersionedService</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nx">StaticOpenAPISpec</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">go</span> <span class="nx">openapiController</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nx">StaticOpenAPISpec</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nx">OpenAPIVersionedService</span><span class="p">,</span> <span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">namingController</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">establishingController</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">nonStructuralSchemaController</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">apiApprovalController</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">finalizingController</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">discoverySyncedCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">discoveryController</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">,</span> <span class="nx">discoverySyncedCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">discoverySyncedCh</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// we don&#39;t want to report healthy until we can handle all CRDs that have already been registered.  Waiting for the informer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// to sync makes sure that the lister will be valid before we begin.  There may still be races for CRDs added after startup,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// but we won&#39;t go healthy until we can handle the ones already present.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nf">AddPostStartHookOrDie</span><span class="p">(</span><span class="s">&#34;crd-informer-synced&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">PostStartHookContext</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">PollImmediateUntil</span><span class="p">(</span><span class="mi">100</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Informers</span><span class="p">.</span><span class="nf">Apiextensions</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">CustomResourceDefinitions</span><span class="p">().</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">HasSynced</span><span class="p">(),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span> <span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">s</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>c.GenericConfig.New</code>来初始化<code>genericapiserver</code>,包裹一些默认链，创建handler</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">completedConfig</span><span class="p">)</span> <span class="nf">New</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">delegationTarget</span> <span class="nx">DelegationTarget</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">GenericAPIServer</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Serializer</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Genericapiserver.New() called with config.Serializer == nil&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Genericapiserver.New() called with config.LoopbackClientConfig == nil&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">EquivalentResourceRegistry</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Genericapiserver.New() called with config.EquivalentResourceRegistry == nil&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 包裹了DefaultBuildHandlerChain
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">handlerChainBuilder</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nf">BuildHandlerChainFunc</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建apiserverhandler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">apiServerHandler</span> <span class="o">:=</span> <span class="nf">NewAPIServerHandler</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Serializer</span><span class="p">,</span> <span class="nx">handlerChainBuilder</span><span class="p">,</span> <span class="nx">delegationTarget</span><span class="p">.</span><span class="nf">UnprotectedHandler</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">s</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>APIServerHandler</code>包含多种<code>http.Handler</code>类型，包括<code>go-restful</code>以及<code>non-go-restful</code>，以及在以上两者之间选择的<code>Director</code>对象，<code>go-restful</code>用于处理已经注册的handler，<code>non-go-restful用来处理不存在的handler，API URI处理的选择过程为：</code>FullHandlerChain-&gt; Director -&gt;{GoRestfulContainer， NonGoRestfulMux}<code>。 </code>NewAPIServerHandler`</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">func NewAPIServerHandler(name string, s runtime.NegotiatedSerializer, handlerChainBuilder HandlerChainBuilderFn, notFoundHandler http.Handler) *APIServerHandler {
</span></span><span class="line"><span class="cl">	// non-go-restful路由
</span></span><span class="line"><span class="cl">	nonGoRestfulMux := mux.NewPathRecorderMux(name)
</span></span><span class="line"><span class="cl">	if notFoundHandler != nil {
</span></span><span class="line"><span class="cl">		nonGoRestfulMux.NotFoundHandler(notFoundHandler)
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	// go-resetful路由
</span></span><span class="line"><span class="cl">	gorestfulContainer := restful.NewContainer()
</span></span><span class="line"><span class="cl">	gorestfulContainer.ServeMux = http.NewServeMux()
</span></span><span class="line"><span class="cl">	gorestfulContainer.Router(restful.CurlyRouter{}) // e.g. for proxy/{kind}/{name}/{*}
</span></span><span class="line"><span class="cl">	gorestfulContainer.RecoverHandler(func(panicReason interface{}, httpWriter http.ResponseWriter) {
</span></span><span class="line"><span class="cl">		logStackOnRecover(s, panicReason, httpWriter)
</span></span><span class="line"><span class="cl">	})
</span></span><span class="line"><span class="cl">	gorestfulContainer.ServiceErrorHandler(func(serviceErr restful.ServiceError, request *restful.Request, response *restful.Response) {
</span></span><span class="line"><span class="cl">		serviceErrorHandler(s, serviceErr, request, response)
</span></span><span class="line"><span class="cl">	})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	// 选择器, 根据path选择是否执行go-restful，注册过的path执行go-restful
</span></span><span class="line"><span class="cl">	director := director{
</span></span><span class="line"><span class="cl">		name:               name,
</span></span><span class="line"><span class="cl">		goRestfulContainer: gorestfulContainer,
</span></span><span class="line"><span class="cl">		nonGoRestfulMux:    nonGoRestfulMux,
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	return &amp;APIServerHandler{
</span></span><span class="line"><span class="cl">		FullHandlerChain:   handlerChainBuilder(director),
</span></span><span class="line"><span class="cl">		GoRestfulContainer: gorestfulContainer,
</span></span><span class="line"><span class="cl">		NonGoRestfulMux:    nonGoRestfulMux,
</span></span><span class="line"><span class="cl">		Director:           director,
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><p>以上是<code>APIExtensionsServer</code>的初始化流程，初始化Server, 调用<code>s.GenericAPIServer.InstallAPIGroup</code>注册api。此方法的调用链非常深，主要是为了将需要暴露的<code>API Resource</code>注册到 server 中，以便能通过 http 接口进行 resource 的 REST 操作，其他几种 server 在初始化时也都会执行对应的 <code>InstallAPI</code>方法。</p>
<h3 id="kubeapiserver初始化" class="headerLink">
    <a href="#kubeapiserver%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>KubeAPIServer初始化</h3><p>KubeAPIServer 主要是提供对 API Resource 的操作请求，为 kubernetes 中众多 API 注册路由信息，暴露 RESTful API 并且对外提供 kubernetes service，使集群中以及集群外的服务都可以通过 RESTful API 操作 kubernetes 中的资源。</p>
<p>与<code>APIExtensionsServer</code>，<code>KubeAPIServer</code>初始化流程如下</p>
<ol>
<li><code>CreateKubeAPIServer</code>调用<code>kubeAPIServerConfig.Complete().New</code>来初始化</li>
<li><code>New</code>函数创建默认的<code>apigroup</code>(pod,deployment等内部资源), 调用<code>InstallAPIs</code>注册</li>
<li>启动相关controller, 加入到<code>poststarthook</code></li>
</ol>
<h3 id="aggregatorserver初始化" class="headerLink">
    <a href="#aggregatorserver%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>AggregatorServer初始化</h3><p><code>Aggregator</code>通过<code>APIServices</code>对象关联到某个<code>Service</code>来进行请求的转发，其关联的<code>Service</code>类型进一步决定了请求转发形式。<code>Aggregator</code>包括一个<code>GenericAPIServer</code>和维护自身状态的<code>Controller</code>。其中 <code>GenericAPIServer</code>主要处理<code>apiregistration.k8s.io</code>组下的<code>APIService</code>资源请求。</p>
<p><code>Aggregator</code>除了处理资源请求外还包含几个controller：</p>
<ol>
<li>apiserviceRegistrationController：负责<code>APIServices</code>中资源的注册与删除；</li>
<li>availableConditionController：维护<code>APIServices</code>的可用状态，包括其引用<code>Service</code>是否可用等；</li>
<li>autoRegistrationController：用于保持API中存在的一组特定的<code>APIServices</code>；</li>
<li>crdRegistrationController：负责将<code>CRD GroupVersions</code>自动注册到<code>APIServices</code>中；</li>
<li>openAPIAggregationController：将<code>APIServices</code>资源的变化同步至提供的<code>OpenAPI</code>文档；
kubernetes中的一些附加组件，比如metrics-server就是通过Aggregator的方式进行扩展的，实际环境中可以通过使用apiserver-builder工具轻松以Aggregator的扩展方式创建自定义资源。</li>
</ol>
<p>初始化AggregatorServer的主要逻辑为：</p>
<ol>
<li>调用<code>aggregatorConfig.Complete().NewWithDelegate</code>创建<code>aggregatorServer</code></li>
<li>初始化<code>crdRegistrationController</code>和<code>autoRegistrationController</code>，<code>crdRegistrationController</code>负责注册CRD，<code>autoRegistrationController</code>负责将 CRD 对应的 APIServices自动注册到apiserver中，CRD 创建后可通过<code>$ kubectl get apiservices</code>查看是否注册到 apiservices中</li>
<li>将<code>autoRegistrationController</code>和<code>crdRegistrationController</code>加入到PostStartHook中</li>
</ol>
<p>首先，初始化配置<code>createAggregatorConfig</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">createAggregatorConfig</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kubeAPIServerConfig</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">commandOptions</span> <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">ServerRunOptions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">externalInformers</span> <span class="nx">kubeexternalinformers</span><span class="p">.</span><span class="nx">SharedInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">serviceResolver</span> <span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">ServiceResolver</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxyTransport</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pluginInitializers</span> <span class="p">[]</span><span class="nx">admission</span><span class="p">.</span><span class="nx">PluginInitializer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// make a shallow copy to let us twiddle a few things
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// most of the config actually remains the same.  We only need to mess with a couple items related to the particulars of the aggregator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericConfig</span> <span class="o">:=</span> <span class="nx">kubeAPIServerConfig</span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">PostStartHooks</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">PostStartHookConfigEntry</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">RESTOptionsGetter</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// override genericConfig.AdmissionControl with kube-aggregator&#39;s scheme,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// because aggregator apiserver should use its own scheme to convert its own resources.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 取消admission的配置，aggregator自行处理请求，不需要admissions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">commandOptions</span><span class="p">.</span><span class="nx">Admission</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">genericConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">externalInformers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">feature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pluginInitializers</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// copy the etcd options so we don&#39;t mutate originals.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">etcdOptions</span> <span class="o">:=</span> <span class="o">*</span><span class="nx">commandOptions</span><span class="p">.</span><span class="nx">Etcd</span>
</span></span><span class="line"><span class="cl">	<span class="nx">etcdOptions</span><span class="p">.</span><span class="nx">StorageConfig</span><span class="p">.</span><span class="nx">Paging</span> <span class="p">=</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">APIListChunking</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">etcdOptions</span><span class="p">.</span><span class="nx">StorageConfig</span><span class="p">.</span><span class="nx">Codec</span> <span class="p">=</span> <span class="nx">aggregatorscheme</span><span class="p">.</span><span class="nx">Codecs</span><span class="p">.</span><span class="nf">LegacyCodec</span><span class="p">(</span><span class="nx">v1beta1</span><span class="p">.</span><span class="nx">SchemeGroupVersion</span><span class="p">,</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">SchemeGroupVersion</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">etcdOptions</span><span class="p">.</span><span class="nx">StorageConfig</span><span class="p">.</span><span class="nx">EncodeVersioner</span> <span class="p">=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">NewMultiGroupVersioner</span><span class="p">(</span><span class="nx">v1beta1</span><span class="p">.</span><span class="nx">SchemeGroupVersion</span><span class="p">,</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupKind</span><span class="p">{</span><span class="nx">Group</span><span class="p">:</span> <span class="nx">v1beta1</span><span class="p">.</span><span class="nx">GroupName</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">RESTOptionsGetter</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">genericoptions</span><span class="p">.</span><span class="nx">SimpleRestOptionsFactory</span><span class="p">{</span><span class="nx">Options</span><span class="p">:</span> <span class="nx">etcdOptions</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// override MergedResourceConfig with aggregator defaults and registry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">commandOptions</span><span class="p">.</span><span class="nx">APIEnablement</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">genericConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nf">DefaultAPIResourceConfigSource</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">aggregatorscheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 配置proxy证书，用于apiserver与扩展服务的通信，使用requestheader证书签发
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">certBytes</span><span class="p">,</span> <span class="nx">keyBytes</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">commandOptions</span><span class="p">.</span><span class="nx">ProxyClientCertFile</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">commandOptions</span><span class="p">.</span><span class="nx">ProxyClientKeyFile</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">certBytes</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="nx">commandOptions</span><span class="p">.</span><span class="nx">ProxyClientCertFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">keyBytes</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="nx">commandOptions</span><span class="p">.</span><span class="nx">ProxyClientKeyFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">aggregatorConfig</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">GenericConfig</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">RecommendedConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Config</span><span class="p">:</span>                <span class="nx">genericConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">SharedInformerFactory</span><span class="p">:</span> <span class="nx">externalInformers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ExtraConfig</span><span class="p">:</span> <span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">ExtraConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ProxyClientCert</span><span class="p">:</span> <span class="nx">certBytes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ProxyClientKey</span><span class="p">:</span>  <span class="nx">keyBytes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ServiceResolver</span><span class="p">:</span> <span class="nx">serviceResolver</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 代理请求的具体实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">ProxyTransport</span><span class="p">:</span>  <span class="nx">proxyTransport</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// we need to clear the poststarthooks so we don&#39;t add them multiple times to all the servers (that fails)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 加入PostStartHook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">aggregatorConfig</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">PostStartHooks</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">PostStartHookConfigEntry</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">aggregatorConfig</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>createAggregatorServer</code>初始化<code>Aggregator</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">createAggregatorServer</span><span class="p">(</span><span class="nx">aggregatorConfig</span> <span class="o">*</span><span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">delegateAPIServer</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">DelegationTarget</span><span class="p">,</span> <span class="nx">apiExtensionInformers</span> <span class="nx">apiextensionsinformers</span><span class="p">.</span><span class="nx">SharedInformerFactory</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">APIAggregator</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化配置，与前面流程相同
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">aggregatorServer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">aggregatorConfig</span><span class="p">.</span><span class="nf">Complete</span><span class="p">().</span><span class="nf">NewWithDelegate</span><span class="p">(</span><span class="nx">delegateAPIServer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建auto-registration controller
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">apiRegistrationClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">apiregistrationclient</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">aggregatorConfig</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">autoRegistrationController</span> <span class="o">:=</span> <span class="nx">autoregister</span><span class="p">.</span><span class="nf">NewAutoRegisterController</span><span class="p">(</span><span class="nx">aggregatorServer</span><span class="p">.</span><span class="nx">APIRegistrationInformers</span><span class="p">.</span><span class="nf">Apiregistration</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">APIServices</span><span class="p">(),</span> <span class="nx">apiRegistrationClient</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">apiServices</span> <span class="o">:=</span> <span class="nf">apiServicesToRegister</span><span class="p">(</span><span class="nx">delegateAPIServer</span><span class="p">,</span> <span class="nx">autoRegistrationController</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">crdRegistrationController</span> <span class="o">:=</span> <span class="nx">crdregistration</span><span class="p">.</span><span class="nf">NewCRDRegistrationController</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">apiExtensionInformers</span><span class="p">.</span><span class="nf">Apiextensions</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">CustomResourceDefinitions</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">autoRegistrationController</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">aggregatorServer</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nf">AddPostStartHook</span><span class="p">(</span><span class="s">&#34;kube-apiserver-autoregistration&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">context</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">PostStartHookContext</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 启动controller
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">go</span> <span class="nx">crdRegistrationController</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// let the CRD controller process the initial set of CRDs before starting the autoregistration controller.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// this prevents the autoregistration controller&#39;s initial sync from deleting APIServices for CRDs that still exist.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// we only need to do this if CRDs are enabled on this server.  We can&#39;t use discovery because we are the source for discovery.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">aggregatorConfig</span><span class="p">.</span><span class="nx">GenericConfig</span><span class="p">.</span><span class="nx">MergedResourceConfig</span><span class="p">.</span><span class="nf">AnyVersionForGroupEnabled</span><span class="p">(</span><span class="s">&#34;apiextensions.k8s.io&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">crdRegistrationController</span><span class="p">.</span><span class="nf">WaitForInitialSync</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">autoRegistrationController</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nx">context</span><span class="p">.</span><span class="nx">StopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">aggregatorServer</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">.</span><span class="nf">AddBootSequenceHealthChecks</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nf">makeAPIServiceAvailableHealthCheck</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;autoregister-completion&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">apiServices</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">aggregatorServer</span><span class="p">.</span><span class="nx">APIRegistrationInformers</span><span class="p">.</span><span class="nf">Apiregistration</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">APIServices</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">aggregatorServer</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>至此，启动步骤以前分析完了，三个组件的流量大体时一样的，通过<code>Complete().New()</code>初始化配置，创建所需的controller, 调用<code>InstallAPIGroup</code>注册<code>apigroup</code>。</p>
<h2 id="请求分析" class="headerLink">
    <a href="#%e8%af%b7%e6%b1%82%e5%88%86%e6%9e%90" class="header-mark"></a>请求分析</h2><p>上面我们分析了apiserver的调用链，大体如下
<code>DefaultHandlerChain-&gt;{handler/crdhandler/proxy}-&gt;admission-&gt;validation-&gt;etcd</code></p>
<ol>
<li>请求进入时，会经过<code>defaultchain</code>做一些认证鉴权工作</li>
<li>然后通过<code>route</code>执行对应的handler，如果为aggration api, 将直接转发请求到对应service</li>
<li>handler处理完，经过admission与validation，做一些修改和检查，用户在这部分可以自定义webhook</li>
<li>最后存入etcd</li>
</ol>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文大体对apiserver的启动流程，以及初始化过程做了分析，由于apiserver实现复杂，中间一些细节没涉及到，还需要对着代码研究研究。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/5c934e5a5188252d7c216981" target="_blank" rel="noopener noreffer">https://juejin.im/post/5c934e5a5188252d7c216981</a></li>
<li><a href="https://blog.tianfeiyu.com/2020/02/24/kube_apiserver/" target="_blank" rel="noopener noreffer">https://blog.tianfeiyu.com/2020/02/24/kube_apiserver/</a></li>
</ul>
]]></description>
</item><item>
    <title>kubernetes扩展apiserver实现分析</title>
    <link>https://qingwave.github.io/kube-apiserver-aggretation-api/</link>
    <pubDate>Fri, 24 Apr 2020 15:28:16 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/kube-apiserver-aggretation-api/</guid>
    <description><![CDATA[<p>Kubernetes提供了丰富的扩展功能，实现自定义资源有两种方式<code>CRD</code>与<code>Aggregation API</code>。相对于<code>CRD</code>，扩展API功能更丰富，可以实现单独的存储。今天来聊一聊，k8s是如是实现扩展api的，它与apiserver之间又是如何协作的</p>
<h2 id="aggregationapiserver介绍" class="headerLink">
    <a href="#aggregationapiserver%e4%bb%8b%e7%bb%8d" class="header-mark"></a>AggregationApiserver介绍</h2><p><code>Aggregator</code>类似于一个七层负载均衡，将来自用户的请求拦截转发给其他服务器，并且负责整个 APIServer 的 Discovery 功能。</p>
<p>通过<code>APIServices</code>对象关联到某个<code>Service</code>来进行请求的转发，其关联的<code>Service</code>类型进一步决定了请求转发形式。<code>Aggregator</code>包括一个<code>GenericAPIServer</code>和维护自身状态的<code>Controller</code>。其中 <code>GenericAPIServer</code>主要处理<code>apiregistration.k8s.io</code>组下的<code>APIService</code>资源请求。</p>
<p>主要controller包括：</p>
<ol>
<li>apiserviceRegistrationController：负责<code>APIServices</code>中资源的注册与删除；</li>
<li>availableConditionController：维护<code>APIServices</code>的可用状态，包括其引用<code>Service</code>是否可用等；</li>
<li>autoRegistrationController：用于保持API中存在的一组特定的<code>APIServices</code>；</li>
<li>crdRegistrationController：负责将<code>CRD GroupVersions</code>自动注册到<code>APIServices</code>中；</li>
<li>openAPIAggregationController：将<code>APIServices</code>资源的变化同步至提供的<code>OpenAPI</code>文档；</li>
</ol>
<p>在 kube-apiserver 中需要增加以下配置来开启 API Aggregation：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--proxy-client-cert-file=/etc/kubernetes/certs/proxy.crt
</span></span><span class="line"><span class="cl">--proxy-client-key-file=/etc/kubernetes/certs/proxy.key
</span></span><span class="line"><span class="cl">--requestheader-client-ca-file=/etc/kubernetes/certs/proxy-ca.crt
</span></span><span class="line"><span class="cl">--requestheader-extra-headers-prefix=X-Remote-Extra-
</span></span><span class="line"><span class="cl">--requestheader-group-headers=X-Remote-Group
</span></span><span class="line"><span class="cl">--requestheader-username-headers=X-Remote-User
</span></span></code></pre></div><p>如果 kube-proxy 没有和 API server 运行在同一台主机上，那么需要确保启用了如下 apiserver 标记：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--enable-aggregator-routing=true
</span></span></code></pre></div><p>在<a href="./kube-apiserver-start.md" rel="">apiserver启动流程</a>中，分析了<code>AggregationApiserver</code>的初始化流程, 需要了解的可以回去看下。</p>
<h2 id="aggregationapiserver认证流程" class="headerLink">
    <a href="#aggregationapiserver%e8%ae%a4%e8%af%81%e6%b5%81%e7%a8%8b" class="header-mark"></a>AggregationApiserver认证流程</h2><p>与自定义资源定义（CRD）不同，除标准的 Kubernetes apiserver 外，Aggregation API 还涉及另一个服务器：扩展 apiserver。Kubernetes apiserver 将需要与您的扩展 apiserver 通信，并且您的扩展 apiserver 也需要与 Kubernetes apiserver 通信。为了确保此通信的安全，Kubernetes apiserver 使用 x509 证书向扩展 apiserver 认证。</p>
<p>AggregationApi的请求链路如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">defaultHandlerChain-&gt;aggregator-&gt;aggregation-apiserver-&gt;aggregator-&gt;user
</span></span></code></pre></div><p>大致流程如下：</p>
<ol>
<li>Kubernetes apiserver：对发出请求的用户身份认证，并对请求的 API 路径执行鉴权。</li>
<li>Kubernetes apiserver：将请求转发到扩展 apiserver</li>
<li>扩展 apiserver：认证来自 Kubernetes apiserver 的请求</li>
<li>扩展 apiserver：对来自原始用户的请求鉴权</li>
<li>扩展 apiserver：执行对应操作返回</li>
</ol>
<p>如图所示：
<a href="https://d33wubrfki0l68.cloudfront.net/3c5428678a95c3715894011d8dd4812d2cf229b9/e745c/images/docs/aggregation-api-auth-flow.png" target="_blank" rel="noopener noreffer">aggregation-apiserver-auth</a></p>
<p>apiserver与扩展apiserver通过证书认证,</p>
<ul>
<li>apiserver配置<code>porxy-client</code>证书(使用requestheader根证书签发)，扩展apiserver配置<code>reqeustheader</code>根证书，如果没配置，会默认从configmap <code>kube-system/extension-apiserver-authentication</code> 去找</li>
<li>扩展apiserver通过<code>extension-apiserver-authentication</code>获取apiserver的<code>client-ca</code>，生成证书对，apiserver可以使用<code>client-ca</code>验证它</li>
<li>由于apiserver-&gt;扩展apiserver通过<code>reqeustheader</code>方式认证，apiserver会将接受到的请求经过认证，转换为header，扩展apiserver通过header获取用户，再通过apiserver接口做权限校验。</li>
</ul>
<p>有同学有疑问，为什么这里需要做两次认证，两次鉴权。这是由于扩展apiserveer是一个单独的服务器，如果接受非apiserver的请求也是需要做认证鉴权的。那能不能认证是apiserver后就不做鉴权了呢，这得需要apiserver在转发请求时加入鉴权信息就行。</p>
<h2 id="aggregationapiserver处理流程" class="headerLink">
    <a href="#aggregationapiserver%e5%a4%84%e7%90%86%e6%b5%81%e7%a8%8b" class="header-mark"></a>AggregationApiserver处理流程</h2><h3 id="apiserver处理逻辑" class="headerLink">
    <a href="#apiserver%e5%a4%84%e7%90%86%e9%80%bb%e8%be%91" class="header-mark"></a>apiserver处理逻辑</h3><p>在apiserver认证时，认证接受会将认证信息删除, 可参考前面的[apiserver认证源码分析]</p>
<p>处理逻辑如下：</p>
<ol>
<li>通过<code>context</code>获取user信息</li>
<li>构造请求，删除reqeustheader信息，通过user重新填充</li>
<li>通过<code>proxyRoundTripper</code>转发请求</li>
</ol>
<p>(kube-apiserver-authentication-code.md)
aggregation的<a href="https://github.com/kubernetes/kubernetes/blob/df9b4e92e84849e2b9fdb5b4849c9c4ebfae8040/staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_proxy.go#L109" target="_blank" rel="noopener noreffer">hander</a>的实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="c1">// 通过context获取user
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">user</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">genericapirequest</span><span class="p">.</span><span class="nf">UserFrom</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nf">Context</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">proxyError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="s">&#34;missing user&#34;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 构造请求url,通过apiservice配置的service/namespace随机得到某个endpoint后端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">location</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">location</span><span class="p">.</span><span class="nx">Scheme</span> <span class="p">=</span> <span class="s">&#34;https&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rloc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">serviceResolver</span><span class="p">.</span><span class="nf">ResolveEndpoint</span><span class="p">(</span><span class="nx">handlingInfo</span><span class="p">.</span><span class="nx">serviceNamespace</span><span class="p">,</span> <span class="nx">handlingInfo</span><span class="p">.</span><span class="nx">serviceName</span><span class="p">,</span> <span class="nx">handlingInfo</span><span class="p">.</span><span class="nx">servicePort</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error resolving %s/%s: %v&#34;</span><span class="p">,</span> <span class="nx">handlingInfo</span><span class="p">.</span><span class="nx">serviceNamespace</span><span class="p">,</span> <span class="nx">handlingInfo</span><span class="p">.</span><span class="nx">serviceName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">proxyError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="s">&#34;service unavailable&#34;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusServiceUnavailable</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">location</span><span class="p">.</span><span class="nx">Host</span> <span class="p">=</span> <span class="nx">rloc</span><span class="p">.</span><span class="nx">Host</span>
</span></span><span class="line"><span class="cl">	<span class="nx">location</span><span class="p">.</span><span class="nx">Path</span> <span class="p">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span>
</span></span><span class="line"><span class="cl">  <span class="nx">location</span><span class="p">.</span><span class="nx">RawQuery</span> <span class="p">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">Query</span><span class="p">().</span><span class="nf">Encode</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">// we need to wrap the roundtripper in another roundtripper which will apply the front proxy headers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 包裹请求信息，将user信息放到header中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">proxyRoundTripper</span><span class="p">,</span> <span class="nx">upgrade</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">maybeWrapForConnectionUpgrades</span><span class="p">(</span><span class="nx">handlingInfo</span><span class="p">.</span><span class="nx">restConfig</span><span class="p">,</span> <span class="nx">handlingInfo</span><span class="p">.</span><span class="nx">proxyRoundTripper</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">proxyError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">proxyRoundTripper</span> <span class="p">=</span> <span class="nx">transport</span><span class="p">.</span><span class="nf">NewAuthProxyRoundTripper</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nf">GetName</span><span class="p">(),</span> <span class="nx">user</span><span class="p">.</span><span class="nf">GetGroups</span><span class="p">(),</span> <span class="nx">user</span><span class="p">.</span><span class="nf">GetExtra</span><span class="p">(),</span> <span class="nx">proxyRoundTripper</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">// 调用后端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">handler</span> <span class="o">:=</span> <span class="nx">proxy</span><span class="p">.</span><span class="nf">NewUpgradeAwareHandler</span><span class="p">(</span><span class="nx">location</span><span class="p">,</span> <span class="nx">proxyRoundTripper</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">upgrade</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">responder</span><span class="p">{</span><span class="nx">w</span><span class="p">:</span> <span class="nx">w</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">newReq</span><span class="p">)</span>
</span></span></code></pre></div><p>根据扩展apiserver找到后端时通过service获取对应endpoint列表，随机选择某个endpoint、
实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// ResourceLocation returns a URL to which one can send traffic for the specified service.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">ResolveEndpoint</span><span class="p">(</span><span class="nx">services</span> <span class="nx">listersv1</span><span class="p">.</span><span class="nx">ServiceLister</span><span class="p">,</span> <span class="nx">endpoints</span> <span class="nx">listersv1</span><span class="p">.</span><span class="nx">EndpointsLister</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">,</span> <span class="nx">id</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">port</span> <span class="kt">int32</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">svc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">services</span><span class="p">.</span><span class="nf">Services</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Get</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">svcPort</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">findServicePort</span><span class="p">(</span><span class="nx">svc</span><span class="p">,</span> <span class="nx">port</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">svc</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Type</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ServiceTypeClusterIP</span><span class="p">,</span> <span class="nx">svc</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Type</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ServiceTypeLoadBalancer</span><span class="p">,</span> <span class="nx">svc</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Type</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ServiceTypeNodePort</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// these are fine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unsupported service type %q&#34;</span><span class="p">,</span> <span class="nx">svc</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Type</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">eps</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">endpoints</span><span class="p">.</span><span class="nf">Endpoints</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Get</span><span class="p">(</span><span class="nx">svc</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">eps</span><span class="p">.</span><span class="nx">Subsets</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">NewServiceUnavailable</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;no endpoints available for service %q&#34;</span><span class="p">,</span> <span class="nx">svc</span><span class="p">.</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Pick a random Subset to start searching from.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ssSeed</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">eps</span><span class="p">.</span><span class="nx">Subsets</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Find a Subset that has the port.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">ssi</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">ssi</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">eps</span><span class="p">.</span><span class="nx">Subsets</span><span class="p">);</span> <span class="nx">ssi</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ss</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">eps</span><span class="p">.</span><span class="nx">Subsets</span><span class="p">[(</span><span class="nx">ssSeed</span><span class="o">+</span><span class="nx">ssi</span><span class="p">)</span><span class="o">%</span><span class="nb">len</span><span class="p">(</span><span class="nx">eps</span><span class="p">.</span><span class="nx">Subsets</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ss</span><span class="p">.</span><span class="nx">Addresses</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">ss</span><span class="p">.</span><span class="nx">Ports</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">ss</span><span class="p">.</span><span class="nx">Ports</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Name</span> <span class="o">==</span> <span class="nx">svcPort</span><span class="p">.</span><span class="nx">Name</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Pick a random address.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// 核心，随机选择endpoint
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">ip</span> <span class="o">:=</span> <span class="nx">ss</span><span class="p">.</span><span class="nx">Addresses</span><span class="p">[</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">ss</span><span class="p">.</span><span class="nx">Addresses</span><span class="p">))].</span><span class="nx">IP</span>
</span></span><span class="line"><span class="cl">				<span class="nx">port</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">ss</span><span class="p">.</span><span class="nx">Ports</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Port</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="o">&amp;</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Scheme</span><span class="p">:</span> <span class="s">&#34;https&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Host</span><span class="p">:</span>   <span class="nx">net</span><span class="p">.</span><span class="nf">JoinHostPort</span><span class="p">(</span><span class="nx">ip</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">port</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">NewServiceUnavailable</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;no endpoints available for service %q&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>ProxyRoundTripper创建在<a href="https://github.com/kubernetes/kubernetes/blob/a42e029e6905bee5b9d5489610c4fbe5988eeac6/staging/src/k8s.io/client-go/transport/round_trippers.go#L101" target="_blank" rel="noopener noreffer">round_trippers.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewAuthProxyRoundTripper</span><span class="p">(</span><span class="nx">username</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">groups</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">extra</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">rt</span> <span class="nx">http</span><span class="p">.</span><span class="nx">RoundTripper</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">RoundTripper</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">authProxyRoundTripper</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">username</span><span class="p">:</span> <span class="nx">username</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">groups</span><span class="p">:</span>   <span class="nx">groups</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">extra</span><span class="p">:</span>    <span class="nx">extra</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rt</span><span class="p">:</span>       <span class="nx">rt</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rt</span> <span class="o">*</span><span class="nx">authProxyRoundTripper</span><span class="p">)</span> <span class="nf">RoundTrip</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Response</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">req</span> <span class="p">=</span> <span class="nx">utilnet</span><span class="p">.</span><span class="nf">CloneRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 包裹user信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">SetAuthProxyHeaders</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">rt</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="nx">rt</span><span class="p">.</span><span class="nx">groups</span><span class="p">,</span> <span class="nx">rt</span><span class="p">.</span><span class="nx">extra</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">rt</span><span class="p">.</span><span class="nx">rt</span><span class="p">.</span><span class="nf">RoundTrip</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// SetAuthProxyHeaders stomps the auth proxy header fields.  It mutates its argument.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">SetAuthProxyHeaders</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">username</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">groups</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">extra</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 清楚原始url的requestheader信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Del</span><span class="p">(</span><span class="s">&#34;X-Remote-User&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Del</span><span class="p">(</span><span class="s">&#34;X-Remote-Group&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">key</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Header</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">HasPrefix</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="s">&#34;X-Remote-Extra-&#34;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Del</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 通过user重新填充信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;X-Remote-User&#34;</span><span class="p">,</span> <span class="nx">username</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">group</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">groups</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;X-Remote-Group&#34;</span><span class="p">,</span> <span class="nx">group</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">values</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">extra</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;X-Remote-Extra-&#34;</span><span class="o">+</span><span class="nf">headerKeyEscape</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="扩展apiserver处理逻辑" class="headerLink">
    <a href="#%e6%89%a9%e5%b1%95apiserver%e5%a4%84%e7%90%86%e9%80%bb%e8%be%91" class="header-mark"></a>扩展apiserver处理逻辑</h3><p>下以metrics-server为例说明扩展apiserver在收到apiserver请求后的处理</p>
<p>与apiserver初始化相同，metrics-server也需要初始化生成<code>genericServer</code>, 然后注册apigroup
<code>pkg/metrics-server/config.go</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">Config</span><span class="p">)</span> <span class="nf">Complete</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">MetricsServer</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">informer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">informer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kubeletClient</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">kubeletClient</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">addressResolver</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">addressResolver</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建scraper，负责抓取监控数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">scrape</span> <span class="o">:=</span> <span class="nx">scraper</span><span class="p">.</span><span class="nf">NewScraper</span><span class="p">(</span><span class="nx">informer</span><span class="p">.</span><span class="nf">Core</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">Nodes</span><span class="p">().</span><span class="nf">Lister</span><span class="p">(),</span> <span class="nx">kubeletClient</span><span class="p">,</span> <span class="nx">addressResolver</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">ScrapeTimeout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">scraper</span><span class="p">.</span><span class="nf">RegisterScraperMetrics</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">ScrapeTimeout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">RegisterServerMetrics</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">MetricResolution</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 生成genericServer, 包裹有 DefaultBuildHandlerChain
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericServer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Apiserver</span><span class="p">.</span><span class="nf">Complete</span><span class="p">(</span><span class="nx">informer</span><span class="p">).</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;metrics-server&#34;</span><span class="p">,</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nf">NewEmptyDelegate</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">store</span> <span class="o">:=</span> <span class="nx">storage</span><span class="p">.</span><span class="nf">NewStorage</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 注册api
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">api</span><span class="p">.</span><span class="nf">Install</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nx">informer</span><span class="p">.</span><span class="nf">Core</span><span class="p">().</span><span class="nf">V1</span><span class="p">(),</span> <span class="nx">genericServer</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">MetricsServer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">GenericAPIServer</span><span class="p">:</span> <span class="nx">genericServer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">storage</span><span class="p">:</span>          <span class="nx">store</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scraper</span><span class="p">:</span>          <span class="nx">scrape</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">resolution</span><span class="p">:</span>       <span class="nx">c</span><span class="p">.</span><span class="nx">MetricResolution</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>api注册代码，通过<code>Build</code>生成apigroup，调用<code>InstallAPIGroup</code>进行注册
<code>pkg/api/install.go</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// InstallStorage builds the metrics for the metrics.k8s.io API, and then installs it into the given API metrics-server.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Install</span><span class="p">(</span><span class="nx">metrics</span> <span class="nx">MetricsGetter</span><span class="p">,</span> <span class="nx">informers</span> <span class="nx">coreinf</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span> <span class="nx">server</span> <span class="o">*</span><span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">GenericAPIServer</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">info</span> <span class="o">:=</span> <span class="nf">Build</span><span class="p">(</span><span class="nx">metrics</span><span class="p">,</span> <span class="nx">informers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 注册apigroup
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">server</span><span class="p">.</span><span class="nf">InstallAPIGroup</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">info</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Build constructs APIGroupInfo the metrics.k8s.io API group using the given getters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Build</span><span class="p">(</span><span class="nx">m</span> <span class="nx">MetricsGetter</span><span class="p">,</span> <span class="nx">informers</span> <span class="nx">coreinf</span><span class="p">.</span><span class="nx">Interface</span><span class="p">)</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">APIGroupInfo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">apiGroupInfo</span> <span class="o">:=</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nf">NewDefaultAPIGroupInfo</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nx">GroupName</span><span class="p">,</span> <span class="nx">Scheme</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ParameterCodec</span><span class="p">,</span> <span class="nx">Codecs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 注册metrics相关api
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">node</span> <span class="o">:=</span> <span class="nf">newNodeMetrics</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">Resource</span><span class="p">(</span><span class="s">&#34;nodemetrics&#34;</span><span class="p">),</span> <span class="nx">m</span><span class="p">,</span> <span class="nx">informers</span><span class="p">.</span><span class="nf">Nodes</span><span class="p">().</span><span class="nf">Lister</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">:=</span> <span class="nf">newPodMetrics</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">Resource</span><span class="p">(</span><span class="s">&#34;podmetrics&#34;</span><span class="p">),</span> <span class="nx">m</span><span class="p">,</span> <span class="nx">informers</span><span class="p">.</span><span class="nf">Pods</span><span class="p">().</span><span class="nf">Lister</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metricsServerResources</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Storage</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;nodes&#34;</span><span class="p">:</span> <span class="nx">node</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;pods&#34;</span><span class="p">:</span>  <span class="nx">pod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">apiGroupInfo</span><span class="p">.</span><span class="nx">VersionedResourcesStorageMap</span><span class="p">[</span><span class="nx">v1beta1</span><span class="p">.</span><span class="nx">SchemeGroupVersion</span><span class="p">.</span><span class="nx">Version</span><span class="p">]</span> <span class="p">=</span> <span class="nx">metricsServerResources</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">apiGroupInfo</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>同apiserver，metrics-server收到请求后会经过<code>DefaultBuildHandlerChain</code></p>
<ul>
<li>认证，从apiserver转发来的请求是<code>reqeustheader</code>形式，metrics-server会使用<code>requestheader-ca</code>验证证书</li>
<li>鉴权，同apiserver一样</li>
</ul>
<blockquote>
<p>注意, 如果apiserver未配置<code>proxy-client</code>证书，metrics-server认证不通过，即使apiserver认证通过，metrics-server也会认为是匿名用户<code>system:anonymous</code></p>
</blockquote>
<p>最后，metrics-server执行具体逻辑，返回结果。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>扩容apiserver的创建，处理流程与apiserver完全一样，可以直接调用apiserver的库，扩展apiserver直接处理请求，不需要经过webhook，性能更好，更强大的是完全不使用etcd，替换成时序数据库或者其他数据库。后续可以分析下CRD与扩展apiserver的区别以及使用场景。</p>]]></description>
</item></channel>
</rss>
