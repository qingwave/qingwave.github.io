<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>database - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/database/</link>
        <description>database - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Wed, 01 Mar 2023 08:01:22 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/tags/database/" rel="self" type="application/rss+xml" /><item>
    <title>Golang实现一个事务型内存数据库</title>
    <link>https://qingwave.github.io/golang-in-memory-database/</link>
    <pubDate>Wed, 01 Mar 2023 08:01:22 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/golang-in-memory-database/</guid>
    <description><![CDATA[<p>内存数据库经我们经常用到，例如Redis，那么如何从零实现一个内存数据库呢，本文旨在介绍如何使用Golang编写一个KV内存数据库<a href="https://github.com/qingwave/mossdb" target="_blank" rel="noopener noreffer">MossDB</a>。</p>
<h2 id="特性" class="headerLink">
    <a href="#%e7%89%b9%e6%80%a7" class="header-mark"></a>特性</h2><p>MossDB是一个纯Golang编写、可嵌入的、键值型内存数据库，包含以下特性</p>
<ul>
<li>可持久化，类似Redis AOF(Append only Log)</li>
<li>支持事务</li>
<li>支持近实时的TTL(Time to Live), 可以实现毫秒级的过期删除</li>
<li>前缀搜索</li>
<li>Watch接口，可以监听某个键值的内容变化，类似etcd的Watch</li>
<li>多后端存储，目前支持HashMap和RadixTree</li>
</ul>
<h2 id="命名由来" class="headerLink">
    <a href="#%e5%91%bd%e5%90%8d%e7%94%b1%e6%9d%a5" class="header-mark"></a>命名由来</h2><p><code>Moss</code>有苔、苔花的含义，MossDB的名字来源于清代袁牧的一句诗:</p>
<blockquote>
<p>苔花如米小，也学牡丹开</p>
</blockquote>
<p>MossDB虽小，但五脏俱全，也支持了很多重要功能。另外，巧合的是《流浪地球2》中的超级计算机550W名字就是Moss。</p>
<h2 id="架构" class="headerLink">
    <a href="#%e6%9e%b6%e6%9e%84" class="header-mark"></a>架构</h2><p>内存数据库虽然使用简单，实现起来却有很多细节，Golang目前也存在不少优秀的开源内存数据库，比如<a href="https://github.com/tidwall/buntdb" target="_blank" rel="noopener noreffer">buntdb</a>、<a href="https://github.com/hashicorp/go-memdb" target="_blank" rel="noopener noreffer">go-memdb</a>，在编写MossDB过程中也借鉴了一些它们的特性。</p>
<p>MossDB的架构如图：


</p>
<p>自上往下分为：</p>
<ol>
<li>接口层，提供API接受用户请求</li>
<li>核心层，实现事务、过期删除、Watch等功能</li>
<li>存储层，提供KV的后端存储以及增删改查</li>
<li>持久化层，使用AOL持久化即每次修改操作都会持久化到磁盘Log中</li>
</ol>
<h3 id="快速开始" class="headerLink">
    <a href="#%e5%bf%ab%e9%80%9f%e5%bc%80%e5%a7%8b" class="header-mark"></a>快速开始</h3><p>MossDB可嵌入到Go程序中，可以通过<code>go get</code>获取</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">go get github.com/qingwave/mossdb
</span></span></code></pre></div><p>MossDB提供了易用的API，可以方便地进行数据处理，下面的示例代码展示了如何使用MossDB：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/qingwave/mossdb&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// create db instance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">mossdb</span><span class="p">.</span><span class="nx">Config</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// set, get data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;key1&#34;</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;val1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;get key1: %s&#34;</span><span class="p">,</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;key1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// transaction
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">db</span><span class="p">.</span><span class="nf">Tx</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">mossdb</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">val1</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;key1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">tx</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;key2&#34;</span><span class="p">,</span> <span class="nx">val1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>更多示例见<a href="https://github.com/qingwave/mossdb" target="_blank" rel="noopener noreffer">源码</a></p>
<h2 id="具体实现" class="headerLink">
    <a href="#%e5%85%b7%e4%bd%93%e5%ae%9e%e7%8e%b0" class="header-mark"></a>具体实现</h2><p>从下往上分别介绍下MossDB如何设计与实现，以及相关的细节。</p>
<h3 id="aof持久化" class="headerLink">
    <a href="#aof%e6%8c%81%e4%b9%85%e5%8c%96" class="header-mark"></a>AOF持久化</h3><p>AOF源于Redis提供两种持久化技术，另外一种是RDB，AOF是指在每次写操作后，将该操作序列化后追加到文件中，重启时重放文件中的对应操作，从而达到持久化的目的。其实现简单，用在MossDB是一个不错的选择，但需要注意的是AOF缺点同样明显，如果文件较大，每次重启会花费较多时间。</p>
<p>Redis的AOF是一种后写式日志，先写内存直接返回给用户，再写磁盘文件持久化，可以保证其高性能，但如果中途宕机会丢失数据。MossDB中的AOF采用了WAL(预写式日志)实现，先写Log再写内存，用来保证数据不会丢失，从而可以进一步实现事务。</p>
<p>那么采用WAL会不会影响其性能？每次必须等到落盘后才进行其他操作，WAL的每次写入会先写到内核缓冲区，这个调用很快就返回了，内核再将数据落盘。我们也可以使用<code>fsync</code>调用强制内核执行直接将数据写入磁盘。在MossDB中普通写操作之会不会直接调用<code>fsync</code>，事务写中强制开启<code>fsync</code>，从而平衡数据一致性与性能。</p>
<p>WAL的实现引用了<a href="https://github.com/tidwall/wal" target="_blank" rel="noopener noreffer">tiwall/wal</a>，其中封装了对Log文件的操作，可以支持批量写入。由于WAL是二进制的，必须将数据进行编码，通过<code>varint</code>编码实现，将数据长度插入到数据本体之前，读取时可以读取定长的数据长度，然后按长度读取数据本体。MossDB中数据格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Record</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Op</span>        <span class="kt">uint16</span>
</span></span><span class="line"><span class="cl">	<span class="nx">KeySize</span>   <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ValSize</span>   <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Timestamp</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">TTL</span>       <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Key</span>       <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Val</span>       <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>对应编码后的二进制格式为:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">|------------------------------------------------------------|
</span></span><span class="line"><span class="cl">| Op | KeySize | ValSize | Timestamp | TTL | Key    | Val    |
</span></span><span class="line"><span class="cl">|------------------------------------------------------------|
</span></span><span class="line"><span class="cl">| 2  | 4       | 4       | 8         | 8   | []byte | []byte |
</span></span><span class="line"><span class="cl">|------------------------------------------------------------|
</span></span></code></pre></div><p>使用<code>binary.BigEndian.PutUint16</code>进行编码，解码时通过<code>binary.BigEndian.Uint16</code>，从而依次取得生成完整的数据。</p>
<h3 id="存储引擎" class="headerLink">
    <a href="#%e5%ad%98%e5%82%a8%e5%bc%95%e6%93%8e" class="header-mark"></a>存储引擎</h3><p>MossDB提供了存储接口，只要实现了此接口都可以作为其后端存储</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Store</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Set</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">val</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Prefix</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Dump</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Len</span><span class="p">()</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>内置提供了HashMap与RadixTree两种方式，HashMap实现简单通过简单封装<code>map</code>可以快速进行查询与插入，但范围搜索性能差。RadixTree即前缀树，查询插入的时间复杂度只与Key的长度相关，而且支持范围搜索，MossDB采用<a href="https://github.com/arriqaaq/art" target="_blank" rel="noopener noreffer">Adaptive Radix Tree</a>可以避免原生的前准树空间浪费。</p>
<p>由于RadixTree的特性，MossDB可以方便的进行前缀搜索，目前支持<code>List</code>与<code>Watch</code>操作。</p>
<h3 id="事务实现" class="headerLink">
    <a href="#%e4%ba%8b%e5%8a%a1%e5%ae%9e%e7%8e%b0" class="header-mark"></a>事务实现</h3><p>要实现事务必须要保证其ACID特性，MossDB的事务定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Tx</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span>      <span class="o">*</span><span class="nx">DB</span> <span class="c1">// DB实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">commits</span> <span class="p">[]</span><span class="o">*</span><span class="nx">Record</span> <span class="c1">// 对于写操作生成 Record, 用来做持久化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">undos</span>   <span class="p">[]</span><span class="o">*</span><span class="nx">Record</span> <span class="c1">// 对于写操作生成 Undo Record，用于回滚
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>MossDB中一次事务的流程主要包含以下几个步骤：</p>
<ol>
<li>首先加锁，保证其数据一致性</li>
<li>对于写操作，生成Commits和Undo Records，然后写入内存；读操作则直接执行</li>
<li>提交阶段，将Commits持久化到WAL中；若写入失败，则删除已写入数据；成功则设置数据的其他属性(TTL, Watch等)</li>
<li>若中间发生错误，执行回滚操作，将Undo Records的记录执行</li>
<li>事务完成，释放锁</li>
</ol>
<h3 id="watch" class="headerLink">
    <a href="#watch" class="header-mark"></a>Watch</h3><p>由于工作中经常使用Kubernetes，对于其Watch接口印象深刻，通过Watch来充当其事件总线，保证其声明式对象的管理。Kubernetes的Watch底层由etcd实现，MossDB也实现了类似的功能。</p>
<p>Watch的定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Watcher</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mu</span>       <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span> <span class="c1">// 锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">watchers</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">SubWatcher</span> <span class="c1">// watchId与具体Watcher直接的映射
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">keys</span>     <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">containerx</span><span class="p">.</span><span class="nx">Set</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span> <span class="c1">// Watch单个key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ranges</span>   <span class="o">*</span><span class="nx">art</span><span class="p">.</span><span class="nx">Tree</span> <span class="c1">// 前缀Watch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">queue</span>    <span class="nx">workqueue</span><span class="p">.</span><span class="nx">WorkQueue</span> <span class="c1">// 工作队列，存放所有事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">stop</span>     <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span> <span class="c1">// 是否中止
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>通过<a href="https://github.com/qingwave/gocorex/blob/main/syncx/workqueue/workqueue.go" target="_blank" rel="noopener noreffer">工作队列</a>模式，任何写操作都会同步追加到队列中，如果存在单个key的监听者，则通过<code>watchers</code> map获取到对应列表，依次发送事件。对于前缀Watch，我们不可能记录此前缀的所有Key，这里借鉴了etcd，通过RadixTree保存<code>前缀Key</code>，当有新事件时，匹配Key所在的路径，如果有监听者，则进行事件通知。</p>
<p>调用Watch会返回一个Channel，用户只需要监听Channel即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">mossdb</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span> <span class="o">:=</span> <span class="s">&#34;watch-key&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="mi">1000</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// start watch key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;start watch key %s&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 模拟发送event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">Val</span><span class="p">(</span><span class="s">&#34;val1&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">Val</span><span class="p">(</span><span class="s">&#34;val2&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">mossdb</span><span class="p">.</span><span class="nf">Val</span><span class="p">(</span><span class="s">&#34;val3&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;context done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;watch done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;receive event: %s, key: %s, new val: %s&#34;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">Op</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">Key</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">Val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Output
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 2023/02/23 09:48:50 start watch key watch-key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 receive event: MODIFY, key: watch-key, new val: val1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 receive event: MODIFY, key: watch-key, new val: val2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 receive event: DELETE, key: watch-key, new val:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2023/02/23 09:34:19 context done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h3 id="ttl" class="headerLink">
    <a href="#ttl" class="header-mark"></a>TTL</h3><p>过期删除再很多场景很有用，比如验证码过期、订单未支付关闭等。MossDB采用时间堆来实现精确的Key过期策略，具体原理可以参考之前的文章<a href="/golang-distributed-system-x-cron" rel="">Golang分布式应用之定时任务</a>，在查询操作时也会检查Key是否过期，如果过期则直接返回空数据。配合Watch操作可以精确管理数据的生命周期。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>至此，MossDB的实现细节已经分析完成，支持了事务、持久化、Watch与过期删除等特性，后续可能会支持HTTP API、存储快照等功能。</p>
<p>所有代码见<a href="https://github.com/qingwave/mossdb" target="_blank" rel="noopener noreffer">https://github.com/qingwave/mossdb</a>，欢迎批评指正以及Star。</p>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item></channel>
</rss>
