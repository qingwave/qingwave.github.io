<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>container - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/container/</link>
        <description>container - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Mon, 21 Sep 2020 11:45:00 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/tags/container/" rel="self" type="application/rss+xml" /><item>
    <title>Kubernetes中Sidecar生命周期管理</title>
    <link>https://qingwave.github.io/k8s-sideccar-lifecycle/</link>
    <pubDate>Mon, 21 Sep 2020 11:45:00 &#43;0000</pubDate><author>
        <name>qinng</name>
    </author><guid>https://qingwave.github.io/k8s-sideccar-lifecycle/</guid>
    <description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>在多个容器的Pod中，通常业务容器需要依赖sidecar。启动时sidecar需要先启动，退出时sidecar需要在业务容器退出后再退出。k8s目前对于sidecar的生命周期比较有争议，见<a href="https://github.com/kubernetes/enhancements/issues/753" target="_blank" rel="noopener noreffer">issue</a>、<a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/0753-sidecarcontainers.md" target="_blank" rel="noopener noreffer">sidecarcontainers</a>。</p>
<p>Kubernetes Pod 内有两种容器: 初始化容器(init container)和应用容器(app container)。</p>
<p>其中初始化容器的执行先于应用容器，按顺序启动，执行成功启动下一个：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">container</span> <span class="o">:=</span> <span class="nx">podContainerChanges</span><span class="p">.</span><span class="nx">NextInitContainerToStart</span><span class="p">;</span> <span class="nx">container</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Start the next init container.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">start</span><span class="p">(</span><span class="s">&#34;init container&#34;</span><span class="p">,</span> <span class="nf">containerStartSpec</span><span class="p">(</span><span class="nx">container</span><span class="p">));</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Successfully started the container; clear the entry in the failure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Completed init container %q for pod %q&#34;</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">format</span><span class="p">.</span><span class="nf">Pod</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>而对于应用容器，无法保证容器ready顺序，启动代码如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">    <span class="c1">// Step 7: start containers in podContainerChanges.ContainersToStart.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">idx</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">podContainerChanges</span><span class="p">.</span><span class="nx">ContainersToStart</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// start函数向docker发请求启动容器，这里没有检测函数返回而且不确定ENTRYPOINT是否成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nf">start</span><span class="p">(</span><span class="s">&#34;container&#34;</span><span class="p">,</span> <span class="nf">containerStartSpec</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Containers</span><span class="p">[</span><span class="nx">idx</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>在删除时，同样无法保证删除顺序，代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">container</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">runningPod</span><span class="p">.</span><span class="nx">Containers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">container</span> <span class="o">*</span><span class="nx">kubecontainer</span><span class="p">.</span><span class="nx">Container</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">killContainerResult</span> <span class="o">:=</span> <span class="nx">kubecontainer</span><span class="p">.</span><span class="nf">NewSyncResult</span><span class="p">(</span><span class="nx">kubecontainer</span><span class="p">.</span><span class="nx">KillContainer</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 每一个容器起goroutine执行删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">killContainer</span><span class="p">(</span><span class="nx">pod</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">ID</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">gracePeriodOverride</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">               <span class="o">...</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">containerResults</span> <span class="o">&lt;-</span> <span class="nx">killContainerResult</span>
</span></span><span class="line"><span class="cl">        <span class="p">}(</span><span class="nx">container</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><h2 id="启动顺序" class="headerLink">
    <a href="#%e5%90%af%e5%8a%a8%e9%a1%ba%e5%ba%8f" class="header-mark"></a>启动顺序</h2><p>k8s原生方式，对于pod中一个容器依赖另一个容器，目前需要业务进程判断依赖服务是否启动或者sleep 10s，这种方式可以工作，但不太优雅。需要业务更改启动脚本。</p>
<p>那么，有没有其他的解决办法？</p>
<h3 id="源码分析" class="headerLink">
    <a href="#%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90" class="header-mark"></a>源码分析</h3><p>在启动时，start函数调用startContainer来创建容器，主要代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">kubeGenericRuntimeManager</span><span class="p">)</span> <span class="nf">startContainer</span><span class="p">(</span><span class="nx">podSandboxID</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">podSandboxConfig</span> <span class="o">*</span><span class="nx">runtimeapi</span><span class="p">.</span><span class="nx">PodSandboxConfig</span><span class="p">,</span> <span class="nx">spec</span> <span class="o">*</span><span class="nx">startSpec</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">podStatus</span> <span class="o">*</span><span class="nx">kubecontainer</span><span class="p">.</span><span class="nx">PodStatus</span><span class="p">,</span> <span class="nx">pullSecrets</span> <span class="p">[]</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Secret</span><span class="p">,</span> <span class="nx">podIP</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">podIPs</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">container</span> <span class="o">:=</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">container</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Step 1: 拉镜像.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">imageRef</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">imagePuller</span><span class="p">.</span><span class="nf">EnsureImageExists</span><span class="p">(</span><span class="nx">pod</span><span class="p">,</span> <span class="nx">container</span><span class="p">,</span> <span class="nx">pullSecrets</span><span class="p">,</span> <span class="nx">podSandboxConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Step 2: 调用cri创建容器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// For a new container, the RestartCount should be 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">containerID</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">runtimeService</span><span class="p">.</span><span class="nf">CreateContainer</span><span class="p">(</span><span class="nx">podSandboxID</span><span class="p">,</span> <span class="nx">containerConfig</span><span class="p">,</span> <span class="nx">podSandboxConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Step 3: 启动容器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">runtimeService</span><span class="p">.</span><span class="nf">StartContainer</span><span class="p">(</span><span class="nx">containerID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Step 4: 执行 post start hook.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Lifecycle</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Lifecycle</span><span class="p">.</span><span class="nx">PostStart</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">kubeContainerID</span> <span class="o">:=</span> <span class="nx">kubecontainer</span><span class="p">.</span><span class="nx">ContainerID</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Type</span><span class="p">:</span> <span class="nx">m</span><span class="p">.</span><span class="nx">runtimeName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nx">ID</span><span class="p">:</span>   <span class="nx">containerID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用Run来执行hook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">msg</span><span class="p">,</span> <span class="nx">handlerErr</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">runner</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">kubeContainerID</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">container</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Lifecycle</span><span class="p">.</span><span class="nx">PostStart</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>步骤如下：</p>
<ol>
<li>拉取镜像</li>
<li>创建容器</li>
<li>启动容器</li>
<li>执行hook</li>
</ol>
<p>一个Pod中容器的启动是有顺序的，排在前面容器的先启动。同时第一个容器执行完ENTRYPOINT和PostStart之后（异步执行，无法确定顺序），k8s才会创建第二个容器（这样的话就可以保证第一个容器创建多长时间后再启动第二个容器）</p>
<p>如果我们PostStart阶段去检测容器是否ready，那么只有在ready后才去执行下一个容器。</p>
<p>

</p>
<h3 id="测试" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95" class="header-mark"></a>测试</h3><p>配置如下，sidecar模拟需要依赖的容器，main为业务容器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-start</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sidecar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/bin/sh&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;-c&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;sleep 3600&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lifecycle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">postStart</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/bin/sh&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;-c&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;sleep 20&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/bin/sh&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;-c&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;sleep 3600&#34;</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p>得到结果如下，可以看到sidecar启动21s后才开始启动main容器，满足需求</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Events:
</span></span><span class="line"><span class="cl">  Type    Reason     Age   From                                          Message
</span></span><span class="line"><span class="cl">  ----    ------     ----  ----                                          -------
</span></span><span class="line"><span class="cl">  Normal  Scheduled  54s   default-scheduler                             Successfully assigned default/test-start to tj1-staging-k8s-slave95-202008.kscn
</span></span><span class="line"><span class="cl">  Normal  Pulling    53s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Pulling image <span class="s2">&#34;busybox&#34;</span>
</span></span><span class="line"><span class="cl">  Normal  Pulled     44s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Successfully pulled image <span class="s2">&#34;busybox&#34;</span>
</span></span><span class="line"><span class="cl">  Normal  Created    44s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Created container sidecar
</span></span><span class="line"><span class="cl">  Normal  Started    44s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Started container sidecar
</span></span><span class="line"><span class="cl">  Normal  Pulling    23s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Pulling image <span class="s2">&#34;busybox&#34;</span>
</span></span><span class="line"><span class="cl">  Normal  Pulled     19s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Successfully pulled image <span class="s2">&#34;busybox&#34;</span>
</span></span><span class="line"><span class="cl">  Normal  Created    18s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Created container main
</span></span><span class="line"><span class="cl">  Normal  Started    18s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Started container main
</span></span></code></pre></div><p>此方案可能存在的缺点：</p>
<ol>
<li>如果sidecar启动失败或者hook失败，其他容器会立即启动</li>
</ol>
<h2 id="退出顺序" class="headerLink">
    <a href="#%e9%80%80%e5%87%ba%e9%a1%ba%e5%ba%8f" class="header-mark"></a>退出顺序</h2><p>容器启动顺序比较好解决，退出顺序则是按照相反的顺序，业务容器先退出，之后sidecar再退出。</p>
<p>目前，在kubelet删除pod步骤如下;</p>
<ol>
<li>遍历容器，每个容器起一个goroutine删除</li>
<li>删除时，先执行pre stop hook，得到gracePeriod=DeletionGracePeriodSeconds-period(stophook)</li>
<li>再调用cri删除接口m.runtimeService.StopContainer(containerID.ID, gracePeriod)</li>
</ol>
<p>如果在sidecar的pre stop hook检测业务容器状态，那么可以延迟退出。</p>
<h3 id="测试-1" class="headerLink">
    <a href="#%e6%b5%8b%e8%af%95-1" class="header-mark"></a>测试</h3><p>业务容器main退出时，创建文件；sidecar通过post-stop检测到文件后，执行退出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-stop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sidecar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s2">&#34;/bin/sh&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s2">&#34;-c&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      trap &#34;touch /lifecycle/sidecar-terminated&#34; 15
</span></span></span><span class="line"><span class="cl"><span class="sd">      until [ -f &#34;/lifecycle/sidecar-terminated&#34; ];do
</span></span></span><span class="line"><span class="cl"><span class="sd">        date
</span></span></span><span class="line"><span class="cl"><span class="sd">        sleep 1
</span></span></span><span class="line"><span class="cl"><span class="sd">      done
</span></span></span><span class="line"><span class="cl"><span class="sd">      sleep 5
</span></span></span><span class="line"><span class="cl"><span class="sd">      cat /lifecycle/main-terminated
</span></span></span><span class="line"><span class="cl"><span class="sd">      t=$(date)
</span></span></span><span class="line"><span class="cl"><span class="sd">      echo &#34;sidecar exit at $t&#34;</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lifecycle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">preStop</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="s2">&#34;/bin/sh&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="s2">&#34;-c&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            until [ -f &#34;/lifecycle/main-terminated&#34; ];do
</span></span></span><span class="line"><span class="cl"><span class="sd">              sleep 1
</span></span></span><span class="line"><span class="cl"><span class="sd">            done
</span></span></span><span class="line"><span class="cl"><span class="sd">            t=$(date)
</span></span></span><span class="line"><span class="cl"><span class="sd">            echo &#34;main exit at $t&#34; &gt; /lifecycle/main-terminated</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s2">&#34;/bin/sh&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s2">&#34;-c&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      trap &#34;touch /lifecycle/main-terminated&#34; 15
</span></span></span><span class="line"><span class="cl"><span class="sd">      until [ -f &#34;/lifecycle/main-terminated&#34; ];do
</span></span></span><span class="line"><span class="cl"><span class="sd">        date
</span></span></span><span class="line"><span class="cl"><span class="sd">        sleep 1
</span></span></span><span class="line"><span class="cl"><span class="sd">      done</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">lifecycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">emptyDir</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></div><p>在日志中看到，main容器先结束，sidecar检测到main-terminated文件后，执行完post-stop-hook，sidecar主进程开始退出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl  logs -f test-stop main
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">Tue Sep  <span class="m">8</span> 03:14:20 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl">Tue Sep  <span class="m">8</span> 03:14:21 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl">Tue Sep  <span class="m">8</span> 03:14:22 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ kubectl  logs -f test-stop sidecar
</span></span><span class="line"><span class="cl">Tue Sep  <span class="m">8</span> 03:14:22 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl">Tue Sep  <span class="m">8</span> 03:14:23 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl"><span class="c1"># post stop hook 检测到main容器退出，记录日志</span>
</span></span><span class="line"><span class="cl">main <span class="nb">exit</span> at Tue Sep  <span class="m">8</span> 03:14:23 UTC <span class="m">2020</span>
</span></span><span class="line"><span class="cl"><span class="c1"># sidecar主进程退出</span>
</span></span><span class="line"><span class="cl">sidecar <span class="nb">exit</span> at Tue Sep  <span class="m">8</span> 03:14:29 UTC <span class="m">2020</span>
</span></span></code></pre></div><p>通过测试，使用postStopHook可以达到sidecar延迟退出的目的，但这种方式也有一些缺点</p>
<ol>
<li>配置复杂，多个sidecar都需要配置postStop监听业务容器状态</li>
<li>业务容器需要有可观察性（提供特定形式的健康检测）</li>
<li>poststop执行异常，会等到最大优雅退出时间（默认30s）后才终止</li>
</ol>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>目前对于sidecar生命周期的支持方案对比如下：</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>启动顺序</th>
<th>退出顺序</th>
<th>job sidecar</th>
<th>是否需要用户修改代码</th>
<th>是否需要修改k8s代码</th>
<th>缺点</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户控制</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
<td>需要</td>
<td>不需要</td>
<td>需要用户更改启动脚本;退出支持难度大，需要同时修改业务容器与sidecar启动脚本；大部分情况不支持</td>
<td>启动时需要检测sidecar服务状态</td>
</tr>
<tr>
<td>Lifecycle Hooks</td>
<td>支持</td>
<td>支持</td>
<td>不支持</td>
<td>不需要</td>
<td>不需要</td>
<td>配置hook复杂度高;在hook执行异常情况下不能确保顺序</td>
<td></td>
</tr>
<tr>
<td>富容器</td>
<td>支持</td>
<td>部分支持</td>
<td>部分支持</td>
<td>不需要</td>
<td>需要（更改镜像或启动命令）</td>
<td>所有功能集成在一个容器中，对于外部sidecar如istio envoy等，不可控;</td>
<td></td>
</tr>
<tr>
<td>修改源码</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>不需要</td>
<td>需要</td>
<td>需要满足各种情况，实现难度较大</td>
<td>社区有计划支持</td>
</tr>
</tbody>
</table>
<p>在k8s提供此类功能前，目前没有完善的方案。Lifecycle Hooks不需要更改用户启动代码以及k8s相关代码，相对于其他方式不失为一种解决思路。</p>
]]></description>
</item></channel>
</rss>
