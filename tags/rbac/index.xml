<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>rbac - 标签 - Qingwave</title>
        <link>https://qingwave.github.io/tags/rbac/</link>
        <description>rbac - 标签 - Qingwave</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>isguory@gmail.com (Qingwave)</managingEditor>
            <webMaster>isguory@gmail.com (Qingwave)</webMaster><lastBuildDate>Fri, 20 May 2022 06:03:49 &#43;0000</lastBuildDate><atom:link href="https://qingwave.github.io/tags/rbac/" rel="self" type="application/rss+xml" /><item>
    <title>Open Policy Agent vs Casbin</title>
    <link>https://qingwave.github.io/openpolicyagent-vs-casbin/</link>
    <pubDate>Fri, 20 May 2022 06:03:49 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/openpolicyagent-vs-casbin/</guid>
    <description><![CDATA[<p>大型项目中基本都包含有复杂的访问控制策略，特别是在一些多租户场景中，例如Kubernetes中就支持RBAC，ABAC等多种授权类型。在Golang中目前比较热门的访问控制框架有<a href="https://www.openpolicyagent.org/" target="_blank" rel="noopener noreffer">Open Policy Agent</a>与<a href="https://casbin.org/" target="_blank" rel="noopener noreffer">Casbin</a>，本文主要分析其异同与选型策略。</p>
<h2 id="open-policy-agent" class="headerLink">
    <a href="#open-policy-agent" class="header-mark"></a>Open Policy Agent</h2><p>Open Policy Agent(简称OPA)是一个开源的策略引擎，托管于CNCF，通常用来做在微服务、API网关、Kubernetes、CI/CD等系统中做策略管理。</p>
<p>OPA将策略从代码中分离出来，按照官网的说法OPA实现了<em>策略即代码</em>，通过Rego声明式语言实现决策逻辑，当系统需要做出策略时，只需携带请求查询OPA即可，OPA会返回决策结果。


</p>
<h3 id="那么我们为什么需要opa" class="headerLink">
    <a href="#%e9%82%a3%e4%b9%88%e6%88%91%e4%bb%ac%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81opa" class="header-mark"></a>那么我们为什么需要OPA?</h3><p>大型软件中各个组件都需要进行一些策略控制，比如用户权限校验、创建资源校验、某个时间段允许访问，如果每个组件都需要实现一套策略控制，那么彼此之间会不统一，维护困难。一个自然的想法是能否将这些策略逻辑抽离出来，形成一个单独的服务，同时这个服务可能需要提供各种不同sdk来屏蔽语言差异。</p>
<p>OPA正是解决这个问题，将散落在系统各处的策略进行统一，所有服务直接请求OPA即可。通过引入OPA可以降低系统耦合性，减少维护复杂度。</p>
<h3 id="http-api中使用opa授权" class="headerLink">
    <a href="#http-api%e4%b8%ad%e4%bd%bf%e7%94%a8opa%e6%8e%88%e6%9d%83" class="header-mark"></a>Http API中使用OPA授权</h3><p>我们在Gin实现的Http服务中（原生http库也类似）引入OPA来实现Http API授权。示例代码见<a href="https://github.com/qingwave/opa-gin-authz" target="_blank" rel="noopener noreffer">https://github.com/qingwave/opa-gin-authz</a></p>
<p>首先需要实现策略，我们允许所有用户访问非api的接口，拒绝未认证用户访问api资源，通过Rego实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">authz</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">default</span> <span class="nx">allow</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">allow</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">input</span><span class="p">.</span><span class="nx">method</span> <span class="o">==</span> <span class="s">&#34;GET&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">not</span> <span class="nf">startswith</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="s">&#34;/api&#34;</span><span class="p">)</span> <span class="err">#如果请求方法为</span><span class="nx">GET</span><span class="err">并且</span><span class="nx">path</span><span class="err">不以</span><span class="o">/</span><span class="nx">api</span><span class="err">开头则允许</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">allow</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">input</span><span class="p">.</span><span class="nx">method</span> <span class="o">==</span> <span class="s">&#34;GET&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">input</span><span class="p">.</span><span class="nx">subject</span><span class="p">.</span><span class="nx">user</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="err">#用户名不为空</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在Gin中实现OPA插件，这里通过嵌入OPA到代码中来实现授权，也可以将OPA单独部署</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">WithOPA</span><span class="p">(</span><span class="nx">opa</span> <span class="o">*</span><span class="nx">rego</span><span class="p">.</span><span class="nx">PreparedEvalQuery</span><span class="p">,</span> <span class="nx">logger</span> <span class="o">*</span><span class="nx">zap</span><span class="p">.</span><span class="nx">Logger</span><span class="p">)</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">HandlerFunc</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">user</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;user&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">groups</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">QueryArray</span><span class="p">(</span><span class="s">&#34;groups&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">input</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span> <span class="c1">//构造OPA输入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="s">&#34;method&#34;</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">Method</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;path&#34;</span><span class="p">:</span>   <span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">RequestURI</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;subject&#34;</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">				<span class="s">&#34;user&#34;</span><span class="p">:</span>  <span class="nx">user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="s">&#34;group&#34;</span><span class="p">:</span> <span class="nx">groups</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;start opa middleware %s, %#v&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="nx">input</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">opa</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">rego</span><span class="p">.</span><span class="nf">EvalInput</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span> <span class="c1">// 验证用户请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nf">Abort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;opa result: %v, %#v&#34;</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">(),</span> <span class="nx">res</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">res</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusForbidden</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="s">&#34;msg&#34;</span><span class="p">:</span> <span class="s">&#34;forbidden&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">})</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nf">Abort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="casbin" class="headerLink">
    <a href="#casbin" class="header-mark"></a>Casbin</h2><p>Casbin是一个Golang实现的开源访问控制框架，支持RBAC、ACL等多种访问控制策略，也支持Golang、Java、JavaScript等多种语言。</p>
<p>在Casbin中, 访问控制模型被抽象为基于PERM(Policy, Effect, Request, Matcher) 的一个文件。通过定义PERM模型来描述资源与用户之间的关系，使用时将具体请求传入Casbin sdk即可返回决策结果。</p>
<h3 id="为什么需要casbin" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81casbin" class="header-mark"></a>为什么需要Casbin</h3><p>借助Casbin可以轻松实现比如RBAC的访问控制，不需要额外的代码。同时引入Casbin可以简化表结构，如果我们资源实现RBAC策略需要实现：用户表、角色表、操作表、用户角色表、角色操作表，通过RBAC实现，我们只需实现基础表即可，关系表由Casbin实现。</p>
<h3 id="casbin实现http-api访问控制" class="headerLink">
    <a href="#casbin%e5%ae%9e%e7%8e%b0http-api%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6" class="header-mark"></a>Casbin实现Http API访问控制</h3><p>首先，我们需要实现Casbin模式，包含请求与策略格式定义，Matchers即策略逻辑</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[request_definition]
</span></span><span class="line"><span class="cl">r = sub, obj, act
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[policy_definition]
</span></span><span class="line"><span class="cl">p = sub, obj, act
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[policy_effect]
</span></span><span class="line"><span class="cl">e = some(where (p.eft == allow)) #其中一个策略生效则返回True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[matchers]
</span></span><span class="line"><span class="cl">m = r.sub == p.sub &amp;&amp; keyMatch(r.obj, p.obj) &amp;&amp; r.act == p.act
</span></span></code></pre></div><p>预定义一些策略，也可以存储到数据库, alice可以访问所有/api开头的路径，bob只能访问/version路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">p, alice, /api/*, read
</span></span><span class="line"><span class="cl">p, bob, /version, write
</span></span></code></pre></div><p>通过各种需要的sdk可以轻松接入Casbin</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 加载模型与策略，也可以存储到数据库
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">e</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">casbin</span><span class="p">.</span><span class="nf">NewEnforcer</span><span class="p">(</span><span class="s">&#34;path/to/model.conf&#34;</span><span class="p">,</span> <span class="s">&#34;path/to/policy.csv&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">sub</span> <span class="o">:=</span> <span class="s">&#34;alice&#34;</span> <span class="c1">// the user that wants to access a resource.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">obj</span> <span class="o">:=</span> <span class="s">&#34;data1&#34;</span> <span class="c1">// the resource that is going to be accessed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">act</span> <span class="o">:=</span> <span class="s">&#34;read&#34;</span> <span class="c1">// the operation that the user performs on the resource.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Enforce</span><span class="p">(</span><span class="nx">sub</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="nx">act</span><span class="p">)</span> <span class="c1">//判断用户是否有权限
</span></span></span></code></pre></div><h2 id="opa-vs-casbin" class="headerLink">
    <a href="#opa-vs-casbin" class="header-mark"></a>OPA vs Casbin</h2><p>那么，在项目中我们需要如何选择合适的策略引擎，如果项目授权方式比较简单，首先推荐通过代码实现，不需要引入第三方库。需要确实需要借助额外的框架可以考虑以下几点角度。</p>
<table>
    <tr>
        <td width="20%">对比项</td>
        <td width="40%"> OPA</td>
        <td width="40%">Casbin</td>
    </tr>
    <tr>
        <td width="20%">访问控制策略</td>
        <td width="40%">通过Rego可以实现多种策略</td>
        <td width="40%">原生支持ACL、ABAC、RBAC等多种策略</td>
    </tr>
    <tr>
        <td width="20%">自定义策略</td>
        <td width="40%"> 支持</td>
        <td width="40%">通过自定义函数和Model实现，灵活性一般</td>
    </tr>
    <tr>
        <td width="20%">调整策略复杂度</td>
        <td width="40%">更改/添加Rego逻辑即可</td>
        <td width="40%">如果已存在大量策略数据，需要考虑数据迁移</td>
    </tr>
    <tr>
        <td width="20%"> 存储数据</td>
        <td width="40%">不支持</td>
        <td width="40%">支持存储策略存储到文件或数据库</td>
    </tr>
    <tr>
        <td width="20%">运行方式</td>
        <td width="40%">内嵌、单独部署</td>
        <td width="40%">通常为内嵌</td>
    </tr>
    <tr>
        <td width="20%">sdk支持语言</td>
        <td width="40%">Go、WASM(nodejs)、Python-rego，其他通过Restful API</td>
        <td width="40%">支持Java、Go、Python等多种常用语言</td>
    </tr>
    <tr>
        <td width="20%">策略返回格式</td>
        <td width="40%">Json数据</td>
        <td width="40%">True/False</td>
    </tr>
    <tr>
        <td width="20%">性能</td>
        <td width="40%">评估时间随着策略数据量会增加，支持多节点部署</td>
        <td width="40%">对于HTTP服务评估时间在1ms内</td>
    </tr>
</table>
<p>简而言之，如果系统策略模型固定，可以引入Casbin简化授权系统设计。如果策略需要经常调整、扩展，或者微服务系统中多个组件都需要策略控制，使用OPA可以将策略实现抽离出来。</p>
<h2 id="引用" class="headerLink">
    <a href="#%e5%bc%95%e7%94%a8" class="header-mark"></a>引用</h2><ol>
<li><a href="https://www.openpolicyagent.org/docs/latest/" target="_blank" rel="noopener noreffer">https://www.openpolicyagent.org/docs/latest/</a></li>
<li><a href="https://casbin.org/docs/zh-CN/" target="_blank" rel="noopener noreffer">https://casbin.org/docs/zh-CN/</a></li>
</ol>
<blockquote>
<p>Explore more in <a href="https://qingwave.github.io" target="_blank" rel="noopener noreffer">https://qingwave.github.io</a></p>
</blockquote>
]]></description>
</item><item>
    <title>kube-apiserver鉴权源码分析</title>
    <link>https://qingwave.github.io/kube-apiserver-authorization-code/</link>
    <pubDate>Thu, 23 Apr 2020 16:54:14 &#43;0000</pubDate><author>
        <name>Qingwave</name>
    </author><guid>https://qingwave.github.io/kube-apiserver-authorization-code/</guid>
    <description><![CDATA[<h2 id="简介" class="headerLink">
    <a href="#%e7%ae%80%e4%bb%8b" class="header-mark"></a>简介</h2><p>kube-apiserver中与权限相关的主要有三种机制，即认证、鉴权和准入控制。上节讲到<a href="./kube-apiserver-authentication-code.md" rel="">认证流程</a>。</p>
<p>认证与授权很容易混淆：</p>
<ul>
<li>认证(Authentication), 负责检查你是谁，识别user</li>
<li>授权(Authorization), 你能做什么，是否允许User对资源的操作</li>
<li>审计(Audit), 负责记录操作信息，方便后续审查</li>
</ul>
<p>本文主要分析apiserver的rbac授权流程。</p>
<h2 id="认证流程分析" class="headerLink">
    <a href="#%e8%ae%a4%e8%af%81%e6%b5%81%e7%a8%8b%e5%88%86%e6%9e%90" class="header-mark"></a>认证流程分析</h2><p>权限相关代码从<code>k8s.io/apiserver/pkg/server/config.go</code>中<code>DefaultBuildHandlerChain</code>函数开始执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">DefaultBuildHandlerChain</span><span class="p">(</span><span class="nx">apiHandler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">,</span> <span class="nx">c</span> <span class="o">*</span><span class="nx">Config</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="o">:=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithAuthorization</span><span class="p">(</span><span class="nx">apiHandler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Serializer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericfilters</span><span class="p">.</span><span class="nf">WithMaxInFlightLimit</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MaxRequestsInFlight</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MaxMutatingRequestsInFlight</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">LongRunningFunc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithImpersonation</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Serializer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithAudit</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">AuditBackend</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">AuditPolicyChecker</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">LongRunningFunc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">failedHandler</span> <span class="o">:=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">Unauthorized</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Serializer</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Authentication</span><span class="p">.</span><span class="nx">SupportsBasicAuth</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">failedHandler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithFailedAuthenticationAudit</span><span class="p">(</span><span class="nx">failedHandler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">AuditBackend</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">AuditPolicyChecker</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithAuthentication</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Authentication</span><span class="p">.</span><span class="nx">Authenticator</span><span class="p">,</span> <span class="nx">failedHandler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Authentication</span><span class="p">.</span><span class="nx">APIAudiences</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericfilters</span><span class="p">.</span><span class="nf">WithCORS</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">CorsAllowedOriginList</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;true&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericfilters</span><span class="p">.</span><span class="nf">WithTimeoutForNonLongRunningRequests</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">LongRunningFunc</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">RequestTimeout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericfilters</span><span class="p">.</span><span class="nf">WithWaitGroup</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">LongRunningFunc</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">HandlerChainWaitGroup</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericapifilters</span><span class="p">.</span><span class="nf">WithRequestInfo</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">RequestInfoResolver</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handler</span> <span class="p">=</span> <span class="nx">genericfilters</span><span class="p">.</span><span class="nf">WithPanicRecovery</span><span class="p">(</span><span class="nx">handler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">handler</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>DefaultBuildHandlerChain</code>中包含了多种filter（如认证，链接数检验，RBAC权限检验等），授权步骤在<code>WithAuthorization</code>中，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// WithAuthorizationCheck passes all authorized requests on to handler, and returns a forbidden error otherwise.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">WithAuthorization</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">,</span> <span class="nx">a</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span> <span class="nx">s</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">NegotiatedSerializer</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 检查是否需要权限校验
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">a</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;Authorization is disabled&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">handler</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">req</span><span class="p">.</span><span class="nf">Context</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 用作审计
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">ae</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">AuditEventFrom</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 获取Attribute, 通过reqeust获取到请求的user, resource, verb, 是否为namespace级别的等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">attributes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">GetAuthorizerAttributes</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">responsewriters</span><span class="p">.</span><span class="nf">InternalError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 执行认证流程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">authorized</span><span class="p">,</span> <span class="nx">reason</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">.</span><span class="nf">Authorize</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">attributes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// an authorizer like RBAC could encounter evaluation errors and still allow the request, so authorizer decision is checked before error here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">authorized</span> <span class="o">==</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">DecisionAllow</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">audit</span><span class="p">.</span><span class="nf">LogAnnotation</span><span class="p">(</span><span class="nx">ae</span><span class="p">,</span> <span class="nx">decisionAnnotationKey</span><span class="p">,</span> <span class="nx">decisionAllow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">audit</span><span class="p">.</span><span class="nf">LogAnnotation</span><span class="p">(</span><span class="nx">ae</span><span class="p">,</span> <span class="nx">reasonAnnotationKey</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 校验成功，记录信息，转到下一个handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">handler</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">audit</span><span class="p">.</span><span class="nf">LogAnnotation</span><span class="p">(</span><span class="nx">ae</span><span class="p">,</span> <span class="nx">reasonAnnotationKey</span><span class="p">,</span> <span class="nx">reasonError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">responsewriters</span><span class="p">.</span><span class="nf">InternalError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 校验失败返回403，注意认证失败返回的是401
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Forbidden: %#v, Reason: %q&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">RequestURI</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">audit</span><span class="p">.</span><span class="nf">LogAnnotation</span><span class="p">(</span><span class="nx">ae</span><span class="p">,</span> <span class="nx">decisionAnnotationKey</span><span class="p">,</span> <span class="nx">decisionForbid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">audit</span><span class="p">.</span><span class="nf">LogAnnotation</span><span class="p">(</span><span class="nx">ae</span><span class="p">,</span> <span class="nx">reasonAnnotationKey</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">responsewriters</span><span class="p">.</span><span class="nf">Forbidden</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">attributes</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">reason</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>授权流程比较清晰，从request获取请求信息，进行鉴权，成功进入后续handler，失败返回403。</p>
<p><code>Authorize</code>接口有多种实现，通过在apiserver配置<code>--authorization-mode</code>选择鉴权模式，包括：</p>
<ul>
<li>ABAC</li>
<li>RBAC</li>
<li>Node, 用于kubelet鉴权exec/logs等</li>
<li>AlwaysAllow</li>
<li>AlwaysDeny</li>
<li>Webhook， 用于扩展权限，用户可实现Webhook与其他权限系统集成</li>
</ul>
<p>如果选择<code>AlwaysAllow</code>,即不做鉴权, 开启后强制不允许匿名用户</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// ApplyAuthorization will conditionally modify the authentication options based on the authorization options
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">o</span> <span class="o">*</span><span class="nx">BuiltInAuthenticationOptions</span><span class="p">)</span> <span class="nf">ApplyAuthorization</span><span class="p">(</span><span class="nx">authorization</span> <span class="o">*</span><span class="nx">BuiltInAuthorizationOptions</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">o</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">authorization</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">o</span><span class="p">.</span><span class="nx">Anonymous</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// authorization ModeAlwaysAllow cannot be combined with AnonymousAuth.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// in such a case the AnonymousAuth is stomped to false and you get a message
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">o</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">.</span><span class="nx">Allow</span> <span class="o">&amp;&amp;</span> <span class="nx">sets</span><span class="p">.</span><span class="nf">NewString</span><span class="p">(</span><span class="nx">authorization</span><span class="p">.</span><span class="nx">Modes</span><span class="o">...</span><span class="p">).</span><span class="nf">Has</span><span class="p">(</span><span class="nx">authzmodes</span><span class="p">.</span><span class="nx">ModeAlwaysAllow</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;AnonymousAuth is not allowed with the AlwaysAllow authorizer. Resetting AnonymousAuth to false. You should use a different authorizer&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">o</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">.</span><span class="nx">Allow</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="rbac鉴权" class="headerLink">
    <a href="#rbac%e9%89%b4%e6%9d%83" class="header-mark"></a>rbac鉴权</h2><p>rbac是常用的鉴权方式，实现<code>Authorize</code>接口, 代码在<a href="https://github.com/kubernetes/kubernetes/blob/92eb072989eba22236d034b56cc2bf159dfb4915/plugin/pkg/auth/authorizer/rbac/rbac.go#L75" target="_blank" rel="noopener noreffer">rbac.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">RBACAuthorizer</span><span class="p">)</span> <span class="nf">Authorize</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">requestAttributes</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">Attributes</span><span class="p">)</span> <span class="p">(</span><span class="nx">authorizer</span><span class="p">.</span><span class="nx">Decision</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ruleCheckingVisitor</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">authorizingVisitor</span><span class="p">{</span><span class="nx">requestAttributes</span><span class="p">:</span> <span class="nx">requestAttributes</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 调用VisitRulesFor来检查是否用权限
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">r</span><span class="p">.</span><span class="nx">authorizationRuleResolver</span><span class="p">.</span><span class="nf">VisitRulesFor</span><span class="p">(</span><span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetUser</span><span class="p">(),</span> <span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetNamespace</span><span class="p">(),</span> <span class="nx">ruleCheckingVisitor</span><span class="p">.</span><span class="nx">visit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ruleCheckingVisitor</span><span class="p">.</span><span class="nx">allowed</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 成功直接返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">DecisionAllow</span><span class="p">,</span> <span class="nx">ruleCheckingVisitor</span><span class="p">.</span><span class="nx">reason</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 失败，打印日志返回失败原因
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Build a detailed log of the denial.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Make the whole block conditional so we don&#39;t do a lot of string-building we won&#39;t use.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">operation</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">IsResourceRequest</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">b</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">`&#34;`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetVerb</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">`&#34; resource &#34;`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetResource</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetAPIGroup</span><span class="p">())</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">`.`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetAPIGroup</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetSubresource</span><span class="p">())</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">`/`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetSubresource</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">`&#34;`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetName</span><span class="p">())</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">` named &#34;`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">				<span class="nx">b</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">`&#34;`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">operation</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">operation</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%q nonResourceURL %q&#34;</span><span class="p">,</span> <span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetVerb</span><span class="p">(),</span> <span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetPath</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">scope</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">ns</span> <span class="o">:=</span> <span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetNamespace</span><span class="p">();</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ns</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">scope</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;in namespace %q&#34;</span><span class="p">,</span> <span class="nx">ns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">scope</span> <span class="p">=</span> <span class="s">&#34;cluster-wide&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;RBAC DENY: user %q groups %q cannot %s %s&#34;</span><span class="p">,</span> <span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetUser</span><span class="p">().</span><span class="nf">GetName</span><span class="p">(),</span> <span class="nx">requestAttributes</span><span class="p">.</span><span class="nf">GetUser</span><span class="p">().</span><span class="nf">GetGroups</span><span class="p">(),</span> <span class="nx">operation</span><span class="p">,</span> <span class="nx">scope</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">reason</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ruleCheckingVisitor</span><span class="p">.</span><span class="nx">errors</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reason</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;RBAC: %v&#34;</span><span class="p">,</span> <span class="nx">utilerrors</span><span class="p">.</span><span class="nf">NewAggregate</span><span class="p">(</span><span class="nx">ruleCheckingVisitor</span><span class="p">.</span><span class="nx">errors</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">DecisionNoOpinion</span><span class="p">,</span> <span class="nx">reason</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>Authorize</code>调用了<code>VisitRulesFor</code>来处理具体鉴权操作, 代码在<a href="https://github.com/kubernetes/kubernetes/blob/81e9f21f832f88422f1ccf5b8aa90de7cf822132/pkg/registry/rbac/validation/rule.go#L178" target="_blank" rel="noopener noreffer">rule.go</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">DefaultRuleResolver</span><span class="p">)</span> <span class="nf">VisitRulesFor</span><span class="p">(</span><span class="nx">user</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Info</span><span class="p">,</span> <span class="nx">namespace</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">visitor</span> <span class="kd">func</span><span class="p">(</span><span class="nx">source</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Stringer</span><span class="p">,</span> <span class="nx">rule</span> <span class="o">*</span><span class="nx">rbacv1</span><span class="p">.</span><span class="nx">PolicyRule</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取所有clusterrolebinding
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">clusterRoleBindings</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">clusterRoleBindingLister</span><span class="p">.</span><span class="nf">ListClusterRoleBindings</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nf">visitor</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sourceDescriber</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">clusterRoleBindingDescriber</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 遍历clusterrolebing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">clusterRoleBinding</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">clusterRoleBindings</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 检查是否有对应的user
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">subjectIndex</span><span class="p">,</span> <span class="nx">applies</span> <span class="o">:=</span> <span class="nf">appliesTo</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">clusterRoleBinding</span><span class="p">.</span><span class="nx">Subjects</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">applies</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 如果user存在于subject, 获取对应的rules即clusterrole
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">rules</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">GetRoleReferenceRules</span><span class="p">(</span><span class="nx">clusterRoleBinding</span><span class="p">.</span><span class="nx">RoleRef</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">!</span><span class="nf">visitor</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">sourceDescriber</span><span class="p">.</span><span class="nx">binding</span> <span class="p">=</span> <span class="nx">clusterRoleBinding</span>
</span></span><span class="line"><span class="cl">			<span class="nx">sourceDescriber</span><span class="p">.</span><span class="nx">subject</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">clusterRoleBinding</span><span class="p">.</span><span class="nx">Subjects</span><span class="p">[</span><span class="nx">subjectIndex</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">rules</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// 调用visitor判断是否需要进入下一步鉴权
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="p">!</span><span class="nf">visitor</span><span class="p">(</span><span class="nx">sourceDescriber</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">rules</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// clusterrole遍历完还没有鉴权成功，接着遍历所在namespace的role，流程同上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">namespace</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">roleBindings</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">roleBindingLister</span><span class="p">.</span><span class="nf">ListRoleBindings</span><span class="p">(</span><span class="nx">namespace</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nf">visitor</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">sourceDescriber</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">roleBindingDescriber</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">roleBinding</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">roleBindings</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">subjectIndex</span><span class="p">,</span> <span class="nx">applies</span> <span class="o">:=</span> <span class="nf">appliesTo</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">roleBinding</span><span class="p">.</span><span class="nx">Subjects</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">!</span><span class="nx">applies</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">rules</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">GetRoleReferenceRules</span><span class="p">(</span><span class="nx">roleBinding</span><span class="p">.</span><span class="nx">RoleRef</span><span class="p">,</span> <span class="nx">namespace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="p">!</span><span class="nf">visitor</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="k">return</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">sourceDescriber</span><span class="p">.</span><span class="nx">binding</span> <span class="p">=</span> <span class="nx">roleBinding</span>
</span></span><span class="line"><span class="cl">				<span class="nx">sourceDescriber</span><span class="p">.</span><span class="nx">subject</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">roleBinding</span><span class="p">.</span><span class="nx">Subjects</span><span class="p">[</span><span class="nx">subjectIndex</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">rules</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="p">!</span><span class="nf">visitor</span><span class="p">(</span><span class="nx">sourceDescriber</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">rules</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="k">return</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>visit</code>函数, 用来判断是否认证成功，成功返回<code>false</code>, 不需要进行下一步鉴权</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">authorizingVisitor</span><span class="p">)</span> <span class="nf">visit</span><span class="p">(</span><span class="nx">source</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Stringer</span><span class="p">,</span> <span class="nx">rule</span> <span class="o">*</span><span class="nx">rbacv1</span><span class="p">.</span><span class="nx">PolicyRule</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">rule</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nf">RuleAllows</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">requestAttributes</span><span class="p">,</span> <span class="nx">rule</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// allowed用来表示是否认证成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">v</span><span class="p">.</span><span class="nx">allowed</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="nx">v</span><span class="p">.</span><span class="nx">reason</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;RBAC: allowed by %s&#34;</span><span class="p">,</span> <span class="nx">source</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">v</span><span class="p">.</span><span class="nx">errors</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">errors</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>rbac的鉴权流程如下:</p>
<ol>
<li>通过<code>Request</code>获取<code>Attribute</code>包括用户，资源和对应的操作</li>
<li><code>Authorize</code>调用<code>VisitRulesFor</code>进行具体的鉴权</li>
<li>获取所有的ClusterRoleBindings，并对其进行遍历操作</li>
<li>根据请求User信息，判断该是否被绑定在该ClusterRoleBinding中</li>
<li>若在将通过函数<code>GetRoleReferenceRules()</code>获取绑定的Role所控制的访问的资源</li>
<li>将Role所控制的访问的资源，与从API请求中提取出的资源进行比对，若比对成功，即为API请求的调用者有权访问相关资源</li>
<li>遍历ClusterRoleBinding中，都没有获得鉴权成功的操作，将会判断提取出的信息中是否包括了namespace的信息，若包括了，将会获取该namespace下的所有RoleBindings，类似ClusterRoleBindings</li>
<li>若在遍历了所有CluterRoleBindings，及该namespace下的所有RoleBingdings之后，仍没有对资源比对成功，则可判断该API请求的调用者没有权限访问相关资源, 鉴权失败</li>
</ol>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>本文结合RBAC分析了Kubernetes的鉴权流程，整体这部分比较代码清晰。RBAC是Kubernetes比较推荐的鉴权方式，了解完整个流程后，居然所有请求都会先遍历一遍ClusterRoleBindings，这样实现起来比较简单，但随着规模和用户的扩大，这部分是否会有性能问题，需不需要实现能够快速鉴权的方式。</p>
]]></description>
</item></channel>
</rss>
